<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title><![CDATA[Dias de Dev]]></title>
    <link href="https://dias.dev/atom.xml" rel="self"/>
    <link href="https://dias.dev"/>
    <updated>2023-03-10T02:55:07+00:00</updated>
    <id>https://dias.dev</id>
        <generator uri="http://sculpin.io/">Sculpin</generator>
            <entry>
            <title type="html"><![CDATA[Entenda o erro &quot;Cannot modify header information - headers already sent&quot; no PHP]]></title>
            <link href="https://dias.dev/2023-03-07-entenda-o-erro-cannot-modify-header-information-php/"/>
            <updated>2023-03-07T00:00:00+00:00</updated>
            <id>https://dias.dev/2023-03-07-entenda-o-erro-cannot-modify-header-information-php/</id>
            <content type="html"><![CDATA[<p>O famoso erro do PHP com o texto "<em>Cannot modify header information - headers already sent</em>" acontece quando tentamos enviar um cabeçalho <em>HTTP</em> após já termos enviado alguma saída no corpo da resposta. Nesse post nós vamos entender o que isso tudo significa e como evitar esse problema em seu código.</p>

<h2 id="_http_"><em>HTTP</em></h2>

<p><em>HTTP (HyperText Transfer Protocol)</em> é o protocolo usado na internet, então sempre que você acessa um site usando seu navegador, por exemplo, <em>HTTP</em> está sendo usado.</p>

<p><em>HTTP</em> é um protocolo que segue uma arquitetura cliente-servidor, onde há duas partes na comunicação. De forma super simplificada: você, usando seu navegador, é o cliente. O site que você acessa é o servidor.</p>

<p>Esse protocolo define mensagens de requisição (<em>request</em>) e resposta (<em>response</em>). Quando você acessa um site, seu navegador faz uma requisição para o servidor, que processa esse pedido e devolve uma resposta. Essas mensagens são divididas em duas grandes partes: <strong>cabeçalhos</strong> e <strong>corpo</strong>.</p>

<p>O corpo de uma resposta, por exemplo, é o conteúdo que você vê na tela, enquanto cabeçalhos possuem informações adicionais como <a href="/2022-09-27-cookies-e-seguranca">cookies</a>, informações de redirecionamento, etc.</p>

<p>Esse é um resumo bem conciso do protocolo <em>HTTP</em> e de <strong>como a internet funciona</strong>. Ainda sobre esse assunto, caso você tenha alguma dúvida ou queira entender melhor, eu tenho um vídeo no YouTube. Você pode conferí-lo antes de continuar lendo esse post:</p>

<p><lite-youtube videoid="B2IWlnJ_dt0" style="background-image: url('https://i.ytimg.com/vi/B2IWlnJ_dt0/hqdefault.jpg');">
  <a href="https://youtube.com/watch?v=B2IWlnJ_dt0" class="lty-playbtn" title="Reproduzir vídeo">
    <span class="lyt-visually-hidden">Play Video: Keynote (Google I/O '18)</span>
  </a>
</lite-youtube></p>

<h2 id="como-o-php-funciona">Como o PHP funciona</h2>

<p>Entendido como a <em>web</em> funciona, é hora de entender o que o <strong>PHP</strong> faz na <em>web</em>. Aqui no blog há um post sobre <a href="/2021-06-15-como-o-php-funciona-na-web">como o PHP funciona na Web</a> onde você pode entender como o <strong>PHP</strong> é executado, mas aqui vou resumir o que você precisa saber para entender o problema de "<em>Cannot modify header information - headers already sent</em>".</p>

<p>Quando você exibe algo em PHP, seja através de funções como <code>echo</code> ou até colocando <em>HTML</em> junto com seu PHP, esse conteúdo é enviado no corpo da resposta <em>HTTP</em> que o PHP gera. Isso tudo é feito de forma transparente para nós desenvolvedores.</p>

<p>Como foi citado no parágrafo anterior, uma resposta <em>HTTP</em> é dividida entre <strong>cabeçalhos</strong> e <strong>corpo</strong>, sendo que os cabeçalhos vêm antes do corpo. Sendo assim, para nós adicionarmos algo ao corpo da resposta com PHP, os cabeçalhos precisam ser montados e enviados antes.</p>

<p>Então quando você, em um sistema <em>Web</em> feito em PHP, executa um <code>echo</code>, por exemplo, os cabeçalhos da resposta <em>HTTP</em> são montados e enviados e depois o corpo é enviado com o conteúdo desse <code>echo</code>.</p>

<p>Existem também funções no PHP que podem enviar ou modificar cabeçalhos. Algumas dessas funções são:</p>

<ul>
<li><code>header</code></li>
<li><code>header_remove</code></li>
<li><code>session_start</code></li>
<li><code>setcookie</code></li>
<li>etc</li>
</ul>

<p><ins class="adsbygoogle"
style="display:block; text-align:center;"
data-ad-layout="in-article"
data-ad-format="fluid"
data-ad-client="ca-pub-8918461095244552"
data-ad-slot="2366637560"></ins></p>

<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>

<h2 id="entendendo-o-problema">Entendendo o problema</h2>

<p>Como foi dito logo na introdução desse <em>post</em>, o problema "<em>Cannot modify header information - headers already sent</em>" acontece quando tentamos enviar um cabeçalho <em>HTTP</em> após já termos enviado algo no corpo da resposta.</p>

<p>Isso quer dizer que esse erro acontece quando nós tentamos usar alguma função que adiciona ou modifica cabeçalhos <em>HTTP</em> quando algum conteúdo já foi exibido. Se você executar o seguinte código em um contexto <em>web</em>, verá o erro em questão:</p>

<pre><code class="php">&lt;?php

echo 'Corpo da resposta';

header('Location: /url-de-redirecionamento');
</code></pre>

<p>O que nós estamos tentando fazer é enviar o cabeçalho <code>Location</code>, mas o corpo da resposta já começou a ser enviado quando nós executamos <code>echo</code>, ou seja, os cabeçalhos já foram montados e enviados para o cliente.</p>

<h3 id="problema-acontecendo-mesmo-sem-echo-ou-html">Problema acontecendo mesmo sem echo ou HTML</h3>

<p>Você talvez esteja se perguntando o motivo de já ter se deparado com esse erro mesmo sem ter, antes de uma função <code>header</code>, por exemplo, nenhuma exibição de conteúdo. Sendo assim, teoricamente, nenhuma resposta deveria ter sido criada e os cabeçalhos ainda não teriam sido enviados.</p>

<p>O que acontece é que não é incomum que nós geremos uma resposta mesmo sem querer. Se deixarmos espaços em branco antes da <em>tag</em> de abertura do PHP (<code>&lt;?php</code>) ou após a <em>tag</em> de fechamento do PHP (<code>?&gt;</code>), esses espaços serão exibidos e com isso os cabeçalhos serão enviados. Outro caso <strong>muito comum</strong> é se nossa aplicação gerar algum aviso (os famosos <em>warnings</em> do PHP). Esses avisos sendo exibidos também geram uma resposta e com isso, os cabeçalhos são enviados.</p>

<h3 id="solu%C3%A7%C3%A3o">Solução</h3>

<p>Para que o erro não ocorra mais, você precisa se certificar que qualquer função que adiciona ou modifica cabeçalhos <em>HTTP</em> (como <code>header</code> ou <code>session_start</code>) seja executada antes que qualquer coisa seja exibida, mesmo que de forma acidental.</p>

<p>Para isso, você pode:</p>

<ol>
<li>Identificar e corrigir qualquer problema no código que gere algum erro ou aviso;</li>
<li>Mover as funções que adicionam ou modificam cabeçalhos <em>HTTP</em> para o início da execução de sua aplicação, antes de qualquer exibição no corpo da resposta;</li>
<li><a href="/2023-02-24-php-ini-conhecendo-as-configuracoes-do-php">Configurar o PHP</a> para não exibir os erros e avisos (Isso só deve ser feito em produção. Em ambiente de desenvolvimento precisamos ver e corrigir os avisos);</li>
<li>Evitar o uso da <em>tag</em> de fechamento do PHP (<code>?&gt;</code>) em arquivos que contenham apenas código PHP;</li>
<li>Garantir que não há espaços antes da <em>tag</em> de abertura (<code>&lt;?php</code>) ou depois da tag de fechamento (<code>?&gt;</code>) do PHP.</li>
<li>Controlar o <a href="/2020-11-03-wraper-de-streams-php"><em>output buffer</em></a> do PHP, caso se depare com um caso mais específico.</li>
</ol>

<h2 id="conclus%C3%A3o">Conclusão</h2>

<p>Um dos erros mais conhecidos do mundo PHP, embora assustador, não é tão difícil de resolver. Com esse post você deve ter as informações necessárias para não se deparar com ele novamente e para resolver o problema caso o encontre.</p>

<p>Caso queira se aprofundar e conhecer ainda mais nos estudos sobre PHP, aqui tem um cupom de desconto para assinar a Alura, plataforma de cursos online onde eu sou o instrutor da maioria dos cursos de PHP: <a href="https://alura.com.br/promocao/diasdedev">https://alura.com.br/promocao/diasdedev</a></p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[PHP.ini: Aprendendo a configurar o comportamento do PHP]]></title>
            <link href="https://dias.dev/2023-02-24-php-ini-conhecendo-as-configuracoes-do-php/"/>
            <updated>2023-02-24T00:00:00+00:00</updated>
            <id>https://dias.dev/2023-02-24-php-ini-conhecendo-as-configuracoes-do-php/</id>
            <content type="html"><![CDATA[<h2 id="o-que-%C3%A9-o-php.ini%3F">O que é o php.ini?</h2>

<p>O arquivo <code>php.ini</code> é o responsável por conter as configurações que afetam o comportamento do PHP onde ele for executado. O PHP lê as configurações deste arquivo sempre que um novo processo é iniciado.</p>

<h3 id="todas-as-configura%C3%A7%C3%B5es-em-um-%C3%BAnico-arquivo%3F">Todas as configurações em um único arquivo?</h3>

<p>Entendido (mesmo que por alto) o que é o <code>php.ini</code>, talvez você se pergunte: "mas todas as configurações do PHP vão ficar em um único arquivo? Esse arquivo vai ser gigante!".</p>

<p>Esse questionamento é muito válido e a resposta é: não. Não é necessário manter todas as configurações em um único arquivo. É possível ter em sua instalação do PHP um diretório configurado onde outros arquivos de configuração (no mesmo formato) serão buscados e carregados.</p>

<h3 id="onde-encontrar-o-php.ini%3F">Onde encontrar o php.ini?</h3>

<p>A localização do arquivo <code>php.ini</code> (e dos demais arquivos de configuração) pode variar dependendo do sistema operacional e da forma como o PHP foi instalado, mas há um simples comando para te mostrar essa informação: <code>php --ini</code>. Executando esse comando você terá uma saída semelhante a seguinte:</p>

<pre><code>Configuration File (php.ini) Path: /etc/php/8.2/cli
Loaded Configuration File:         /etc/php/8.2/cli/php.ini
Scan for additional .ini files in: /etc/php/8.2/cli/conf.d
Additional .ini files parsed:      /etc/php/8.2/cli/conf.d/10-opcache.ini,
/etc/php/8.2/cli/conf.d/10-pdo.ini,
</code></pre>

<p>Repare que no exemplo acima, o arquivo "principal" é o <code>php.ini</code> encontrado na pasta <code>/etc/php/8.2/cli</code>. Mas há também a definição (feita no momento da compilação do PHP) para buscar outros arquivos de configuração na pasta <code>/etc/php/8.2/cli/conf.d</code>. Lá estão os arquivos <code>10-opcache.ini</code> e <code>10-pdo.ini</code>.</p>

<h4 id="prioridade-de-carregamento">Prioridade de carregamento</h4>

<p>Você deve ter notado que os arquivos "extra" de configuração possuem um número como prefixo (<code>10-opcache.ini</code> e <code>10-pdo.ini</code>). Esse número <strong>não</strong> tem um significado especial para o PHP, mas nos permite ordenar os arquivos por prioridade. O PHP vai carregar os arquivos <code>.ini</code> do diretório configurado em ordem alfabetica, sendo assim, números são adicionados para nós podermos definir a prioridade de carregamento de cada arquivo. Quanto maior o número, "mais depois" ele será carregado, fazendo com que suas definições sejam aplicadas por último, sobrescrevendo as anteriores caso hajam configurações duplicadas.</p>

<p><ins class="adsbygoogle"
style="display:block; text-align:center;"
data-ad-layout="in-article"
data-ad-format="fluid"
data-ad-client="ca-pub-8918461095244552"
data-ad-slot="2366637560"></ins></p>

<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>

<h2 id="o-que-pode-ser-configurado-pelo-php.ini">O que pode ser configurado pelo php.ini</h2>

<p>Existem muitas configurações diferentes que podem ser definidas no arquivo <code>php.ini</code>. Algumas das configurações mais comuns incluem:</p>

<ul>
<li>Configurações de exibição de erros</li>
<li>Configurações de segurança</li>
<li>Configurações de desempenho</li>
<li>Configurações de extensões</li>
</ul>

<h3 id="exemplos">Exemplos</h3>

<p>O formato <code>.ini</code> é bastante simples e consiste em uma chave (o nome da configuração) e um valor (o valor da configuração) separados pelo sinal de igualdade (<code>=</code>). Além disso, é possível adicionar comentários colocando um ponto e vírgula (<code>;</code>) em sua frente.</p>

<p>Sendo assim, para termos um arquivo <code>php.ini</code> dizendo que todos os erros devem ser exibidos, habilitando a <a href="/2022-09-27-cookies-e-seguranca/">configuração <code>secure</code> do cookie de sessão</a>, tendo o <a href="https://youtu.be/6vEspHqjrkI">opcache</a> habilitado e a <a href="/2022-02-13-extensoes-php/">extensão</a> <code>pdo_mysql</code> também habilitada, nós teríamos o seguinte:</p>

<pre><code class="ini">; comentário. O PHP não vai ler essa linha
error_erporting=E_ALL
display_errors=1
session.cookie_secure=1
extension=pdo_mysql
opcache.enable=1
</code></pre>

<h3 id="configura%C3%A7%C3%B5es-poss%C3%ADvels">Configurações possívels</h3>

<p>Você não precisa tentar memorizar a lista de configurações possíveis, pois isso está disponível na documentação do PHP. A documentação de cada <a href="/2022-02-13-extensoes-php/">extensão</a>, por exemplo, possui uma seção de configurações que mostra as possíveis configurações com a explicação de cada um de seus valores.</p>

<h3 id="mais-detalhes-do-formato-ini">Mais detalhes do formato ini</h3>

<p>Antes de finalizar, você também deve ter notado que em nosso exemplo, duas linhas possuem um ponto (<code>.</code>) no nome da configuração e duas linhas não. Geralmente as configurações de <a href="/2022-02-13-extensoes-php/">extensões</a> são nomeadas no formato <em>extensao.configuracao</em>, ou seja, a configuração <code>enable</code> da extensão <code>opcache</code> se torna <code>opcache.enable</code>. Já as configurações que não são de uma extensão do PHP não possuem esse ponto.</p>

<p>Um outro detalhe do formato <code>ini</code> são suas <em>Sections</em>. Uma seção é identificada por um nome rodeado por colchetes. Então se eu quiser organizar meu arquivo e nomear uma seção nele com todas as configurações relacionadas a <a href="https://youtu.be/6vEspHqjrkI">opcache</a>, eu poderia ter o seguinte:</p>

<pre><code class="ini">[opcache]
opcache.enable=1
opcache.validate_timestamps=0
; demais configurações de opcache
</code></pre>

<p>Isso não vai ter nenhum significado especial para o PHP, mas nos permite deixar o arquivo mais organizado para nós lermos futuramente.</p>

<h4 id="se%C3%A7%C3%B5es-especiais-do-php.ini">Seções especiais do php.ini</h4>

<p>Entendido o conceito de seções do formato <code>ini</code>, há duas seções especiais que podemos ter em nosso <code>php.ini</code>, chamadas <code>HOST</code> e <code>PATH</code>. Elas são utilizadas para limitar configurações que serão carregadas em determinados endereços web (<code>HOST</code>) ou em determinados caminhos de arquivos (<code>PATH</code>).</p>

<p>Para exibir todos os erros apenas em processos que respondem as requisições em <code>dev.example.com</code>, por exemplo, eu poderia ter o seguinte:</p>

<pre><code class="ini">[HOST=dev.example.com]
error_reporting=E_ALL
display_errors=1
</code></pre>

<p>Caso eu queira desabilitar o <a href="https://youtu.be/6vEspHqjrkI">opcache</a> no projeto executado na pasta <code>/meu/projeto</code>, eu posso ter o seguinte:</p>

<pre><code class="ini">[PATH=/meu/projeto]
opcache.enable=0
</code></pre>

<h2 id="fun%C3%A7%C3%A3o-%60ini_set%60">Função <code>ini_set</code></h2>

<p>Além dos arquivos <code>.ini</code>, também é possível realizar algumas configurações no código do PHP, que serão válidas apenas durante aquela execução do processo. Para, por exemplo, habilitar a exibição de erros somente durante a execução de um código, podemos fazer o seguinte:</p>

<pre><code class="php">ini_set('display_errors', true);
</code></pre>

<p>Na documentação de cada configuração é informado se é possível realizá-la através da função <code>ini_set</code> ou apenas a partir de arquivos de configuração.</p>

<h2 id="conclus%C3%A3o">Conclusão</h2>

<p>Conhecer o <code>php.ini</code> é de suma importância para qualquer pessoa que vá trabalhar com PHP, seja como <em>dev</em> ou até em time de operações/sysadmin. Cada <a href="/2022-02-13-extensoes-php/">extensão</a> do PHP vai ter, em sua documentação, a lista de configurações possíveis. Sempre que você for utilizar uma extensão como <em>PDO</em>, <em>cURL</em> ou qualquer outra, analise as configurações possíveis para saber se há alguma possível otimização para seu caso.</p>

<p>Durante o artigo eu deixei alguns links, mas aproveito para deixar algumas referências novamente aqui:</p>

<ul>
<li>Post aqui no blog sobre Extensões PHP: <a href="/2022-02-13-extensoes-php/">https://dias.dev/2022-02-13-extensoes-php/</a></li>
<li>Vídeo no meu canal sobre <em>Opcache</em>: <a href="https://youtu.be/6vEspHqjrkI">https://youtu.be/6vEspHqjrkI</a></li>
<li>Documentação sobre as diretivas do <code>php.ini</code>: <a href="https://www.php.net/manual/en/ini.php">https://www.php.net/manual/en/ini.php</a></li>
<li>Cupom de desconto na Alura para você se aprofundar em PHP: <a href="https://alura.com.br/promocao/diasdedev">https://alura.com.br/promocao/diasdedev</a></li>
</ul>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Enviando e-mails com PHP: uma introdução à função mail e ao SMTP]]></title>
            <link href="https://dias.dev/2022-09-27-como-enviar-emails-com-php/"/>
            <updated>2022-09-27T00:00:00+00:00</updated>
            <id>https://dias.dev/2022-09-27-como-enviar-emails-com-php/</id>
            <content type="html"><![CDATA[<blockquote>
  <p>Disclaimer: <em>Esse post foi escrito pela inteligência artificial do <a href="https://chat.openai.com/chat">ChatGPT</a> contendo apenas poucas alterações feitas por mim (Vinicius)</em></p>
</blockquote>

<p>Enviar e-mails é uma tarefa comum em muitos aplicativos web, e o PHP oferece uma função nativa chamada <code>mail</code> que pode ser usada para enviar mensagens de e-mail de forma relativamente simples. No entanto, a função <code>mail</code> tem algumas limitações e pode não ser a opção mais adequada para todos os casos de uso. Neste post, vamos explorar como a função <code>mail</code> funciona e quando é adequada usá-la, além de introduzir o conceito de Simple Mail Transfer Protocol (SMTP) e apresentar algumas opções de bibliotecas de envio de e-mails como PHPMailer e Symfony Mailer.</p>

<h2 id="a-fun%C3%A7%C3%A3o-%60mail%60-do-php">A função <code>mail</code> do PHP</h2>

<p>A função <code>mail</code> do PHP é uma forma simples de enviar e-mails usando a linguagem. Ela é chamada da seguinte maneira:</p>

<pre><code class="php">mail($to, $subject, $message, $headers, $parameters);
</code></pre>

<p>Onde:</p>

<ul>
<li><code>$to</code> é o endereço de e-mail do destinatário</li>
<li><code>$subject</code> é o assunto da mensagem</li>
<li><code>$message</code> é o corpo da mensagem</li>
<li><code>$headers</code> são cabeçalhos adicionais que podem ser incluídos na mensagem, como o endereço de e-mail do remetente ou o tipo de conteúdo da mensagem</li>
<li><code>$parameters</code> são parâmetros adicionais que podem ser passados para a função</li>
</ul>

<p>A função retorna <code>true</code> se a mensagem for enviada com sucesso e <code>false</code> caso contrário.</p>

<h3 id="como-a-fun%C3%A7%C3%A3o-%60mail%60-funciona-por-baixo-dos-panos">Como a função <code>mail</code> funciona por baixo dos panos</h3>

<p>Quando você chama a função <code>mail</code> do PHP, ela usa o programa sendmail instalado no servidor para enviar a mensagem. Isso significa que, para que a função <code>mail</code> funcione, é necessário que o sendmail esteja configurado e funcionando corretamente no servidor. Além disso, o endereço de e-mail do remetente da mensagem precisa ser válido e o servidor precisa ter permissão para enviar e-mails em nome desse remetente.</p>

<h3 id="limita%C3%A7%C3%B5es-da-fun%C3%A7%C3%A3o-%60mail%60">Limitações da função <code>mail</code></h3>

<p>Apesar de ser uma opção conveniente para o envio de e-mails em alguns casos, a função <code>mail</code> do PHP tem algumas limitações que devem ser consideradas:</p>

<ul>
<li>Ela depende do sendmail, que precisa estar instalado e configurado corretamente no servidor. Isso pode ser um problema se você estiver hospedando o aplicativo em um serviço de nuvem ou em um servidor que não tenha o sendmail instalado.</li>
<li>Ela não oferece muito controle sobre o envio de e-mails. Por exemplo, não é possível definir um servidor SMTP personalizado ou adicionar anexos à mensagem.</li>
<li>Ela pode ter problemas de entrega de e-mails devido a problemas de configuração do sendmail ou de problemas de DNS.</li>
<li>Ela não é muito confiável em aplicativos de produção, pois pode ser facilmente falsificada e pode ser bloqueada por provedores de e-mail.</li>
</ul>

<p>Essas limitações podem ser contornadas usando bibliotecas de envio de e-mails como o PHPMailer ou o Symfony Mailer, que são discutidas no próximo tópico.</p>

<h2 id="o-que-%C3%A9-smtp">O que é SMTP</h2>

<p>SMTP (Simple Mail Transfer Protocol) é um protocolo usado para enviar e-mails através da internet. Ele é responsável por transferir mensagens de e-mail de um servidor para outro, e também pode ser usado para enviar mensagens de e-mail de um cliente para um servidor.</p>

<p>Quando você envia um e-mail usando um cliente de e-mail como o Microsoft Outlook ou o Gmail, o cliente se comunica com um servidor SMTP para enviar a mensagem. Esse servidor é responsável por encaminhar a mensagem para o servidor de e-mail do destinatário, que, por sua vez, entrega a mensagem ao cliente de e-mail do destinatário.</p>

<p><ins class="adsbygoogle"
style="display:block; text-align:center;"
data-ad-layout="in-article"
data-ad-format="fluid"
data-ad-client="ca-pub-8918461095244552"
data-ad-slot="2366637560"></ins></p>

<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>

<h2 id="pacotes-de-envio-de-e-mails">Pacotes de envio de e-mails</h2>

<p>Se você precisa de mais flexibilidade do que a função <code>mail</code> do PHP pode oferecer, existem algumas bibliotecas que podem ser usadas para enviar e-mails com PHP. Dois exemplos populares são o PHPMailer e o Symfony Mailer.</p>

<p>O PHPMailer é uma das bibliotecas de envio de e-mail mais famosas do ecossistema PHP. Esse componente de código aberto que oferece uma interface de alto nível para o envio de e-mails usando PHP. Ele suporta vários métodos de envio, incluindo SMTP, e permite que você faça coisas como adicionar anexos e usar templates de e-mail.</p>

<p>Um exemplo de código que envia um e-mail usando <code>PHPMailer</code> seria o seguinte:</p>

<pre><code class="php">&lt;?php

use PHPMailer\PHPMailer\PHPMailer;
use PHPMailer\PHPMailer\SMTP;
use PHPMailer\PHPMailer\Exception;

$mail = new PHPMailer(exceptions: true);

try {
    $mail-&gt;isSMTP();

    // Configurações do servidor
    $mail-&gt;Host = 'smtp.example.com';
    $mail-&gt;SMTPAuth = true;
    $mail-&gt;Username = 'usuario@example.com';
    $mail-&gt;Password = 'senha-secreta';
    $mail-&gt;SMTPSecure = PHPMailer::ENCRYPTION_SMTPS;
    $mail-&gt;Port = 465;

    // Remetente e Destinatários
    $mail-&gt;setFrom('remetente@example.com', 'Nome do Remetente');
    $mail-&gt;addAddress('destinatario@example.net', 'Primeiro Destinatário');
    $mail-&gt;addAddress('destinatario2@example.com');
    $mail-&gt;addReplyTo('responder@example.com', 'Nome de para quem responder');
    $mail-&gt;addCC('cc@example.com');
    $mail-&gt;addBCC('bcc@example.com');

    // Anexos
    $mail-&gt;addAttachment('/var/tmp/arquivo.tar.gz');
    $mail-&gt;addAttachment('/tmp/imagem.jpg', 'novo-nome.jpg');

    // Conteúdo
    $mail-&gt;isHTML(true);
    $mail-&gt;Subject = 'Assunto aqui';
    $mail-&gt;Body = 'Esse é o corpo da mensagem em HTML &lt;b&gt;em negrito!&lt;/b&gt;';
    $mail-&gt;AltBody = 'Esse é o corpo da mensagem em "texto puro" para clientes que não suportam HTML';

    $mail-&gt;send();
} catch (Exception $exception) {
    echo "Erro ao enviar e-mail: {$mail-&gt;ErrorInfo}";
}
</code></pre>

<h2 id="conclus%C3%A3o%3A">Conclusão:</h2>

<p>Enviar e-mails com PHP é uma tarefa relativamente simples graças à função <code>mail</code> nativa da linguagem. No entanto, essa função tem algumas limitações e pode não ser a opção mais adequada para todos os casos de uso. Se você precisar de mais flexibilidade, pode usar bibliotecas como o PHPMailer ou o Symfony Mailer, que oferecem recursos avançados para o envio de e-mails.</p>

<p>Espero que este post tenha sido útil para você entender as opções disponíveis para enviar e-mails com PHP e escolher a opção mais adequada para o seu projeto.</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Cookies e segurança]]></title>
            <link href="https://dias.dev/2022-09-27-cookies-e-seguranca/"/>
            <updated>2022-09-27T00:00:00+00:00</updated>
            <id>https://dias.dev/2022-09-27-cookies-e-seguranca/</id>
            <content type="html"><![CDATA[<p><em>Cookies</em> são amplamente utilizados para armazenar informações em nossos navegadores e muitas vezes nós negligenciamos a segurança dessas informações. Cookies podem conter dados sensíveis como sua informação de sessão, por exemplo, por isso devemos nos preocupar com seu armazenamento.</p>

<h2 id="o-que-s%C3%A3o-_cookies_%3F">O que são <em>cookies</em>?</h2>

<p>Um <em>cookie</em> é, basicamente, uma informação de texto enviada pelo servidor de uma aplicação web e salva no navegador. Após salvar essa informação, o navegador reenvia os <em>cookies</em> em todas as requisições realizadas. <em>Cookies</em> são enviados através de cabeçalhos HTTP tanto do servidor para o cliente quanto do cliente para o servidor.</p>

<p>Se você não está familiarizado com o protocolo HTTP, pode conferir este vídeo antes de continuar a leitura:</p>

<p><lite-youtube videoid="B2IWlnJ_dt0" style="background-image: url('https://i.ytimg.com/vi/B2IWlnJ_dt0/hqdefault.jpg');">
    <a href="https://youtube.com/watch?v=B2IWlnJ_dt0" class="lty-playbtn" title="Reproduzir vídeo">
        <span class="lyt-visually-hidden">Reproduzir vídeo: Como funciona a Web? - A internet por baixo dos panos | Dias de Dev</span>
    </a>
</lite-youtube></p>

<p>Dessa forma um servidor pode, por exemplo, ao receber as credenciais do usuário, gerar um ID único e enviar através de cookies. A partir disso, todas as requisições futuras que o navegador fizer conterão essa identificação do usuário. Assim funciona o mecanismo de sessões que nos permite permanecer logados em sites.</p>

<h3 id="onde-ficam-os-_cookies_">Onde ficam os <em>cookies</em></h3>

<p>Cada navegador pode salvar seus <em>cookies</em> como preferir. Seja em um banco de dados embutido, em arquivos de texto encriptados no sistema operacional, etc. Mas para visualizar os cookies de uma aplicação que estamos acessando, podemos utilizar as ferramentas de desenvolvedor.</p>

<p>Aperte F12, vá até a aba "Aplicativo" (ou "Application") e lá você verá, no menu lateral, a parte de <em>Cookies</em>. Repare que eles são separados por domínio.</p>

<p>Para entender essa separação por domínio, vamos imaginar o seguinte cenário: sua aplicação, hospedada no domínio X, envia um <em>cookie</em> de identificação de sessão. No código do seu app há chamadas para um servidor que configura relatórios de acesso ao site. Esse servidor está em outro local, no domínio Y. Sendo assim, você verá <em>cookies</em> dos domínios X e Y ao acessar essa ferramenta de desenvolvedores.</p>

<p><ins class="adsbygoogle"
style="display:block; text-align:center;"
data-ad-layout="in-article"
data-ad-format="fluid"
data-ad-client="ca-pub-8918461095244552"
data-ad-slot="2366637560"></ins></p>

<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>

<h3 id="o-que-_cookies_-armazenam">O que <em>Cookies</em> armazenam</h3>

<p>Entendido o funcionamento básico e onde encontrá-los, vamos analisar quais informações um <em>cookie</em> pode conter. Todo cookie possui, necessariamente, um nome e um valor. O nome é, como você deve imaginar, a forma que usamos para identificar a informação que esse cookie carrega em seu valor. Um <em>cookie</em> de sessão, por exemplo, geralmente possui a palavra <em>session</em> em seu nome enquanto seu valor será o ID da sessão.</p>

<p>Além desses atributos "básicos", cookies podem possuir parâmetros extra. Alguns deles são:</p>

<ul>
<li><code>Expires</code>: Define a data e hora de expiração do cookie. Se esse parâmetro não for definido, o <em>cookie</em> será considerado como "<em>cookie</em> de sessão" e irá expirar quando o navegador for fechado.</li>
<li><code>Max-Age</code>: Similar ao <code>Expires</code>, também define quando um <em>cookie</em> vai expirar, mas em segundos. Se os 2 parâmetros forem informados, <code>Max-Age</code> possui prioridade.</li>
<li><code>Domain</code>: Define para qual host o <em>cookie</em> será enviado pelo navegador. Se esse parâmetro não for definido, o <em>cookie</em> será enviado somente para o host da URL atual, não incluindo sub-domínios. Se um valor como <code>example.com</code> for definido, o <em>cookie</em> será enviado nas requisições para <code>example.com</code> e todos os seus sub-domínios.</li>
<li><code>Path</code>: Indica qual caminho deve existir na URL para que o <em>cookie</em> seja enviado pelo navegador. Se o valor for <code>/docs</code>, o <em>cookie</em> será enviado para URLs como <code>/docs</code>, <code>/docs/</code>, <code>/docs/web</code>, etc, mas não será enviado para URLs como <code>/</code>, <code>/documentos</code>, <code>/pt-br/docs</code>, etc.</li>
<li><code>Secure</code>: Se esse parâmetro for definido, o <em>cookie</em> só será enviado em requisições HTTPS.</li>
<li><code>HttpOnly</code>: Proibe o acesso ao <em>cookie</em> em questão através de JavaScript com <code>document.cookie</code>.</li>
<li><code>SameSite</code>: Com os possíveis valores sendo <code>Strict</code>, <code>Lax</code> e <code>None</code>, controla se o <em>cookie</em> pode ser enviado em requisições feitas a partir de outros sites para o do domínio do <em>cookie</em>.

<ul>
<li><code>Strict</code>: Apenas <em>cookies</em> para o endereço da URL que está sendo acessada são enviados. Isso faz com que a requisição inicial para um site não contenha os <em>cookies</em> com esse parâmetro, já que estão vindo de outro domínio.</li>
<li><code>Lax</code> (opção padrão): Semelhante ao <code>Strict</code>, mas permite o envio dos <em>cookies</em> na requisição inicial. Isso permite, por exemplo, manter o usuário logado ao chegar no sistema através de um link externo.</li>
<li><code>None</code>: Quer dizer que os <em>cookies</em> serão enviados mesmo se a requisição estiver vindo de outro endereço. Para usar essa opção, as versões mais recentes dos navegadores exigem que o parâmetro <code>Secure</code> seja definido.</li>
</ul></li>
</ul>

<h4 id="exemplos-de-defini%C3%A7%C3%B5es-de-_cookies_">Exemplos de definições de <em>cookies</em></h4>

<p>Para enviar um <em>cookie</em> de sessão, o seguinte cabeçalho pode ser enviado:</p>

<pre><code>Set-Cookie: sessionId=123456
</code></pre>

<p>Já para um <em>cookie</em> permanente com duração de 1 semana:</p>

<pre><code>Set-Cookie: nome=valor; Max-Age=604800
</code></pre>

<h2 id="_cookies_-e-seguran%C3%A7a"><em>Cookies</em> e Segurança</h2>

<p>Já entendemos o que são, como funcionam e os parâmetros de <em>cookies</em>. Agora vamos finalmente ao tópico em questão: <em>cookies</em> e segurança.</p>

<h3 id="_cookies_-e-xss"><em>Cookies</em> e XSS</h3>

<p>Como já foi citado, sessões são um uso muito comum para <em>cookies</em>. As linguagens de back-end, inclusive, já lidam com esse detalhe de forma transparente na maioria das vezes. Agora imagine o seguinte cenário: através de um ataque de <a href="https://www.youtube.com/watch?v=lntsVxPZibw">XSS</a> um usuário malicioso consegue acesso ao seu <em>cookie</em> de sessão. Com isso ele conseguirá se passar por você e o estrago pode ser enorme.</p>

<p>Para prevenir que ataques XSS consigam acessar seus <em>cookies</em> sensíveis (como o de sessão), podemos marcá-lo como <code>HttpOnly</code>. Dessa forma, código JavaScript nenhum terá acesso ao mesmo.</p>

<p>Claro que um sistema com vulnerabilidade a <em>XSS</em> está em GRANDES riscos, mas para evitar <a href="https://owasp.org/www-community/attacks/Session_hijacking_attack"><em>session hijacking</em></a>, tornar o <em>cookie</em> <code>HttpOnly</code> já é um grande passo.</p>

<p>Como já foi explicado anteriormente, o parâmetro <code>HttpOnly</code> impede que o <em>cookie</em> em questão seja acessado via <code>document.cookie</code>. Mas caso você precise realizar requisições via JavaScript, saiba que a função <code>fetch</code> vai conseguir enviar os mesmos sem problema. :-D</p>

<p>Cada linguagem back-end pode fornecer suas facilidades para definir o <em>cookie</em> de sessão como <code>HttpOnly</code>. No PHP, por exemplo, além da função <code>session_set_cookie_params</code>, há configurações como a <code>session.cookie_httponly</code>. O cabeçalho de um <em>cookie</em> <code>HttpOnly</code> seria parecido com:</p>

<pre><code>Set-Cookie: sessionId=123456; HttpOnly
</code></pre>

<h3 id="_cookies_-e-csrf"><em>Cookies</em> e CSRF</h3>

<p>Um ataque <em>CSRF</em> (<em>Cross-Site Request Forgery</em>) permite que um atacante se passe por outro usuário tabmém, enviando requisições de um site para outro.</p>

<p>Para exemplificar: imagine que meu site dias.dev seja malicioso. Nele eu vou colocar a seguinte tag <code>img</code>:</p>

<pre><code class="html">&lt;img src="https://example.com/index.php?action=delete&amp;id=123" /&gt;
</code></pre>

<p>Se você, acessando meu site, estiver logado em <code>example.com</code> (com o <em>cookie</em> armazenado e o parâmetro <code>SameSite=None</code>), essa requisição vai ser feita com sucesso para uma ação de remoção de um dado e você nem vai perceber. Só haverá uma "imagem quebrada" no site.</p>

<p>Para impedir que a partir de um site, <em>cookies</em> sejam enviados para outro, podemos (dentre outras coisas), definir a política de <code>SameSite</code> como <code>Lax</code> (o que via de regra é o padrão) ou <code>Strict</code>:</p>

<pre><code>Set-Cookie: sessionId=123456; HttpOnly; SameSite=Lax
</code></pre>

<p>Agora nosso <em>cookie</em> além de não ser mais acessível via JavaScript, só é enviado em requisições realizadas a partir do nosso próprio site. Talvez você esteja se perguntando: se <code>Lax</code> já é o padrão, por que me preocupar? Acontece que algumas linguagens ou frameworks back-end podem alterar esse padrão por diversos motivos. Por isso é importante saber como usar esse parâmetro.</p>

<h3 id="_cookies_-e-ataques-_man-in-the-middle_"><em>Cookies</em> e ataques <em>Man in the middle</em></h3>

<p>Outra forma de realizar <a href="https://owasp.org/www-community/attacks/Session_hijacking_attack"><em>session hijacking</em></a> seria um ataque do tipo <em>Man in the middle</em>, onde um atacante observa as requisições realizadas a partir do seu computador para o servidor. Se a requisição não for criptografada, ou seja, não usar HTTPS, o atacante terá acesso a todos os <em>cookies</em>.</p>

<p>Para impedir que um <em>cookie</em> seja enviado em requisições não criptografadas, basta definir o parâmetro <code>Secure</code>. Quando uma requisição sem HTTPS acontecer, esse <em>cookie</em> não será enviado. Com isso, nosso <code>header</code> ficaria:</p>

<pre><code>Set-Cookie: sessionId=123456; HttpOnly; SameSite=Lax; Secure
</code></pre>

<h2 id="conclus%C3%A3o">Conclusão</h2>

<p>Repare que o uso correto dos parâmetros dos <em>cookies</em> já nos protege de diversos ataques. Obviamente apenas cuidar dos nossos <em>cookies</em> não é o suficiente para ter um sistema verdadeiramente seguro. Precisamos nos atentar a diversos outros fatores e possíveis vulnerabilidades. Além disso, <em>cookies</em> de sessão não são os únicos a serem cuidados. <em>Tokens</em> geralmente são armazenados como <em>cookies</em> também e todos esses cuidados devem ser tomados.</p>

<p>Se segurança é um assunto que te interessa, recomendo essa <em>playlist</em> com alguns vídeos básicos sobre o assunto: <a href="https://www.youtube.com/playlist?list=PL3j2sfzg3FPuOOt13tOcNTx6hCFYcQls9">https://www.youtube.com/playlist?list=PL3j2sfzg3FPuOOt13tOcNTx6hCFYcQls9</a></p>

<p>Se quiser se aprofundar, na Alura há diversos cursos e formações sobre o tema de segurança. Aqui está um cupom de desconto para assinar a plataforma:
<a href="https://www.alura.com.br/promocao/diasdedev">https://www.alura.com.br/promocao/diasdedev</a></p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Paralelizar testes automatizados]]></title>
            <link href="https://dias.dev/2022-09-16-paralelizar-testes-automatizados/"/>
            <updated>2022-09-16T00:00:00+00:00</updated>
            <id>https://dias.dev/2022-09-16-paralelizar-testes-automatizados/</id>
            <content type="html"><![CDATA[<p>Testes automatizados podem levar um certo tempo para serem executados, principalmente se forem rodados um a um. Executar mais de um teste por vez pode ser uma boa alternativa para agilizar sua <em>pipeline</em>.</p>

<h2 id="testes-automatizados">Testes automatizados</h2>

<p>A criação e execução de testes automatizados traz inúmeras vantagens e isso por si só poderia ser assunto para outro post completo. Mas um ponto que muitas vezes negligenciamos é o tempo que a execução dos testes pode tomar em nossa <em>pipeline</em> de <em>build</em>.</p>

<p>Uma das etapas mais importantes em um ambiente de CI/CD, por exemplo, é a execução dos testes. E sabemos que ter um processo demorado aqui pode até inviabilizar a adoção de práticas de integração contínua.</p>

<p>É muito comum que ao executar a nossa suíte de testes, cada cenário seja executado de forma isolada, um por vez. Porém, atualmente é praticamente regra que os nossos computadores possuam CPUs com capacidade de executar mais de um processo por vez, sendo assim, por que não executar mais de um teste por vez?</p>

<p><ins class="adsbygoogle"
style="display:block; text-align:center;"
data-ad-layout="in-article"
data-ad-format="fluid"
data-ad-client="ca-pub-8918461095244552"
data-ad-slot="2366637560"></ins></p>

<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>

<h2 id="paraleliza%C3%A7%C3%A3o-de-testes">Paralelização de testes</h2>

<p>Paralelismo é um assunto bastante complexo, mas a ideia de paralelizar uma suíte de testes é, na verdade, bem simples: executar mais de um caso de teste por vez, em processos separados.</p>

<p>Um ponto que deve ser considerado é a independência dos testes. Cada teste deve ser completamente independente e não pode usar o resultado ou ações de testes anteriores. Uma forma aumentar a segurança de que os seus testes atualmente são independentes é rodá-los fora de ordem. Dessa forma, se algum teste dependia do anterior, por exemplo, ao executá-los em uma ordem aleatória ele passará a falhar.</p>

<h2 id="ferramentas">Ferramentas</h2>

<p>Tendo entendido a ideia de rodar mais de um teste por vez e que para isso os testes precisam ser independentes, como podemos efetivamente atingir o paralelismo nos nossos testes?</p>

<p>Cada ecossistema terá a sua solução. Em PHP, por exemplo, podemos usar o <a href="https://github.com/paratestphp/paratest">Paratest</a>. Não é necessária nenhuma configuração. Se você tem os seus testes rodando com PHPUnit, basta executar o comando <code>paratest</code> ao invés de <code>phpunit</code>, mais nada. Já em JS, cada framework de testes possui uma abordagem diferente. O Jest já executa os testes de arquivos diferentes de forma paralela por padrão. Em Java, a sua suíte JUnit pode usar uma ferramenta chamada Surefire. MSTest (para C#) na sua versão 2 permite paralelizar testes também. ExUnit (para Elixir) já executa os testes de cada módulo de forma paralela. Testes em Rust também são executados em paralelo por padrão.</p>

<h2 id="conclus%C3%A3o">Conclusão</h2>

<p>A vantagem de paralelizar testes é bastante clara e a desvantagem é somente a necessidade dos testes serem isolados, o que já deveria ser um padrão independente da forma de execução.</p>

<p>Cada ecossistema e ferramenta resolve esse problema de uma maneira diferente, mas todos eles possuem alguma solução. Vale a pesquisa para saber mais sobre a linguagem com a qual você trabalha.</p>

<p>Se não estiver familiarizado com conceitos de testes, sugiro assistir <a href="https://www.youtube.com/playlist?list=PL3j2sfzg3FPsPiaDUmDDKNvco49YMdj8f">esta playlist</a> de testes automatizados. E se quiser se aprofundar em testes e programação em geral, aqui tem um cupom de desconto para você assinar Alura: <a href="https://www.alura.com.br/promocao/diasdedev">https://www.alura.com.br/promocao/diasdedev</a></p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Extensões PHP]]></title>
            <link href="https://dias.dev/2022-02-13-extensoes-php/"/>
            <updated>2022-02-13T00:00:00+00:00</updated>
            <id>https://dias.dev/2022-02-13-extensoes-php/</id>
            <content type="html"><![CDATA[<p>PHP é uma linguagem de programação que roda em uma máquina virtual chamada <em>Zend Engine</em>. Essa máquina
virtual é escrita em C e permite que nós escrevamos código em C para embutir funcionalidades no PHP. Assim funcionam as
extensões do PHP.</p>

<h2 id="o-que-s%C3%A3o-extens%C3%B5es-do-php%3F">O que são extensões do PHP?</h2>

<p>As extensões no PHP são códigos escritos em C que são, de certa forma, embutidos na linguagem, logo, se parecem com código
nativo. É possível criarmos novas funções, classes e até criar sintaxe nova na linguagem a partir de extensões.</p>

<p>Quem usa PHP no dia-a-dia com certeza usa alguma extensão. Alguns exemplos de extensões PHP bem comuns:</p>

<ul>
<li>PDO</li>
<li>Sessions</li>
<li>JSON</li>
<li>cURL</li>
</ul>

<h2 id="tipos-de-extens%C3%B5es">Tipos de extensões</h2>

<p>Além de existir um número enorme de extensões do PHP, existem também alguns tipos onde elas podem ser categorizadas.
Estes tipos são: <em>Core Extensions</em>, <em>Bundled Extensions</em>, <em>External Extensions</em> e <em>PECL Extensions</em>.</p>

<p><ins class="adsbygoogle"
style="display:block; text-align:center;"
data-ad-layout="in-article"
data-ad-format="fluid"
data-ad-client="ca-pub-8918461095244552"
data-ad-slot="2366637560"></ins></p>

<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>

<h3 id="core-extensions">Core Extensions</h3>

<p>As extensões <em>Core</em>, como o nome já diz, fazem parte do <em>core</em> (núcleo) do PHP. O PHP não existe sem elas e é impossível
ter uma instalação do PHP sem estas. Alguns exemplos deste tipo de extensões são: Arrays, Classes/Objects, Date/Time,
JSON, OPCache etc.</p>

<p>Estas extensões são mantidas pela própria equipe do PHP já que fazem parte da linguagem em si.</p>

<h3 id="bundled-extensions">Bundled Extensions</h3>

<p>As extensões empacotadas com o PHP, chamadas de <em>bundled extensions</em>, são extensões que já vêm junto com o PHP, mas é
possível escolher habilitá-las ou não em sua instalação. Estas extensões também são mantidas pela equipe do PHP já que
são empacotadas junto com o restante do código da linguagem.</p>

<p>Alguns exemplos de extensões deste tipo: PDO, GD, FFI, intl, Sessions etc.</p>

<h3 id="external-extensions">External Extensions</h3>

<p>As extensões externas são idênticas às <em>bundled</em> em quase todos os aspectos. Elas vêm com o PHP, podem ser habilitadas
ou não e são mantidas pela equipe do <em>core</em>, porém possuem uma diferença: elas possuem dependências externas.</p>

<p>Para ter este tipo de extensão em sua instalação do PHP você vai precisar ter alguma outra biblioteca ou programa em seu
sistema operacional. A extensão <em>cURL</em>, por exemplo, entra nessa categoria. Para ter essa extensão no PHP você precisa
do software <em>cURL</em> instalado no sistema, já que a extensão faz uso do código disponibilizado por este software.</p>

<p>Alguns exemplos de extensões externas são: cURL, DOM, OpenSSL, Sodium, Zip etc.</p>

<h3 id="pecl-extensions">PECL Extensions</h3>

<p>Por último nós temos as extensões disponibilizadas por terceiros usando <em>PECL</em>, que é basicamente um repositório para
extensões PHP, como se fosse o <em>Packagist</em> de extensões. Se você pretende criar uma extensão para o PHP, vai utilizar
este repositório.</p>

<p>As extensões desta categoria são mantidas por terceiros e podem ou não possuir dependências externas. Nem todas as
extensões desta categoria estão no manual da linguagem, afinal de contas é possível que qualquer pessoa crie uma
extensão.</p>

<p>Alguns exemplos interessantes de extensões disponibilizadas através do <em>PECL</em>: DS (Data Structures), EV, Memcached,
Parallel, Swoole etc.</p>

<h2 id="refer%C3%AAncias">Referências</h2>

<p>Conhecer todas extensões do PHP é simplesmente impossível, mas conhecer bem algumas extensões mais importantes para seu
dia-a-dia é de extrema importância.</p>

<p><a href="https://www.php.net/manual/en/extensions.membership.php">Aqui</a> você pode conferir a lista completa de extensões do
manual do PHP, todas classificadas por categoria.</p>

<p>Se você tiver interesse em criar suas próprias extensões, existem alguns materiais interessantes disponíveis (embora
não seja uma tarefa tão trivial). No tutorial <em><a href="https://flavioheleno.github.io/how-do-i/">How do I</a></em> do Flavio Heleno
você pode conferir o início dessa jornada de criação de extensões além de conferir outras referências.</p>

<h2 id="conclus%C3%A3o">Conclusão</h2>

<p>A linguagem de programação PHP é escrita em C e possui diversas extensões que fazem parte ou não da linguagem. Nós
fazemos uso de várias extensões no dia-a-dia e entender este funcionamento é bastante importante para devs PHP.</p>

<p>Se além de entender sobre algumas extensões você quiser aprender mais sobre PHP em si, você pode usar esse
<a href="https://www.alura.com.br/promocao/diasdedev">cupom</a> que fornece 10% de desconto na assinatura da Alura, plataforma onde
eu mesmo gravei diversos cursos sobre o assunto.</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[O que são PWAs?]]></title>
            <link href="https://dias.dev/2021-09-14-o-que-sao-pwas/"/>
            <updated>2021-09-14T00:00:00+00:00</updated>
            <id>https://dias.dev/2021-09-14-o-que-sao-pwas/</id>
            <content type="html"><![CDATA[<p><em>Progressive Web Apps</em>, como o nome mesmo já diz, são aplicativos <em>web</em> progressivos. Vamos falar um pouco mais sobre a parte de "progressivos", mas o básico é isso: Um aplicativo que roda no "mundo <em>web</em>"</p>

<h2 id="aplicativo-na-web%3F">Aplicativo na Web?</h2>

<p>Quando falamos de aplicativos, principalmente móveis, pensamos logo em acessar uma loja de aplicativos, escolher um disponível e instalar. Pensamos em todo o poder que estes aplicativos têm de controlar o <em>hardware</em> de nossos dispositivos. Mas será que precisa ser assim?</p>

<p>Primeiro, precisamos mesmo de uma loja? Por que não pesquisar diretamente no Google um serviço ao invés de pesquisar em uma loja de aplicativos? Segundo, será que só aplicativos móveis "nativos" são capazes de controlar o <em>hardware</em> dos dispositivos onde eles rodam?</p>

<p><img src="https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/1DKtUFjXLJbiiruKA9P1.svg" alt="Gráfico mostrando a relação entre capacidade e alcance de PWAs e aplicações nativas e serviços web, onde PWAs possuem tanta capacidade quanto um aplicativo nativo e tanto alcance quanto um serviço Web" class="big-image" /></p>

<h2 id="o-poder-da-web">O poder da Web</h2>

<p>A <em>Web</em> evoluiu absurdamente nas últimas décadas e trouxe muito poder para nós <em>devs</em>. Coisas que antigamente seriam impensáveis sem instalar de forma "nativa" uma aplicação, hoje é trivial de ser feito diretamente no navegador. Alguns exemplos:</p>

<ul>
<li>Acessar à câmera;</li>
<li>Disponibilidade offline;</li>
<li>Acesso ao GPS;</li>
<li>Execução de tarefas no plano de fundo;</li>
<li>etc.</li>
</ul>

<p>Hoje em dia é perfeitamente possível que após acessar um aplicativo <em>web</em>, os próximos acessos possam ser feitos sem uma conexão ativa com a <em>internet</em>. Além disso é muito comum aplicativos <em>web</em> acessarem recursos nativos como localização, sistema de sons, baterias, etc.</p>

<p>Aqui você pode conferir algumas <em>APIs Web</em> para ter acesso a recursos que antigamente só eram possíveis através de aplicações nativas: https://developer.mozilla.org/en-US/docs/Web/API</p>

<p><ins class="adsbygoogle"
style="display:block; text-align:center;"
data-ad-layout="in-article"
data-ad-format="fluid"
data-ad-client="ca-pub-8918461095244552"
data-ad-slot="2366637560"></ins></p>

<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>

<h2 id="aplica%C3%A7%C3%B5es-progressivas">Aplicações progressivas</h2>

<p>Já vimos que através da <em>Web</em> podemos ter acesso a recursos muito poderosos, mas o que significa o <strong>P</strong> de PWA?</p>

<p>PWAs são aplicações progressivas, ou seja, se adaptam a diferentes cenários e dispositivos.</p>

<p>Um exemplo já citado de cenário adverso: dispositivo sem conexão com a <em>internet</em>. Quando você acessa o aplicativo móvel do Twitter sem estar conectado a <em>internet</em>, ele te mostra os <em>tweets</em> que já foram carregados anteriormente. Ou seja, a sua experiência é degradada, mas o aplicativo continua funcionando. A ideia de PWAs é exatamente essa.</p>

<p>Se você tentar acessar uma PWA que precisa da localização do usuário a partir de um dispositivo sem GPS, a aplicação deve estar preparada para buscar a localização menos precisa (através da rede) ou solicitar o endereço ao usuário. Com isso, quanto mais recursos o dispositivo tiver, melhor será a experiência. Em outras palavras, teremos uma experiência <strong>progressiva</strong>.</p>

<h2 id="posso-instalar-%22sites%22%3F">Posso instalar "sites"?</h2>

<p>Uma dúvida comum ao aprender sobre PWAs é sobre a instalação da aplicação. Não seria prático que um usuário precisasse abrir o navegador e digitar a URL da nossa aplicação sempre que quisesse acessá-la. Com aplicativos nativos nós temos os ícones na tela inicial do dispositivo.</p>

<p>Outro ponto é que um aplicativo possui uma experiência mais imersiva, sem interferências de outras abas do navegador, além de barras de ferramentas, etc.</p>

<p><img src="/build/pwa/pwa-ifood.jpg" alt="Tela da PWA do ifood, que é exatamente igual ao aplicativo nativo" class="big-image" /></p>

<p>Como podemos ver, uma PWA pode se comportar visualmente exatamente como uma aplicação nativa. As barras do navegador podem sumir, a cor da barra de notificação pode ser personalizada, etc.</p>

<p>Além do mais, podemos optar por criar um atalho para essa aplicação web direto em nossa tela inicial:</p>

<p><img src="/build/pwa/menu-instalar-ifood.jpg" alt='Tela do navegador com o menu aberto, mostrando a opção de "Adicionar à tela inicial"' class="big-image" /></p>

<p>Mas claro, nem todo usuário vai abrir o menu do navegador para adicionar um atalho à tela inicial. O ideal seria poder ter um botão de instalar essa aplicação para que o usuário não tenha esse "esforço".</p>

<p><img src="/build/pwa/tela-instalacao-uber.jpg" alt="Mensagem sugerindo a instalação da PWA do uber sem precisar abrir o menu do navegador" class="big-image" /></p>

<p>Conforme podemos ver na imagem anterior, isso também é perfeitamente possível. Além de termos um botão na aplicação para instalá-la, o próprio navegador ao identificar uma PWA pode sugerir sua instalação. A ideia é que isso fiquei cada vez mais natural, inclusive, com os navegadores tomando decisões mais assertivas ao fazer tais sugestões.</p>

<h2 id="como-desenvolver-pwas%3F">Como desenvolver PWAs?</h2>

<p>Como sou um desenvolvedor Web, o assunto de PWAs me anima bastante. A ideia deste post não é te ensinar a desenvolver PWAs, mas sim te apresentar ao conceito. Caso você tenha interesse na parte prática, vou deixar aqui algumas referências.</p>

<p>Se você aprende melhor lendo, esse livro é um ótimo início:</p>

<div class="iframe">
    <iframe style="width:120px;height:240px;" marginwidth="0" marginheight="0" scrolling="no" frameborder="0" src="//ws-na.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&OneJS=1&Operation=GetAdHtml&MarketPlace=BR&source=ss&ref=as_ss_li_til&ad_type=product_link&tracking_id=cviniciussd06-20&language=pt_BR&marketplace=amazon&region=BR&placement=B07BZK71NV&asins=B07BZK71NV&linkId=39b9fcf31f08c2d76b0d6f4284cb6a60&show_border=true&link_opens_in_new_window=true"></iframe>
</div>

<p>Porém uma desvantagem (na minha opinião) deste livro é o uso de React para a criação da aplicação. Eu gosto mais de conteúdos conceituais, que explicam a base sem o uso de muitas ferramentas.</p>

<p>Se você também prefere esse tipo de conteúdo, pode dar uma olhada nesse livro (um pouco mais caro):</p>

<div class="iframe" style="margin-bottom: 1rem;">
    <iframe style="width:120px;height:240px;" marginwidth="0" marginheight="0" scrolling="no" frameborder="0" src="//ws-na.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&OneJS=1&Operation=GetAdHtml&MarketPlace=BR&source=ss&ref=as_ss_li_til&ad_type=product_link&tracking_id=cviniciussd06-20&language=pt_BR&marketplace=amazon&region=BR&placement=B075HP52WY&asins=B075HP52WY&linkId=955ce63a435057d47ccd0bd81620193c&show_border=true&link_opens_in_new_window=true"></iframe>
</div>

<p>Agora se você prefere estudar através de cursos e vídeos, super recomendo os treinamentos de front-end e de PWA da Alura. Lá você consegue toda a base para desenvolver uma PWA de forma profissional, aprendendo desde a base, passando por <em>JavaScript</em> avançado e <em>APIs Web</em>, até <em>PWAs</em> de fato. Se for o seu caso, aqui tenho um cupom de 10% de desconto para estudar na Alura:
<a href="https://www.alura.com.br/promocao/diasdedev">https://www.alura.com.br/promocao/diasdedev</a></p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Charsets e Encodings: Como strings funcionam]]></title>
            <link href="https://dias.dev/2021-08-24-charsets-e-encodings-como-strings-funcionam/"/>
            <updated>2021-08-24T00:00:00+00:00</updated>
            <id>https://dias.dev/2021-08-24-charsets-e-encodings-como-strings-funcionam/</id>
            <content type="html"><![CDATA[<p>É de conhecimento geral que computadores trabalham com números, especificamente números na base binária. Sabendo disso, como podemos representar o texto que eu estou escrevendo apenas com conjuntos de 0s e 1s? Como o computador, trabalhando apenas com números, consegue lidar com textos?</p>

<h2 id="tabelas-de-caracteres-charsets">Tabelas de caracteres (Charsets)</h2>

<p>Para realizar essa tarefa, tabelas de caracteres (<em>charsets</em>) são utilizadas. Com essas tabelas, algum caractere pode ser mapeado para algum número. Esse número que será armazenado e manipulado pelos programas que lidam com textos. Mas como esse mapeamento é feito?</p>

<h2 id="ascii">ASCII</h2>

<p>Uma das tabelas de caracteres mais antigas que se tem conhecimento é a ASCII (<em>American Standard Code for Information Interchange</em>). Esta tabela contém todos os números e os caracteres usados pelo idioma inglês, onde cada um desses caracteres é mapeado para um número e esse número é convertido diretamente para a base binária, sendo uma representação bastante simples. Os números vão de 0 a 127, ou seja, qualquer caractere da tabela ASCII pode ser representado em até 7 <em>bits</em>, o que é menos que 1 <em>byte</em> (1 <em>byte</em> = 8 <em>bits</em>).</p>

<p><img src="https://raw.githubusercontent.com/wiki/tomgibara/ascii-table/tables/ascii-table-1.1.png" alt="Tabela ASCII" /></p>

<p>Isso funcionava muito bem para textos que usavam inglês como idioma (ou algum idioma com o mesmo conjunto de caracteres). Porém, diversos outros idiomas possuem caracteres que não estão representados nesta tabela. Caracteres acentuados, por exemplo, não estão na tabela ASCII. Como representar textos em português, por exemplo?</p>

<p><ins class="adsbygoogle"
style="display:block; text-align:center;"
data-ad-layout="in-article"
data-ad-format="fluid"
data-ad-client="ca-pub-8918461095244552"
data-ad-slot="2366637560"></ins></p>

<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>

<h2 id="extended-ascii">Extended ASCII</h2>

<p>Como pudemos ver na imagem da tabela ASCII, os valores vão de 0 a 127. Isso pode ser representado com 7 <em>bits</em>.</p>

<p>Como foi citado no capítulo anterior, todos os caracteres da tabela ASCII podem ser representados com até 7 <em>bits</em>. Sendo assim, temos 1 bit "sobrando" para cada caractere completar 1 <em>byte</em>.</p>

<p>Pensando nisso, surgiram diversas outras tabelas de caracteres fazendo uso deste bit adicional para representar outros caracteres. Desta forma é criada a tabela ASCII estendida: <em>Extended ASCII</em> ou <em>EASCII</em></p>

<p><img src="https://files.passeidireto.com/0b57a2e8-7fae-4e06-ac73-a7004f09a741/0b57a2e8-7fae-4e06-ac73-a7004f09a741.gif" alt="Tabela ASCII Estendida" /></p>

<p>Ao mesmo tempo, outros idiomas que possuem seu alfabeto sem nenhuma semelhança com o inglês (como japonês ou russo) utilizavam tabelas completamente diferentes para representar seus caracteres.</p>

<h2 id="ascens%C3%A3o-da-web">Ascensão da Web</h2>

<p>O uso de tabelas diferentes funcionou muito bem enquanto os arquivos ficavam apenas em um computador ou eram compartilhados em redes locais (como de universidades). Porém, conforme a Web nasceu e cresceu, o compartilhamento de arquivos se tornou uma tarefa trivial. Como eu, no Brasil, poderia enviar um documento para o Egito, usando o alfabeto grego? Essa tarefa era simplesmente impossível.</p>

<h2 id="unicode">Unicode</h2>

<p>Pensando em ter uma forma unificada de representar todos os caracteres conhecidos no mundo, em 1991 foi criada o <em>Unicode Consortium</em>. Essa iniciativa trabalha e tem encontros frequentes para garantir que há suporte a todos os idiomas e caracteres conhecidos pela humanidade, incluindo <em>emojis</em>. Parece um trabalho enorme e realmente é.</p>

<p><em>Emojis</em>, por exemplo, foram sugeridos à iniciativa em meados de 2000, porém apenas após 2007 eles foram incorporados ao <em>Unicode</em>.</p>

<p>Então, se formos supersimplificar (muito), podemos dizer que o <em>Unicode Consortium</em> criou um grande <em>charset</em>, ou seja, uma grande tabela de caracteres. Porém, essa "tabela" é gigante! Como representar estes números enormes de forma eficiente?</p>

<h2 id="encodings">Encodings</h2>

<p>Aqui entram os encodings. O número <strong>128 512</strong> (em hexadecimal, 1F600) representa o emoji de sorriso (😀). Esse número <strong>128 512</strong> pode ser representado de várias formas dependendo do encoding selecionado para tal arquivo. Alguns encodings compatíveis com <em>Unicode</em> são:
- UTF-8
- UTF-16
- UTF-32</p>

<p>Inicialmente eu acreditava que a diferença entre eles era apenas o número de <em>bits</em> utilizado, sendo assim UTF-8 poderia representar menos caracteres já que usa menos bits. Não é o caso. Todos eles podem consumir um número variável de <em>bits</em> os organizando de forma diferente. Cada encoding pode ser mais vantajoso dependendo do cenário. Para representar textos (como esse que escrevo) e mensagens transferidas pela rede, UTF-8 é o mais recomendado e utilizado, visto que sua organização permite que os caracteres mais comuns ocupem o menor espaço possível. Já UTF-16 ocupa menos espaço representando caracteres com números maiores na "tabela" unicode.</p>

<h2 id="conclus%C3%A3o">Conclusão</h2>

<p>É comum utilizarmos funções de conversão de encoding sem entender bem o que estamos fazendo e muito provavelmente todo mundo que desenvolve <em>software</em> para a <em>web</em> já se deparou com o seguinte problema:</p>

<p><img src="https://i.stack.imgur.com/590Tg.png" alt="Texto com caracteres mal codificados" /></p>

<p>Entender como funcionam charsets e encodings de texto além de ser interessante e divertido, pode nos ajudar a compreender melhor problemas deste tipo e principalmente encontrar a solução de forma mais simples.</p>

<p>Creio que seja seguro afirmar que a grande maioria dos textos que tratamos como desenvolvedores utiliza UTF-8 como encoding e neste artigo nós entendemos o motivo disso e como o tratamento de textos evoluiu até chegar a esse ponto.</p>

<p>Se você quiser aprender mais sobre esse assunto, pode considerar assinar a Alura. Lá existem treinamentos que tratam sobre charsets, encoding, manipulação de <em>strings</em>    e muito mais. Caso pretenda estudar na Alura, <a href="https://www.alura.com.br/promocao/diasdedev">neste link</a> você tem um desconto de 10%.</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Como o PHP funciona na Web?]]></title>
            <link href="https://dias.dev/2021-06-15-como-o-php-funciona-na-web/"/>
            <updated>2021-06-15T00:00:00+00:00</updated>
            <id>https://dias.dev/2021-06-15-como-o-php-funciona-na-web/</id>
            <content type="html"><![CDATA[<p>O PHP é o que conhecemos como linguagem <em>server-side</em>, ou seja, ele roda nos servidores web, e não nos navegadores.</p>

<p>Isso já é de conhecimento geral, mas nem todos entendem como uma requisição sai do navegador e chega em seu código PHP. É exatamente sobre isso que vamos tratar neste artigo.</p>

<h2 id="como-funciona-a-web%3F">Como funciona a Web?</h2>

<p>Antes de falarmos sobre o papel do PHP na Web, é muito importante entendermos como a Web funciona. O protocolo HTTP é o que torna toda a comunicação entre nosso navegador e servidores, possível, então é de suma importância que a gente estude ele.</p>

<p>Neste vídeo eu expliquei um pouco de como funciona o processo desde quando damos <em>Enter</em> em nosso navegador até termos uma resposta em nossa tela. Vale a pena conferir antes de continuar lendo este artigo:</p>

<p><lite-youtube videoid="B2IWlnJ_dt0" style="background-image: url('https://i.ytimg.com/vi/B2IWlnJ_dt0/hqdefault.jpg');">
    <a href="https://youtube.com/watch?v=B2IWlnJ_dt0" class="lty-playbtn" title="Reproduzir vídeo">
        <span class="lyt-visually-hidden">Reproduzir vídeo: Como funciona a Web? - A internet por baixo dos panos | Dias de Dev</span>
    </a>
</lite-youtube></p>

<p>Existem várias outras referências (inclusive mais completas) para você conhecer as tecnologias por trás da Web. Vou deixar aqui algumas referências:
- <a href="https://amzn.to/3lzFVkD">Desconstruindo a Web: As tecnologias por trás de uma requisição</a>
- <a href="https://amzn.to/35k9rT1">HTTP: The Definitive Guide</a>
- <a href="https://amzn.to/3gEgz22">Learning Http/2: A Practical Guide for Beginners</a>
- <a href="https://www.alura.com.br/promocao/diasdedev">Cursos de HTTP na Alura</a></p>

<p>Com esse conhecimento, já podemos partir para o foco deste artigo: como o <strong>PHP</strong> funciona na Web?</p>

<h2 id="cgi-_common-gateway-interface_">CGI (<em>Common Gateway Interface</em>)</h2>

<p>A primeira forma de se executar código em servidores ao receber uma requisição HTTP foi através de uma técnica chamada CGI (<em>Common Gateway Interface</em>).</p>

<p>Esta técnica consistia em basicamente um servidor Web (como Apache, por exemplo) receber uma requisição HTTP e executar um processo enviando os dados da requisição através da entrada padrão. A saída do processo era lida pelo servidor Web e devolvida em uma resposta HTTP.</p>

<p>Assim o PHP nasceu, sendo uma espécie de <em>framework</em> C. O Apache executava um programa escrito em C, onde PHP era um conjunto de ferramentas para facilitar a escrita, principalmente de <em>templates</em> (para não misturar C e HTML).</p>

<p>Esta é a forma mais rudimentar de se executar um código <em>server-side</em> e não é mais recomendada, pois há alternativas mais interessantes que veremos neste artigo.</p>

<p><ins class="adsbygoogle"
style="display:block; text-align:center;"
data-ad-layout="in-article"
data-ad-format="fluid"
data-ad-client="ca-pub-8918461095244552"
data-ad-slot="2366637560"></ins></p>

<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>

<h2 id="apache-mod_php">Apache mod_php</h2>

<p>Conforme o PHP (e a Web em si) foi evoluindo, a abordagem utilizando CGI foi se mostrando ineficaz, desperdiçando recursos de processamento.</p>

<p>Neste momento surgiu um módulo do PHP para Apache, o famoso <code>mod_php</code>. Esse módulo "anexava" um executável do PHP em cada processo do Apache, ou seja, a cada processo que o Apache criava para servir uma requisição, o executável do PHP era também inicializado, mesmo que a requisição fosse apenas para servir arquivos estáticos e o PHP não fosse necessário.</p>

<p>Isso era muito mais rápido do que utilizar CGI, mas ainda havia muito desperdício de recursos. O apache evoluiu a ponto de não precisar criar um processo a cada nova requisição e passou a trabalhar com <em>threads</em>, mas além dessa evolução ter demorado para acontecer, esse modelo não funciona bem com o <code>mod_php</code>.</p>

<h2 id="fastcgi-e-php-fpm">FastCGI e PHP-FPM</h2>

<p>Com a nova solução do <code>mod_php</code> também se mostrando ineficaz perante a tantas evoluções do PHP e da Web (ambos sempre cresceram juntos), o protocolo FastCGI passou a ser utilizado. Com isso, um servidor Web recebia as requisições e apenas se fosse necessário algum processamento, executaria o PHP.</p>

<p>Porém, essa execução não era como no CGI. Um conceito de "processos persistentes" foi utilizado, diminuindo muito a quantidade de recursos necessários para processar cada requisição. Um único processo agora passa a ser capaz de tratar diversas requisições e não apenas uma. Com isso todo o <em>overhead</em> de criar e matar processos a cada requisição foi drasticamente reduzido.</p>

<p>Para extrair o máximo do protocolo FastCGI, foi desenvolvida uma ferramenta chamada PHP-FPM (<em>FastCGI Process Manager</em>). Este servidor de aplicação permite que realizemos diversas configurações como o número de processos <em>workers</em>, a quantidade de recursos liberada para cada processo e muito mais. Este é o software utilizado atualmente para termos um servidor FastCGI em produção com PHP.</p>

<p>Atualmente, qualquer servidor web que saiba se comunicar através do protocolo FastCGI pode ser utilizado em conjunto com PHP, mas o <em>Nginx</em> ganhou muita força por prometer (e segundo benchmarks, cumprir) entregar diversas melhorias de performance em relação ao Apache. Os recursos são mais bem gerenciados e o uso de programação assíncrona através de <em>multiplexing</em> de I/O trazem ganhos expressivos quando comparamos com o ainda amplamente utilizado Apache.</p>

<h2 id="arquitetura-_share-nothing_">Arquitetura <em>share-nothing</em></h2>

<p>Em qualquer uma das abordagens citadas até agora, uma das principais filosofias do PHP se mantém: a <em>share-nothing architecture</em>.</p>

<p>A ideia por trás disso é não compartilhar nenhum recurso entre uma requisição e outra. Por mais que o mesmo processo possa ser utilizado para servir múltiplas requisições, em nosso código, cada execução é como um novo processo. Ao finalizar a execução de um código PHP, todas as variáveis são excluídas, todos os recursos são liberados. Praticamente nada é armazenado entre uma requisição e outra.</p>

<p>Isso permitiu e ainda permite que o PHP tenha uma arquitetura muito simples de escalar e isso é um dos fatores que contribuíram para a ampla adoção do PHP como linguagem back-end Web.</p>

<p>A abordagem utilizando Nginx + PHP-FPM é a ideal para grande parte das aplicações que usam PHP, porém existem cenários onde ainda mais performance é necessária.</p>

<h2 id="servidores-auto-contidos">Servidores auto-contidos</h2>

<p>Quando temos milhões de requisições chegando ou comunicação em tempo real acontecendo, o fato de ser necessária a inicialização de todas as variáveis novamente e o início do código de toda nossa aplicação ter que ser realizada a cada requisição pode ser um peso. Imagine que a cada requisição seu <em>framework</em> favorito (que provavelmente é bem pesado) precisa ser inicializado novamente.</p>

<p>Para resolver os problemas deste tipo de aplicação que demanda um nível a mais de performance, servidores auto-contidos podem ser utilizados. Um servidor auto-contido é um serivdor web exposto pela própria aplicação, ou seja, seu próprio código PHP recebe diretamente as requisições.</p>

<p>Com isso a inicialização da sua aplicação pode ser feita uma única vez e a cada nova requisição, podemos somente executar o código necessário, sem necessidade de levantar de novo o <em>framework</em>, buscar as configurações, ler variáveis de ambiente, processar as dependências, definir as rotas, etc.</p>

<p>Essa abordagem já é possível há muito tempo. Um dos precursores desta técnica é o <a href="https://github.com/php-pm/php-pm">PHP-PM</a> que usa o <a href="https://reactphp.org/">ReactPHP</a> por baixo dos panos. O ReactPHP facilita a execução de código assíncrono e não bloqueante no PHP através de um <em>Event Loop</em>. Nós falamos um pouco sobre programação assíncrona <a href="/2020-09-16-php-assincrono-de-forma-nativa/">neste post</a>. O ReactPHP torna esta tarefa MUITO mais fácil, por isso ferramentas como PHP-PM puderam surgir.</p>

<p>Outros <em>frameworks</em> como <a href="https://amphp.org/">Amp PHP</a> têm a mesma proposta, porém uma ferramenta um pouco diferente tem chamado muita atenção nos últimos anos e levado essa proposta para outro nível</p>

<h2 id="swoole">Swoole</h2>

<p>É impossível falar de servidores auto-contidos PHP e não citar o <a href="https://www.swoole.co.uk/">Swoole</a>.</p>

<p>A principal diferença entre o Swoole e as demais ferramentas citadas de servidores auto-contidos é que o Swoole não é um componente em PHP e sim uma extensão, ou seja, o Swoole foi escrito em C e compilado para ser "integrado" ao PHP. Isso além de conceder ainda mais performance para o código, ainda dá poderes a mais para o Swoole como lidar de forma assíncrona com código que originalmente seria síncrono (como com PDO e curl, por exemplo).</p>

<p>Já existe material por aí sobre Swoole, inclusive <a href="https://youtu.be/GCECSLtT49U">esse vídeo</a> no meu canal e o <a href="https://amzn.to/3gxamov">livro</a> escrito por um dos criadores da ferramenta, por isso não vou transformar esse artigo em um tutorial, mas vale a pena pesquisar mais a fundo.</p>

<h2 id="conclus%C3%A3o">Conclusão</h2>

<p>Vimos neste artigo que há várias formas para fazer com que uma requisição chegue no PHP. Algumas bem antigas, outras bem modernas.</p>

<p>Atualmente as 2 opções aceitáveis são utilizando PHP-FPM ou algum servidor auto-contido. Nenhuma das 2 abordagens tira o papel de servidores Web como o amado Apache ou o moderno Nginx.</p>

<p>No caso do PHP-FPM precisamos de um servidor para receber as requisições HTTP e enviar as chamadas para o PHP com FastCGI. No caso de um servidor auto-contido, podemos ter um proxy reverso servindo os arquivos estáticos e realizando cache, por exemplo, enquanto o servidor auto-contido responde apenas as requisições realmente necessárias.</p>

<p>Se você quiser aprender mais sobre algum desses assuntos, pode considerar assinar a Alura. Lá existem treinamentos (gravados por mim) sobre Nginx, ReactPHP, Swoole e muito mais. Caso pretenda estudar na Alura, <a href="https://www.alura.com.br/promocao/diasdedev">neste link</a> você tem um desconto de 10%.</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Por que não usar XAMPP]]></title>
            <link href="https://dias.dev/2021-04-10-por-que-nao-usar-xampp/"/>
            <updated>2021-04-10T00:00:00+00:00</updated>
            <id>https://dias.dev/2021-04-10-por-que-nao-usar-xampp/</id>
            <content type="html"><![CDATA[<p>Umas das perguntas mais frequentes que vejo em comunidades de iniciantes em PHP são:
- Como instalar o XAMPP?
- Como configurar URLs amigáveis no XAMPP?
- Por que o MySQL não funciona com XAMPP?</p>

<p>A resposta que eu gostaria de dar geralmente é: “pare de usar XAMPP!”, mas sempre tento ajudar.</p>

<p>A ideia desse artigo é expor a razão para eu não recomendar XAMPP e acreditar que essa ferramenta traz muito mais
problemas do que solução.</p>

<h2 id="o-que-%C3%A9-e-para-que-serve-xampp%3F">O que é e para que serve XAMPP?</h2>

<p>Antes de falarmos os motivos de não usar XAMPP, é importante entendermos o que é a ferramenta. XAMPP é uma sigla para
<strong>A</strong>pache, <strong>M</strong>ySQL, <strong>P</strong>HP e <strong>P</strong>earl, sendo o <strong>X</strong> inicial para identificar que esta ferramenta é multiplataforma
(funciona em Windows, Linux e Mac).</p>

<p><ins class="adsbygoogle"
style="display:block; text-align:center;"
data-ad-layout="in-article"
data-ad-format="fluid"
data-ad-client="ca-pub-8918461095244552"
data-ad-slot="2366637560"></ins></p>

<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>

<h2 id="qual-o-problema-dessa-abordagem%3F">Qual o problema dessa abordagem?</h2>

<p>Existem alguns problemas com o uso dessa ferramenta, principalmente por iniciantes (que são justamente o público alvo da
ferramenta).</p>

<h3 id="processo-de-aprendizado">Processo de aprendizado</h3>

<p>Ao aprender Java, C#, C ou alguma outra linguagem considerada mais <em>enterprise</em>, é comum aprendermos a sintaxe primeiro,
rodando simples códigos na linha de comando. Depois estudamos um pouco sobre o paradigma principal usado na linguagem e
só então, se for o caso de uma linguagem Web, aprendemos a usá-la na Web.</p>

<p>Por que um iniciante aprenderia a usar PHP na Web configurando um Apache e se conectando a um banco MySQL tudo de uma
vez só?</p>

<p>Infelizmente muitos treinamentos que encontramos pela internet são ministrados por pessoas que não se atualizaram e nem
ao menos trabalham com as tecnologias que se propõem a ensinar.</p>

<h3 id="dificuldades-desnecess%C3%A1rias">Dificuldades desnecessárias</h3>

<p>Supondo que você já conheça a linguagem e queira apenas um ambiente simplificado para continuar seus estudos. Como ter
Apache, MySQL e Pearl instalados na sua máquina pode te ajudar? Problemas de configuração no Apache, configurações
específicas para frameworks… Essas complicações infelizmente são muito comuns e geradas pelo XAMPP quando talvez tudo que
precisávamos era do PHP instalado.</p>

<h2 id="o-que-aprender-primeiro%3F">O que aprender primeiro?</h2>

<p>Minha recomendação sempre é para aprender primeiro a linguagem que se vai utilizar. Como estamos falando do XAMPP,
aprender PHP. Estude a sintaxe da linguagem, entenda como aplicar os conceitos de lógica de programação usando a
linguagem. Estude sobre Orientação a Objetos, aprenda a organizar um código de exemplo. Só depois você vai pensar em
usar PHP no mundo da Web. E quando chegar o momento, você não vai sair de cara configurando um servidor Web como o
Apache.</p>

<h2 id="como-usar-php-sem-xampp%3F">Como usar PHP sem XAMPP?</h2>

<p>No capítulo anterior citei que primeiro os iniciantes deveriam estudar a sintaxe da linguagem e executar alguns códigos
na linha de comando, mas como rodar um código PHP sem XAMPP?</p>

<p>Simples: Instalando o PHP no seu computador.</p>

<p>Existem diversas maneiras de se usar o PHP em cada sistema operacional, então vou citar aqui algumas formas, mas não se
limite a elas.</p>

<h3 id="como-instalar-php-no-windows%3F">Como instalar PHP no Windows?</h3>

<p>Para usar o PHP no Windows, tudo que precisamos fazer é baixar o executável na página oficial de downloads do PHP para
Windows: https://windows.php.net/download</p>

<p>Nesta página você terá acesso ao download de um zip, e neste zip você encontra o executável do PHP. Sendo assim, basta
extrair onde desejar que o PHP seja instalado e pronto. Desta forma, para executar o PHP, acesse no <em>Prompt de Comando</em>
a pasta em questão (usando o comando <code>cd</code>) e a partir de lá você poderá executar o comando <code>php</code>.</p>

<p>Para executar o PHP a partir de qualquer pasta no prompt de comando, você pode adicionar o caminho de instalação na
variável <em>PATH</em> do sistema. Existem diversos tutoriais explicando o que é e como modificar a variável de sitema <em>PATH</em>,
mas se você quiser que eu fale disso, me conta nos comentários.</p>

<h3 id="como-instalar-php-no-linux%3F">Como instalar PHP no Linux?</h3>

<p>A maioria das distribuições Linux já vêm com um pacote PHP pronto para ser instalado através do gerenciador de pacotes.
Em distribuições baseadas em <em>Debian</em>, por exemplo, basta executar <code>sudo apt install php</code> e você já terá o PHP instalado
em sua máquina.</p>

<p>Sempre há a opção de compilar o PHP de forma personalizada e eu recomendo fazer isso quando você já tiver mais intimdade
com a linguagem. É um bom aprendizado.</p>

<h3 id="como-instalar-php-no-mac%3F">Como instalar PHP no Mac?</h3>

<p>No momento da escrita deste artigo o PHP já vem instalado no Mac por padrão. :-D</p>

<p>Porém via de regra uma versão mais antiga e com menos extensões vêm instalada, então o ideal é utilizar o Homebrew
para instalar o PHP e facilitar instalação de extensões no futuro.</p>

<h2 id="e-como-aprender-web-sem-apache%3F">E como aprender Web sem Apache?</h2>

<p>Se você tem o PHP na sua máquina você já tem também um servidor web instalado, sem precisar alterar arquivos de configuração, abrir
portas, etc. O PHP vem com um <a href="https://www.php.net/manual/en/features.commandline.webserver.php">servidor embutido</a>
desde 2011 e ele serve exatamente para termos um ambiente web de desenvolvimento simplificado.</p>

<p>Além de servir conteúdos processados pelo PHP, este servidor também é capaz de servir arquivos estáticos e realizar
roteamento simples para um ponto de entrada em sua aplicação, por exemplo.</p>

<p>E claro, quando chegar o momento de sair do ambiente de desenvolvimento e aprender sobre realizar deploys, você vai
estudar sobre servidores Web. Muito provavelmente você vai se deparar com artigos sobre Nginx, PHP-FPM, etc. Mas isso é
assunto para outro momento, e não para o início do aprendizado em PHP.</p>

<h2 id="como-fa%C3%A7o-para-sair-de-2011-no-php%3F">Como faço para sair de 2011 no PHP?</h2>

<p>Se você percebeu que está aprendendo PHP de forma desatualizada e supercomplicada sem necessidade, não se preocupe nem
se sinta sozinho. Infelizmente a maioria de nós passou por isso. O primeiro passo para resolver um problema é entender
que há um problema.</p>

<p>Dado esse primeiro passo (inclusive, parabéns), vamos pesquisar materiais atualizados para aprendermos PHP como deve ser.</p>

<p>Um dos melhores livros que li como iniciante é o <a href="https://amzn.to/3fTOPaF">Modern PHP</a>.
Se preferir em Português, <a href="https://amzn.to/3dLk4lx">PHP Moderno</a>. Esse livro é de antes do PHP 7 ser lançado então ele
trata da evolução da linguagem sem entrar nos detalhes de sintaxes de 2016 pra cá.</p>

<p>A partir daí, caso você tenha aprendido a usar o PHP 5, se atualize nas novidades da linguagem. No momento da escrita
deste post nós estamos na <a href="https://www.youtube.com/playlist?list=PL3j2sfzg3FPuQXklYI2LumuG7jgZsj7cK">versão 8</a>.</p>

<h2 id="conclus%C3%A3o">Conclusão</h2>

<p>XAMPP foi uma ferramenta que ajudou bastante gente que precisava de um ambiente de desenvolvimento web um pouco mais
simples antes de 2011, já que ele facilitava a instalação da praticamente a única opção do mercado: Apache.</p>

<p>Porém há 10 anos Apache não é mais necessário para um ambiente simples de aprendizado e desenvolvimento, e se o assunto
for um servidor de produção, XAMPP nunca foi uma alternativa viável. Sendo assim, para desenvolvedores PHP, não há
motivos válidos para uso do XAMPP nos dias atuais.</p>

<p>Se você quiser aprender mais sobre algum desses assuntos, pode considerar assinar a Alura. Lá existem treinamentos (gravados por mim) sobre PHP, Nginx e muito mais. Caso pretenda estudar na Alura, <a href="https://www.alura.com.br/promocao/diasdedev">neste link</a> você tem um desconto de 10%.</p>
]]></content>
        </entry>
    </feed>