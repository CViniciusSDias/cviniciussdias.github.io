<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title><![CDATA[Dias de Dev]]></title>
    <link href="https://dias.dev/atom.xml" rel="self"/>
    <link href="https://dias.dev/"/>
    <updated>2024-04-25T18:29:12+00:00</updated>
    <id>https://dias.dev</id>
            <author>
            <name><![CDATA[Vinicius Dias]]></name>            <email><![CDATA[vinicius@dias.dev]]></email>        </author>
        <generator uri="http://sculpin.io/">Sculpin</generator>
            <entry>
            <title type="html"><![CDATA[Descubra Como o PHP Utiliza Copy on Write para Economizar Mem√≥ria]]></title>
            <link href="https://dias.dev/2024-04-18-copy-on-write-php/"/>
            <updated>2024-04-18T00:00:00+00:00</updated>
            <id>https://dias.dev/2024-04-18-copy-on-write-php/</id>
            <content type="html"><![CDATA[<p><em>CoW (Copy on Write)</em>, significa que um dado s√≥ √© copiado em mem√≥ria se alguma escrita for feita nele. No PHP, isso significa que os dados de um <em>array</em> s√≥ s√£o copiados se n√≥s realizarmos alguma escrita nessa c√≥pia, evitando um grande desperd√≠cio de mem√≥ria. Vem comigo nesse texto para entender melhor.</p>

<h2 id="_arrays_-e-consumo-de-mem%C3%B3ria"><em>Arrays</em> e consumo de mem√≥ria</h2>

<p>Um <em>array</em>, em diversas linguagens, utiliza uma <em>estrutura de dados</em> conhecida como <strong>vetor</strong>, enquanto em PHP uma estrutura conhecida como <em>HashMap</em> √© utilizada por baixo dos panos. Mas independente de qual estrutura de dados √© utilizada, uma coisa √© √≥bvia: <em>arrays</em> podem ocupar bastante espa√ßo na mem√≥ria. PS.: se quiser aprender sobre estruturas de dados com PHP, aqui tem um <a href="https://tidd.ly/4d42Myb">cupom de desconto para a Alura</a> e l√° tem cursos sobre o assunto. üòâ</p>

<p>Pensa naquela √∫ltima query super demorada que voc√™ fez e retorna um caminh√£o de dados do banco. Agora imagina armazenar isso tudo em sua aplica√ß√£o PHP. Isso vai ocupar espa√ßo. Inclusive, na maioria das vezes vamos usar pagina√ß√£o de dados para n√£o cairmos em alguns problemas, mas isso √© assunto para outro post.</p>

<p>Vamos simular de forma bastante simples um <em>array</em> grande, e vamos ver quanta mem√≥ria ele ocupa. Para isso, vamos usar a fun√ß√£o <code>memory_get_usage</code> para recuperar o uso de mem√≥ria e a fun√ß√£o <code>array_fill</code> para criar um <em>array</em> com muitos dados.</p>

<pre><code class="php">&lt;?php

// Armazena o uso de mem√≥ria inicial
$memoriaInicial = memory_get_usage();

// Cria um array de 1000 elementos
$arrayGrande = array_fill(0, 1000, 'Valor de exemplo');

$memoriaUsada = memory_get_usage() - $memoriaInicial;

// Exibe a mem√≥ria ocupada em KB
echo $memoriaUsada / 1024;
</code></pre>

<p>O trecho de c√≥digo acima vai mostrar que utilizamos aproximadamente 20 <em>kilobytes</em> ap√≥s copiarmos um array contendo 1000 strings. Agora vamos realizar uma c√≥pia desse array grande. Podemos fazer isso o passando por par√¢metro para uma fun√ß√£o, ou simplesmente o associando a uma nova vari√°vel:</p>

<pre><code class="php">// ...
$copiaDoArray = $arrayGrande;
</code></pre>

<p>Sendo assim, eu esperaria que a mem√≥ria utilizada agora fosse de aproximadamente 40 <em>kilobytes</em>, j√° que tenho o array ocupando 20 KB duas vezes. Por√©m, se eu realizo a medi√ß√£o, tenho uma surpresa:</p>

<pre><code class="php">// ...
echo (memory_get_usage() - $memoriaInicial) / 1024;
</code></pre>

<p>Eu vejo agora um uso de aproximadamente 21 KB, ou seja, o consumo de mem√≥ria praticamente n√£o mudou. Um √∫nico <em>kilobyte</em> extra foi necess√°rio para armazenar o novo array de 20 KBs. Como?</p>

<h2 id="copy-on-write---php-ao-resgate">Copy on Write - PHP ao resgate</h2>

<p>O PHP entende que arrays s√£o uma estrutura de dados muito comum, muito utilizada e muito poderosa. Por isso, h√° uma t√©cnica bastante comum implementada por baixo dos panos nos <em>arrays</em> do PHP: <em>Copy on Write</em>, ou, no bom e velho portugu√™s, c√≥pia somente no momento da escrita.</p>

<p>O que isso quer dizer √© que, ao realizar uma "c√≥pia" de um array, ou seja, ao passar um array por par√¢metro ou atribu√≠-lo a outra vari√°vel, o PHP n√£o realiza uma c√≥pia nos dados em mem√≥ria. Ele, na verdade, faz com que esse par√¢metro ou vari√°vel apontem para o mesmo endere√ßo de mem√≥ria do array original, nos poupando muita mem√≥ria, principalmente em cen√°rio de grandes volumes de dados.</p>

<p>Por√©m, se ambos apontam para o mesmo endere√ßo de mem√≥ria, isso significa que ao manipular os itens desse novo array, eu acabaria alterando o array original tamb√©m, certo? Errado. Da√≠ que vem o nome da t√©cnica de <em>copy on write</em>. Ao tentar realizar alguma manipula√ß√£o nos dados dessa "c√≥pia", s√≥ ent√£o os dados ser√£o efetivamente copiados. Sendo assim, podemos ver o aumento no uso de mem√≥ria com o seguinte trecho de c√≥digo:</p>

<pre><code class="php">// ...
$copiaDoArray[1] = 'Outro valor';
echo (memory_get_usage() - $memoriaInicial) / 1024;
</code></pre>

<p>Agora, ap√≥s modificar a vari√°vel <code>$copiaDoArray</code>, uma c√≥pia dos dados em mem√≥ria ser√° realmente feita, ent√£o o uso de mem√≥ria finalmente dobrar√° e veremos um uso de aproximadamente 42KB.</p>

<h2 id="conclus%C3%A3o">Conclus√£o</h2>

<p><em>Arrays</em> s√£o extremamente vers√°teis e poderosos no PHP e por isso s√£o amplamente utilizados (√†s vezes at√© mal utilizados). Pensando nisso, o PHP faz de tudo para que seu uso seja o mais otimizado poss√≠vel, e garantir que c√≥pias desnecess√°rias sejam evitadas nos poupa <strong>muita</strong> RAM.</p>

<p>Se voc√™ quiser aprender mais sobre as "entranhas" do PHP, manipula√ß√£o de mem√≥ria, otimiza√ß√£o al√©m de boas pr√°ticas, l√° na Alura eu tenho v√°rios cursos sobre o assunto (e sobre outros temas tamb√©m). Aqui tem um <a href="https://tidd.ly/4d42Myb">cupom de 15% desconto</a> para voc√™ aproveitar a plataforma.</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Machine Learning com PHP: Aprendendo a Criar Algoritmos de Classifica√ß√£o]]></title>
            <link href="https://dias.dev/2024-03-23-o-que-e-machine-learning/"/>
            <updated>2024-03-23T00:00:00+00:00</updated>
            <id>https://dias.dev/2024-03-23-o-que-e-machine-learning/</id>
            <content type="html"><![CDATA[<p>Machine Learning √© uma das √°reas de estudo do ramo de Intelig√™ncia Artificial (IA) que nos permite criar sistemas que aprendem a partir de dados. Aplicar Machine Learning com PHP √© uma tarefa que, embora incomum, √© perfeitamente poss√≠vel. Neste texto eu vou te mostrar como escrever um algoritmo de classifica√ß√£o com PHP.</p>

<h2 id="o-que-%C3%A9-um-algoritmo-de-classifica%C3%A7%C3%A3o%3F">O que √© um algoritmo de classifica√ß√£o?</h2>

<p>Antes de colocarmos a m√£o na massa, √© importante conhecer alguns conceitos. Machine Learning √© uma √°rea bastante ampla e repleta de possibilidades. Dentre elas, h√° os algoritmos de classifica√ß√£o. Basicamente, um algoritmo de classifica√ß√£o visa identificar a qual categoria algo pertence, ou seja, retornar a classe prevista para a amostra analisada. Um exemplo bastante comum de algoritmo de classifica√ß√£o √© o filtro de spam de e-mails. Uma mensagem pode ser classificada como indesejada ou n√£o. Ent√£o, ap√≥s treinar um modelo, podemos, com as informa√ß√µes da mensagem, tentar prever em qual das duas categorias ela se encaixa.</p>

<p>A inten√ß√£o deste texto √© mostrar como aplicar um algoritmo de classifica√ß√£o com PHP, ent√£o vou parar com os detalhes te√≥ricos por aqui. Caso voc√™ se interesse por aprendizado de m√°quina e queira continuar os estudos, √© fortemente recomendado que voc√™ entenda melhor a teoria por tr√°s dos pontos citados nesse par√°grafo.</p>

<h2 id="como-fazer-machine-learning-com-php">Como fazer Machine Learning com PHP</h2>

<p>H√° algumas bibliotecas dispon√≠veis para aplicarmos t√©cnicas de aprendizagem de m√°quina com PHP, mas no momento da escrita deste texto a mais atual e ativamente mantida se chama <a href="https://rubixml.com/">RubixML</a>. Essa biblioteca nos permite realizar diversas tarefas como Deep Learning, Regress√£o, Clusteriza√ß√£o e, claro, Classifica√ß√£o.</p>

<p>Para instalar RubixML em um projeto PHP podemos utilizar o composer:</p>

<pre><code class="shell">$ composer require rubix/ml
</code></pre>

<p>Esse componente n√£o tem requisitos obrigat√≥rios, mas h√° algumas recomenda√ß√µes como a <a href="/2022-02-13-extensoes-php">extens√£o</a> <em>Tensor</em> para computa√ß√£o otimizada de vetores e matrizes e a <em>parallel</em> para realizar computa√ß√£o <a href="/2023-07-18-programacao-concorrente-assincrona-e-paralela">paralela</a>. Para executar os c√≥digos deste texto, nada disso √© necess√°rio.</p>

<h2 id="o-que-vamos-prever-com-machine-learning">O que vamos prever com Machine Learning</h2>

<p>N√≥s vamos treinar um modelo de classifica√ß√£o usando PHP para prever se determinado jogador vai durar mais de 5 anos na liga profissional de basquete estadunidense, a famosa NBA.</p>

<p>Para isso, precisamos de estat√≠sticas de diversos jogadores antes de entrarem na NBA e o resultado deles, ou seja, se jogaram durante pelo menos 5 anos ap√≥s chegarem na liga. Esses dados podem ser encontrados <a href="https://github.com/ptyadana/Data-Science-and-Machine-Learning-Projects-Dojo/blob/master/Project%20-%20Predict%20Career%20Longevity%20for%20NBA%20Rookies%20with%20Binary%20Classification%20-%20Logistic%20Regression/data/nba_logreg.csv">neste arquivo</a> que cont√©m informa√ß√µes como o n√∫mero de partidas jogadas, n√∫mero de minutos, quantidade de pontos por jogo, n√∫mero de cestas de 3 pontos feitas, etc. E a √∫ltima coluna cont√©m a classe onde cada jogador se encontra, onde <code>1.0</code> significa que o jogador participou por pelo menos 5 anos da liga e <code>0.0</code> quer dizer que ele ficou menos do que 5 anos.</p>

<h2 id="etapas-do-processo-de-machine-learning">Etapas do processo de Machine Learning</h2>

<p>Em todo processo de Machine Learning n√≥s passamos por algumas etapas ou passos. N√≥s precisamos primeiro analisar os dados. Para isso n√≥s podemos usar at√© o pr√≥prio <em>Excel</em> para gerar gr√°ficos de correla√ß√£o entre cada uma das colunas, entender como cada coluna influencia nas classes, ver itens faltantes, etc.</p>

<p>Ap√≥s a an√°lise dos dados, realizamos o pr√©-processamento deles. Existe toda uma √°rea de estudos, chamada feature engineering, para essa an√°lise e manipula√ß√£o de dados que ser√£o utilizados por um modelo de machine learning. Nessa etapa n√≥s removemos os registros com informa√ß√µes faltantes ou as preenchemos utilizando t√©cnicas adequadas, removemos itens in√∫teis para o treinamento do modelo, adaptamos n√∫meros para estarem na escala correta, etc.</p>

<p>Com os dados corretamente modificados, a pr√≥xima etapa √© o treinamento de um modelo de machine learning. H√° in√∫meros algoritmos poss√≠veis para cada tarefa que machine learning nos permite fazer e com classifica√ß√£o isso n√£o √© diferente. Alguns poss√≠veis modelos de classifica√ß√£o s√£o <em>K Nearest Neighbors</em>, <em>Classification Tree</em>, <em>Naive Bayes</em>, etc. N√≥s vamos selecionar um modelo e trein√°-lo com <strong>parte</strong> dos dados que analisamos e manipulamos.</p>

<p>O motivo de utilizarmos apenas parte dos dados √© porque n√≥s separamos outra parte para testar o modelo treinado. Essa parte separada para teste nos permitir√° verificar qu√£o preciso est√° nosso modelo em classificar o que desejamos, j√° que conhecemos as classes de cada uma das amostras que vamos tentar prever.</p>

<p>Com o teste feito, a √∫ltima etapa entra em a√ß√£o: medi√ß√£o. N√≥s medimos os resultados de nosso modelo utilizando diversas m√©tricas para podermos voltar √† etapa de treino e realizar otimiza√ß√µes, seja alterando os par√¢metros do modelo utilizado ou at√© selecionando outro algoritmo.</p>

<h3 id="an%C3%A1lise-dos-dados">An√°lise dos dados</h3>

<p>Agora vamos √† pr√°tica. A primeira etapa √© recuperar os dados. Como eu comentei anteriormente, parte da an√°lise pode ser feita em ferramentas externas como o <em>Excel</em>. L√° voc√™ pode gerar gr√°ficos e analisar os valores para obter percep√ß√µes interessantes.</p>

<p>E para recuperar os dados no c√≥digo PHP, a tarefa fica at√© f√°cil. A biblioteca <em>RubixML</em> nos permite criar um conjunto de dados a partir de arrays ou qualquer outro objeto iter√°vel, e a pr√≥pria biblioteca nos permite tamb√©m criar um iterador a partir de um arquivo CSV. Sendo assim, para criarmos um <em>dataset</em> a partir do arquivo baixado anteriormente, basta o seguinte c√≥digo:</p>

<pre><code class="php">&lt;?php

use Rubix\ML\Datasets\Labeled;
use Rubix\ML\Extractors\CSV;

$arquivoCsv = new CSV(__DIR__ . '/nba_logreg.csv', header: true);
$conjuntoDeDados = Labeled::fromIterator($arquivoCsv);

</code></pre>

<p>Um conjunto de dados classificado (<em>labeled dataset</em>) √© o que queremos para treinar um modelo de classifica√ß√£o.</p>

<h3 id="pr%C3%A9-processamento-do-conjunto-de-dados">Pr√©-processamento do conjunto de dados</h3>

<p>Ap√≥s recuperarmos os dados, precisamos manipul√°-los antes de treinar qualquer modelo. Em nosso caso, algumas manipula√ß√µes simples que podemos fazer:</p>

<ul>
<li>Remover o nome, j√° que n√£o √© relevante para a predi√ß√£o;</li>
<li>Transformar os valores em n√∫meros no PHP, j√° que eles ser√£o importados como strings;</li>
<li>Remover dados com informa√ß√µes faltantes;</li>
</ul>

<p>N√≥s poder√≠amos fazer diversas outras manipula√ß√µes como balanceamento do conjunto de dados, preenchimento dos itens faltantes, etc. Mas essas t√©cnicas j√° seriam um pouco mais avan√ßadas, ent√£o vamos nos ater ao simples. As 3 manipula√ß√µes citadas ficariam assim:</p>

<pre><code class="php">&lt;?php

$conjuntoDeDados = Labeled::fromIterator($arquivoCsv)
    // Remove o nome do jogador de cada amostra
    -&gt;apply(new LambdaFunction(function (array &amp;$amostra) {
        unset($amostra[0]);
        $amostra = array_values($amostra);
    }))
    // Transforma strings num√©ricas em n√∫meros
    -&gt;apply(new NumericStringConverter())
    // Remove amostras com itens faltantes
    -&gt;filter(function (array $amostra) {
        $itensVazios = array_filter(
            $amostra,
            fn ($item) =&gt; !is_numeric($item)
        );

        return empty($itensVazios);
    });
</code></pre>

<p>Agora temos um conjunto de dados sem amostras com informa√ß√µes faltantes, todas as informa√ß√µes s√£o n√∫meros e o nome foi removido de cada amostra.</p>

<h3 id="sele%C3%A7%C3%A3o-e-treinamento-de-um-modelo">Sele√ß√£o e treinamento de um modelo</h3>

<p>Com o conjunto de dados manipulado, chegou a hora de treinar um modelo a partir dele. Como citei anteriormente, vamos dividir parte desse conjunto para treinar o modelo e a outra parte ser√° usada para test√°-lo. Vamos fazer isso de forma proporcional, onde cada parte do conjunto ter√° a mesma propor√ß√£o de jogadores que duraram pelo menos 5 anos e que n√£o duraram. Isso se chama divis√£o estratificada e √© interessante para n√£o ocorrer uma divis√£o desigual onde treinar√≠amos nosso modelo somente com jogadores que n√£o atingiram 5 anos na liga ou vice-versa.</p>

<pre><code class="php">&lt;?php

// ...
use Rubix\ML\Classifiers\KDNeighbors;

// 80% dos dados para treinamento e 20% para teste
[$treinamento, $teste] = $conjuntoDeDados-&gt;stratifiedSplit(0.8);

$modelo = new KDNeighbors();
$modelo-&gt;train($treinamento);

</code></pre>

<p>A partir deste ponto, nossa vari√°vel <code>$modelo</code> possui um modelo de classifica√ß√£o treinado e pronto para realizar predi√ß√µes, identificando se um jogador, baseado nas informa√ß√µes passadas, deve durar pelo menos 5 anos na NBA. Com o modelo treinado, poder√≠amos passar o conjunto de informa√ß√µes de diversos jogadores (um array multidimensional) e o modelo nos devolveria a classifica√ß√£o de cada um deles, ou seja, se cada um deles permaneceria por mais de 5 anos na liga (<code>1.0</code>) ou n√£o (<code>0.0</code>).</p>

<p>Ap√≥s treinar o modelo, vamos test√°-lo para analisar qu√£o corretas est√£o as predi√ß√µes:</p>

<pre><code class="php">&lt;?php

// ...

$predicoesDeTeste = $modelo-&gt;predict($teste);
</code></pre>

<p>Como n√≥s temos os dados de teste, incluindo suas classes (tamb√©m chamadas de labels) e temos as predi√ß√µes, podemos comparar ambos para medir qu√£o corretas s√£o as previs√µes do nosso modelo. Por exemplo, sabendo que determinado jogador realmente jogou por mais de 5 anos na NBA, nosso modelo teria previsto que ele atingiria essa marca ou teria dito que ele n√£o chegaria l√°?</p>

<h3 id="medi%C3%A7%C3%A3o-do-resultado">Medi√ß√£o do resultado</h3>

<p>Existe um conceito chamado matriz de confus√£o (<em>confusion matrix</em>) utilizado para gerar diversas m√©tricas para modelos de machine learning. Essa matriz vai nos dizer o seguinte: baseado nas predi√ß√µes e nas classes dos dados de teste, quanto nosso modelo acertou e errou de cada classe?</p>

<p>Para gerar essa matriz, podemos executar o seguinte c√≥digo:</p>

<pre><code class="php">&lt;?php

use Rubix\ML\CrossValidation\Reports\ConfusionMatrix;

$geradorDeMatriz = new ConfusionMatrix();
$matrizDeConfusao = $geradorDeMatriz-&gt;generate(
    $predicoesDeTeste,
    $teste-&gt;labels()
);
</code></pre>

<p>A vari√°vel <code>$matrizDeConfusao</code> vai ter em seu conte√∫do, algo como:</p>

<pre><code>array(2) {
  '1.0' =&gt; array(2) {
    '1.0' =&gt;
    int(124)
    '0.0' =&gt;
    int(46)
  }
  '0.0' =&gt; array(2) {
    '1.0' =&gt;
    int(42)
    '0.0' =&gt;
    int(55)
  }
}
</code></pre>

<p>Isso seria equivalente √† seguinte tabela:</p>

<table aria-label="Tabela de matriz de confus√£o">
    <thead>
        <tr>
          <th scope="col"></th>
          <th scope="col">1.0</th>
          <th scope="col">0.0</th>
        </tr>
    </thead>
    <tbody>
        <tr>
          <th scope="row">1.0</th>
          <td>124</td>
          <td>46</td>
        </tr>
        <tr>
          <th scope="row">0.0</th>
          <td>42</td>
          <td>55</td>
        </tr>
    </tbody>
</table>

<p>Ou seja, dos jogadores que nosso modelo previu que durariam pelo menos 5 anos na NBA, 124 realmente duraram e 46 n√£o. J√° dos jogadores que o modelo previu que n√£o durariam mais de 5 anos, 55 realmente n√£o duraram, enquanto 42 duraram. Ent√£o o modelo realmente acertou mais do que errou.</p>

<h3 id="m%C3%A9tricas-para-otimiza%C3%A7%C3%A3o">M√©tricas para otimiza√ß√£o</h3>

<p>Como foi citado anteriormente, a matriz de confus√£o √© utilizada para calcular m√©tricas. Apenas a matriz de confus√£o n√£o vai ser suficiente para tomarmos a decis√£o de se nosso modelo √© suficiente para nosso objetivo ou n√£o.</p>

<p>Uma simples m√©trica que pode ser calculada √© a acur√°cia do modelo. Ela basicamente √© a medida da frequ√™ncia em que nosso modelo acertou. √â como perguntar: "de tudo que meu modelo previu, quanto ele acertou?" N√≥s podemos calcular a acur√°cia da seguinte forma:</p>

<pre><code class="php">&lt;?php

use Rubix\ML\CrossValidation\Metrics\Accuracy;

$metrica = new Accuracy();
$acuracia = $metrica-&gt;score($predicoesDeTeste, $teste-&gt;labels());
</code></pre>

<p>O valor de <code>$acuracia</code> vai ser um n√∫mero entre 0 e 1, indicando o percentual geral de acerto do modelo. Essa m√©trica raramente √© suficiente para decidirmos se o modelo est√° otimizado o suficiente ou n√£o. H√° outras m√©tricas como precis√£o, F1, recall, etc. N√≥s podemos ter um artigo inteiro falando sobre as diversas poss√≠veis m√©tricas, ent√£o nesse artigo vou parar aqui, na acur√°cia.</p>

<p>Caso o valor das m√©tricas n√£o seja satisfat√≥rio, podemos realizar otimiza√ß√µes ou modificar completamente o modelo utilizado, at√© que tenhamos o resultado esperado.</p>

<h2 id="conclus%C3%A3o">Conclus√£o</h2>

<p>Machine Learning √© uma √°rea de estudos fascinante e pode nos abrir um novo mundo de possibilidades. Se voc√™ se interessou pelo assunto, pode gostar do v√≠deo a seguir onde eu explico novamente o conceito de classifica√ß√£o e o aplico em outro conjunto de dados:</p>

<p><lite-youtube videoid="HP7gluvSY9U" style="background-image: url('https://i.ytimg.com/vi/HP7gluvSY9U/hqdefault.jpg');">
    <a href="https://youtube.com/watch?v=HP7gluvSY9U" class="lty-playbtn" title="Reproduzir v√≠deo">
        <span class="lyt-visually-hidden">Reproduzir v√≠deo: Machine Learning com PHP: Aprendizado de m√°quina na pr√°tica | Dias de Dev</span>
    </a>
</lite-youtube></p>

<p>E para se aprofundar ainda mais no mundo de machine learning, intelig√™ncia artificial e tamb√©m PHP, voc√™ pode aproveitar <a href="https://tidd.ly/4d42Myb">esse cupom de 15% de desconto na Alura</a>.</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[PHP Strict Types: Entendendo o Uso Pr√°tico da Diretiva declare(strict_types=1) no PHP]]></title>
            <link href="https://dias.dev/2023-12-28-entendendo-strict-types-no-php/"/>
            <updated>2023-12-28T00:00:00+00:00</updated>
            <id>https://dias.dev/2023-12-28-entendendo-strict-types-no-php/</id>
            <content type="html"><![CDATA[<p>A diretiva <code>declare(strict_types=1)</code> √© amplamente utilizada no PHP, mas nem todos entendem o que ela faz na pr√°tica. Nesse texto n√≥s vamos entender como o comportamento do seu c√≥digo pode ser alterado ao usar essa diretiva.</p>

<h2 id="type-hints-no-php">Type hints no PHP</h2>

<p>O PHP possui o conceito de <em>Type Hints</em> que √© basicamente como n√≥s podemos informar os tipos que usaremos em alguns locais como em par√¢metros e retornos de fun√ß√µes. Ao informar o tipo de um par√¢metro, por exemplo, o PHP ir√° verificar se o valor passado √© compat√≠vel com o tipo informado. Por exemplo:</p>

<pre><code class="php">function soma(int $a, int $b): int
{
    return $a + $b;
}

soma('test 1', 'test 2'); // Fatal error: Uncaught TypeError: Argument 1 passed to soma() must be of the type int, string given
</code></pre>

<p>Repare que ao tentar passar uma string para uma fun√ß√£o que espera inteiros, um erro do tipo <code>TypeError</code> √© lan√ßado. Esse tipo de t√©cnica traz mais seguran√ßa para nosso c√≥digo de forma que conhecemos melhor os valores que manipulamos.</p>

<h2 id="malabarismo-com-tipos">Malabarismo com tipos</h2>

<p>Embora o PHP possua os famosos e muito √∫teis <em>type hints</em>, √© importante dizer que nem sempre eles s√£o seguidos √† risca. O PHP possui outro conceito chamado <em>type juggling</em> (malabarismo de tipos em tradu√ß√£o livre) que √© basicamente a convers√£o de tipos de forma impl√≠cita. Essa funcionalidade permite algumas facilidades bem interessantes, principalmente quando nos lembramos que o protocolo HTTP trabalha somente com texto. Se n√≥s recebessemos os dois n√∫meros para realizar a soma por uma requisi√ß√£o, eles viriam como <code>string</code>s, ent√£o o seguinte c√≥digo seria executado:</p>

<pre><code class="php">soma('1', '2'); // 3
</code></pre>

<p>Embora ainda estejamos passando strings por par√¢metro, agora a chamada da fun√ß√£o √© bem sucedida. Isso acontece, pois o PHP possui algo chamado <a href="https://www.youtube.com/watch?v=sKw-ruVP9cw">strings num√©ricas</a>. O exemplo anterior √© um caso onde a convers√£o autom√°tica dos tipos nos ajuda, por√©m h√° casos onde isso pode ser um problema. Se n√≥s tentarmos passar n√∫meros com ponto flutuante, por exemplo, o PHP ir√° remover a parte decimal dos n√∫meros:</p>

<pre><code class="php">soma(1.5, 2.5); // 3
</code></pre>

<p>Desde a vers√£o 8.1 o PHP emitir√° um aviso de obsol√™ncia (<em>deprecation notice</em>) quando tentamos converter <code>float</code> para <code>int</code>, mas ainda assim o c√≥digo √© executado e o resultado √© no m√≠nimo inesperado (para n√£o dizer incorreto).</p>

<h2 id="impedindo-convers%C3%B5es">Impedindo convers√µes</h2>

<p>Para impedir esse comportamento do PHP, n√≥s podemos usar a diretiva <code>declare(strict_types=1)</code> que ir√° for√ßar o PHP a seguir os <em>type hints</em> de forma mais r√≠gida, sem convers√µes impl√≠citas de tipos. Ao usar essa diretiva, o PHP ir√° lan√ßar um erro do tipo <code>TypeError</code> quando tentarmos passar um tipo diferente do esperado, mesmo que seja poss√≠vel realizar alguma convers√£o. Sendo assim, se onde eu chamo a fun√ß√£o <code>soma</code> houver a declara√ß√£o de <code>strict_types</code>, o c√≥digo lan√ßar√° um erro:</p>

<pre><code class="php">&lt;?php

declare(strict_types=1);

function soma(int $a, int $b): int
{
    return $a + $b;
}

soma('1', '2'); // Fatal error: Uncaught TypeError: Argument 1 passed to soma() must be of the type int, string given
soma(1.5, 2.5); // Fatal error: Uncaught TypeError: Argument 1 passed to soma() must be of the type int, float given
</code></pre>

<p>Um detalhe muito importante √© que a diretiva <code>declare(strict_types=1)</code> deve ser declarada no in√≠cio do arquivo, antes de qualquer c√≥digo.</p>

<h2 id="m%C3%BAltiplos-arquivos">M√∫ltiplos arquivos</h2>

<p>A diretiva <code>declare</code> agir√° no arquivo onde ela for declarada, ent√£o pode acontecer de termos um arquivo com <code>strict_types=1</code> e outro sem. Nesse cen√°rio, o PHP vai se comportar seguindo o que for declarado no arquivo que <strong>chama</strong> a fun√ß√£o e n√£o no arquivo que a declara. Exemplo:</p>

<pre><code class="php">&lt;?php
// arquivo functions.php

declare(strict_types=1);

function soma(int $a, int $b) {
    return $a + $b;
}
?&gt;

&lt;?php
// arquivo index.php

require_once 'functions.php';

echo soma('1', '2'); // 3
?&gt;
</code></pre>

<p>Repare que mesmo o arquivo <code>functions.php</code> possuindo a diretiva, o arquivo que executa a fun√ß√£o √© o <code>index.php</code> e ele n√£o informa a diretiva, logo, ela estar√° desabilitada. J√° no caso contr√°rio, o seguinte ocorrer√°:</p>

<pre><code class="php">// arquivo functions.php

function soma(int $a, int $b) {
    return $a + $b;
}
?&gt;

&lt;?php
// arquivo index.php

declare(strict_types=1);

require_once 'functions.php';

echo soma('1', '2'); // Fatal error: Uncaught TypeError: Argument 1 passed to soma() must be of the type int, string given
?&gt;
</code></pre>

<p>Mesmo o arquivo <code>functions.php</code> n√£o informando a diretiva <code>declare(strict_types=1)</code> o erro acontece, pois no arquivo <code>index.php</code> √© onde a chamada acontece e ele possui a diretiva.</p>

<h2 id="conclus%C3%A3o">Conclus√£o</h2>

<p>Tipos em PHP podem ser um assunto espinhoso porque al√©m de complexo, nem todo dev concorda em como utiliz√°-los. Uns (como eu) acreditam que quanto mais estrito, melhor. Outros acreditam que <em>type hints</em> s√£o um desperd√≠cio. Mais uma coisa eu acredito que seja un√¢nime: √© muito importante para n√≥s, como devs PHP, entender como os tipos funcionam na linguagem com a qual trabalhamos.</p>

<p>Se voc√™ deseja explorar ainda mais o tema de tipos em PHP, recomendo a leitura de um artigo abrangente no blog Codamos. O conte√∫do discute detalhadamente os diversos tipos em PHP, suas manipula√ß√µes e convers√µes, e oferece uma an√°lise mais aprofundada sobre <code>strict_types</code>, inclusive com trechos de c√≥digo em C do PHP. Para acessar o artigo completo, visite <a href="https://codamos.com.br/tipos-em-php/">este link</a>. E se voc√™ quiser aprender mais sobre PHP, h√° <strong>muitos</strong> cursos gravados por mim l√° na Alura. Aqui tem um <a href="https://tidd.ly/4d42Myb">cupom de 15% de desconto</a> para assinar a plataforma.</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Executando Fun√ß√µes Rust em PHP com FFI: Um Guia Passo a Passo]]></title>
            <link href="https://dias.dev/2023-12-18-usando-rust-com-php-e-ffi/"/>
            <updated>2023-12-18T00:00:00+00:00</updated>
            <id>https://dias.dev/2023-12-18-usando-rust-com-php-e-ffi/</id>
            <content type="html"><![CDATA[<p>Usando FFI (<em>Foreign Function Interface</em>) √© poss√≠vel executar c√≥digo de outras linguagens em PHP. Neste artigo, vamos ver como executar fun√ß√µes escritas em Rust a partir do PHP usando FFI.</p>

<h2 id="ffi">FFI</h2>

<p>FFI n√£o √© uma particularidade do PHP, mas sim uma t√©cnica que permite que uma linguagem de programa√ß√£o execute c√≥digo de outra linguagem. Desde sua vers√£o 7.4, o PHP possui uma <a href="/2022-02-13-extensoes-php">extens√£o</a> chamada FFI que permite o uso dessa t√©cnica.</p>

<p>Para usar FFI, precisamos ter um arquivo compilado em formato de biblioteca. Normalmente s√£o arquivos <code>.so</code> no Linux e <code>.dll</code> no Windows. Esses arquivos podem ser gerados a partir de c√≥digo escrito em C, C++ ou Rust, por exemplo.</p>

<h2 id="gerando-uma-biblioteca-em-rust">Gerando uma biblioteca em Rust</h2>

<p>Entendido o conceito de FFI e sabendo que √© poss√≠vel executar essa t√©cnica com PHP, vamos criar uma biblioteca em Rust. Esse texto n√£o tem a inten√ß√£o de ser um tutorial de Rust, ent√£o vou assumir que voc√™ j√° possua o Rust e Cargo instalados corretamente em seu computador.</p>

<p>Para criar um novo projeto em Rust, execute o comando abaixo em uma pasta da sua escolha:</p>

<pre><code class="bash">cargo new --lib nossa-biblioteca
</code></pre>

<p>Com isso, alguns arquivos ser√£o criados. Voc√™ ter√° o arquivo de configura√ß√£o do projeto chamado <code>Cargo.toml</code> e o arquivo <code>lib.rs</code> que √© o arquivo principal da biblioteca.</p>

<p>No arquivo <code>Cargo.toml</code>, vamos adicionar a seguinte configura√ß√£o:</p>

<pre><code class="toml">[lib]
crate-type = ["cdylib"]
</code></pre>

<p>Com isso, n√≥s informamos ao Cargo que ao compilar nosso projeto, ele deve gerar uma biblioteca que pode ser utilizada por outras linguagens e n√£o apenas por outros projetos Rust.</p>

<p>Se voc√™ executar o comando <code>cargo build</code>, o projeto rec√©m-criado deve ser compilado sem nenhum problema.</p>

<h2 id="escrevendo-o-c%C3%B3digo-em-rust">Escrevendo o c√≥digo em Rust</h2>

<p>Para que a fun√ß√£o que n√≥s vamos escrever possa ser executada por outras linguagens, precisamos adotar algumas pr√°ticas e √© isso que veremos agora.</p>

<p>Nossa inten√ß√£o √© criar uma fun√ß√£o que receba dois n√∫meros e retorne a soma deles. No momento da escrita desse artigo, o c√≥digo de <code>src/lib.rs</code> j√° possui uma fun√ß√£o que faz isso, mas vamos alter√°-la para que ela possa ser usada por outras linguagens. Esse √© o c√≥digo inicial ao criar a biblioteca:</p>

<pre><code class="rust">pub fn add(left: usize, right: usize) -&gt; usize {
    left + right
}
</code></pre>

<p>Vamos come√ßar com os tipos. <code>usize</code> significa <em>unsigned size</em> e √© um tipo que representa um n√∫mero inteiro positivo. N√≥s queremos permitir o uso de n√∫meros negativos tamb√©m, ent√£o vamos alterar esse tipo. Para manter as coisas simples, vamos usar <code>i32</code> que √© um inteiro de 32 bits. Isso √© equivalente ao <code>int</code> de C em um sistema de 64 bits. Com essa altera√ß√£o, nosso c√≥digo fica assim:</p>

<pre><code class="rust">pub fn add(left: i32, right: i32) -&gt; i32 {
    left + right
}
</code></pre>

<h2 id="tornando-o-c%C3%B3digo-acess%C3%ADvel-por-outras-linguagens">Tornando o c√≥digo acess√≠vel por outras linguagens</h2>

<p>At√© agora escrevemos um c√≥digo perfeitamente funcional em Rust, mas ele ainda n√£o pode ser executado por outras linguagens que consigam executar bibliotecas. Ainda faltam algumas etapas.</p>

<p>A primeira √© justamente informar que essa fun√ß√£o chamada <code>add</code> pode ser chamada externamente. Isso √© feito com a diretiva <code>extern "C"</code> do Rust. Ao adicionar <code>extern "C"</code> antes de <code>fn</code> n√≥s informamos que a fun√ß√£o a seguir ser√° vis√≠vel para outras linguagens.</p>

<p>Mas ainda falta um √∫ltimo detalhe. Ao compilar um c√≥digo, todo compilador, independente da linguagem, realiza um processo chamado <em>Mangling</em>. Esse processo consiste em renomear a fun√ß√£o para adicionar informa√ß√µes ou √†s vezes at√© para manipular o tamanho do bin√°rio resultante da compila√ß√£o. O problema √© que cada compilador faz isso de uma forma diferente e isso impede que uma fun√ß√£o escrita em uma linguagem seja chamada por outra linguagem.</p>

<p>O Rust possui um atributo que, quando adicionado a uma fun√ß√£o, informa ao compilador que esse processo n√£o deve ser realizado. Dessa forma, nossa fun√ß√£o chamada <code>add</code> continuar√° se chamando <code>add</code> mesmo ap√≥s a compilac√£o. O nome do atributo √© <code>#[no_mangle]</code> e ele deve ser adicionado antes da fun√ß√£o. Com isso, nosso c√≥digo fica assim:</p>

<pre><code class="rust">#[no_mangle]
pub extern "C" fn add(left: i32, right: i32) -&gt; i32 {
    left + right
}
</code></pre>

<p>Com isso, nosso c√≥digo em Rust est√° pronto para ser executado por outras linguagens.</p>

<h2 id="compilando-a-biblioteca">Compilando a biblioteca</h2>

<p>Para compilar a biblioteca, basta executar o comando <code>cargo build</code> na pasta do projeto. O arquivo resultante da compila√ß√£o estar√° em <code>target/debug/libnossa_biblioteca.so</code> no Linux ou <code>target/debug/nossa_biblioteca.dll</code> no Windows.</p>

<p>O arquivo resultante da compila√ß√£o √© uma biblioteca que pode ser usada por outras linguagens.</p>

<h2 id="usando-a-biblioteca-em-php">Usando a biblioteca em PHP</h2>

<p>Agora que temos um arquivo <code>.so</code> ou <code>.dll</code> gerado, podemos us√°-lo em PHP. Para isso, vamos usar a extens√£o FFI.</p>

<p>Essa extens√£o possui algumas formas de ser utilizada e o prop√≥sito desse texto n√£o √© ser um tutorial sobre FFI tamb√©m. Ent√£o vou seguir com a abordagem mais simples, que √© informar dois par√¢metros √† fun√ß√£o <code>FFI::cdef</code>: o primeiro √© uma string contendo as assinaturas das fun√ß√µes que queremos usar e o segundo √© o caminho para a biblioteca que queremos usar.</p>

<p>Vamos criar um arquivo <code>ffi.php</code> na mesma pasta desse nosso projeto em Rust para realizar o teste. Nosso c√≥digo para utilizar a fun√ß√£o <code>add</code> do arquivo <code>target/debug/libnossa_biblioteca.so</code> (troque por <code>.dll</code> no Windows) fica assim:</p>

<pre><code class="php">$ffi = FFI::cdef(
    'int add(int left, int right);',
    __DIR__ . '/target/debug/libnossa_biblioteca.so'
);

var_dump($ffi-&gt;add(1, 2));
</code></pre>

<p>Caso voc√™ tenha a extens√£o FFI instalada e habilitada, o resultado ser√° <code>int(3)</code>. Isso significa que a fun√ß√£o <code>add</code> foi executada corretamente e retornou o valor <code>3</code>.</p>

<h2 id="considera%C3%A7%C3%B5es-sobre-tipos">Considera√ß√µes sobre tipos</h2>

<p>Repare que em Rust n√≥s escrevemos <code>i32</code> como o tipo dos par√¢metros e do retorno, enquanto no PHP n√≥s usamos <code>int</code>. A extens√£o FFI espera como defini√ß√£o das fun√ß√µes uma assinatura compat√≠vel com C e o tipo <code>i32</code>, como foi citado anteriormente, √© equivalente ao <code>int</code> de C. Por isso, podemos usar <code>int</code> no PHP sem problemas. Al√©m disso, diversas convers√µes s√£o feitas automaticamente pela extens√£o FFI, por isso o tipo <code>int</code> de C virou sem nenhum problema um <code>int</code> do PHP, embora por baixo dos panos eles sejam tipos bem diferentes.</p>

<h3 id="strings">Strings</h3>

<p>Tipos num√©ricos e booleanos s√£o relativamente f√°ceis de se lidar, mas e quanto a strings? Como podemos passar uma string para o Rust e/ou receber uma string de volta?</p>

<p>O Rust possui um m√≥dulo chamado <code>std::ffi</code> que √© exatamente pensado para trazer funcionalidades quando estivermos escrevendo c√≥digo que pode interagir com outras linguagens. Um dos tipos presentes nesse m√≥dulo √© o chamado <code>c_char</code> que √© equivalente ao <code>char</code> de C. Com isso, uma string que em C √© um ponteiro para um <code>char</code> pode ser representada em Rust como um ponteiro para um <code>c_char</code>. Logo, para receber uma string por par√¢metro ou para retornar uma string, bastaria utilizarmos <code>*const c_char</code> como tipo.</p>

<p>Exemplo de fun√ß√£o que recebe uma string e a retorna sem modifica√ß√µes:</p>

<pre><code class="rust">use std::ffi::c_char;

#[no_mangle]
pub extern "C" fn return_message(message: *const c_char) -&gt; *const c_char {
    message
}
</code></pre>

<p>Em PHP n√≥s poder√≠amos chamar essa fun√ß√£o da seguinte forma:</p>

<pre><code class="php">$ffi = FFI::cdef(
    'const char *return_message(const char *message);',
    __DIR__ . '/target/debug/libnossa_biblioteca.so'
);
var_dump($ffi-&gt;return_message('Hello, world!'));
</code></pre>

<p>E isso nos mostraria <code>string(13) "Hello, world!"</code>.</p>

<p>Por√©m, para manipularmos essa String em Rust, um ponteiro para <code>c_char</code> n√£o seria a melhor forma. Ent√£o podemos usar o tipo <code>std::ffi::CStr</code> para transformar esse ponteiro em uma string manipul√°vel da seguinte forma:</p>

<pre><code class="rust">let string: &amp;str = unsafe { CStr::from_ptr(message) }.to_str().unwrap();
</code></pre>

<p>Como estamos lidando com um ponteiro, o bloco <code>unsafe</code> √© necess√°rio. O m√©todo <code>to_str()</code> tenta transformar o <code>CStr</code> em uma string do Rust, mas isso pode falhar, ent√£o ele retorna um <code>Result</code>. Como sabemos que a string que estamos recebendo √© v√°lida, podemos usar o m√©todo <code>unwrap()</code> para obter a string sem precisar lidar com o <code>Result</code>.</p>

<p>Al√©m de <code>CStr</code> h√° tamb√©m o tipo <code>CString</code>. <code>CStr</code> est√° para <code>&amp;str</code> assim como <code>CString</code> est√° para <code>String</code> no Rust. Com isso n√≥s j√° conseguimos lidar normalmente com strings em Rust.</p>

<h2 id="conclus%C3%A3o">Conclus√£o</h2>

<p>J√° que √© poss√≠vel chamar c√≥digos em Rust (ou outras linguagens como C ou C++) a partir do PHP, algumas tarefas que poderiam ser executadas de forma mais eficiente ou at√© de forma exclusiva a partir de linguagens compiladas ainda podem viver em projetos PHP.</p>

<p>Dois bons exemplos de caso de uso desse tipo de t√©cnica s√£o:</p>

<ol>
<li>pacote <code>php-tkui</code> que usa FFI para chamar o Tk, uma biblioteca gr√°fica escrita em C, o que permite <a href="https://youtube.com/watch?v=5yhJMcCVNSI">cria√ß√£o de aplica√ß√µes desktop usando PHP</a></li>
<li>Computa√ß√£o de grandes arquivos JSON ou Markdown, que embora seja perfeitamente poss√≠vel fazer diretamente me PHP, em alguns cen√°rios pode se tornar mais eficiente usando Rust + FFI.</li>
</ol>

<p>Se voc√™ quiser aprender mais tanto sobre Rust quanto sobre PHP, h√° cursos gravados por mim l√° na Alura. Aqui tem um <a href="https://tidd.ly/4d42Myb">cupom de 15% de desconto</a> para assinar a plataforma.</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Novidades do PHP 8.3: O que h√° de novo nessa vers√£o do PHP]]></title>
            <link href="https://dias.dev/2023-11-17-novidades-do-php-8-3/"/>
            <updated>2023-11-17T00:00:00+00:00</updated>
            <id>https://dias.dev/2023-11-17-novidades-do-php-8-3/</id>
            <content type="html"><![CDATA[<p>A vers√£o final do PHP 8.3 est√° agendada para ser lan√ßada no dia <a href="https://wiki.php.net/todo/php83">23 de novembro de 2023</a> e traz algumas novidades bem interessantes, contando com novas fun√ß√µes, novas classes e c√≥digo que passa a ser considerado obsoleto.</p>

<h2 id="modifica%C3%A7%C3%B5es-sobre-%60readonly%60">Modifica√ß√µes sobre <code>readonly</code></h2>

<p>Uma <em>RFC</em> intitulada <em>Readonly amendments</em> prop√µe duas mudan√ßas em como a palavra-chave <code>readonly</code> se comporta, por√©m apenas uma dessas mudan√ßas foi aceita. A partir da vers√£o 8.3 do PHP, √© poss√≠vel reinicializar propriedades <code>readonly</code> ao clonar objetos, ou seja, dentro do <a href="/2023-08-11-metodos-magicos-php">m√©todo m√°gico</a> <code>__clone</code>.</p>

<p>Isso torna o seguinte c√≥digo, que no PHP 8.2 causaria um erro, poss√≠vel:</p>

<pre><code class="php">&lt;?php

readonly class Usuario
{
    public function __construct(
        public \DateTimeImmutable $nascimento, 
    ) {}

    public function __clone() : void
    {
        $this-&gt;nascimento = clone $this-&gt;nascimento;
    }
}
</code></pre>

<p>Essa funcionalidade, embora pare√ßa pequena, permite que realizemos <em>deep copy</em> de objetos que possuam propriedades <code>readonly</code>.</p>

<p>Se quiser ver mais sobre essa nova funcionalidade, eu tenho um v√≠deo sobre ela em meu canal do YouTube:</p>

<p><lite-youtube videoid="yE2Ei9xsJnk">
    <a href="https://youtube.com/watch?v=yE2Ei9xsJnk" class="lite-youtube-fallback" title="Reproduzir v√≠deo">
        Novidades do PHP 8.3: Modifica√ß√µes sobre readonly | Dias de Dev
    </a>
</lite-youtube></p>

<h2 id="constantes-tipadas-em-classes">Constantes tipadas em classes</h2>

<p>A partir do PHP 8.3 √© poss√≠vel definirmos os tipos de constantes em nossas classes. Essa possibilidade nos traz mais seguran√ßa de tipos principalmente quando h√° heran√ßa entre classes ou implementa√ß√£o de interfaces que possuem constantes. At√© o PHP 8.2, uma classe poderia sobrescrever uma constante herdada adicionando qualquer valor, sem checagem de tipo. Isso poderia trazer problemas como o seguinte:</p>

<pre><code class="php">interface InterfaceTeste {
    const TEST = "Test";
}

class ClasseBase implements InterfaceTeste {
    const TEST = []; // Mudamos o tipo aqui
}

class ClasseDerivada extends ClasseBase {
    const TEST = null; // Mais uma vez, outro tipo
}
</code></pre>

<p>Ao acessar a constante <code>TEST</code> de algum objeto do tipo <code>InterfaceTeste</code>, n√£o havia nenhuma garantia que seu tipo sempre seria <code>string</code>. Com o PHP 8.3, o seguinte √© poss√≠vel:</p>

<pre><code class="php">interface InterfaceTeste {
    const string TEST = "Test";
}

class ClasseBase implements InterfaceTeste {
    const array TEST = []; // Isso falharia, pois muda o tipo da constante
}
</code></pre>

<h2 id="retorno-nulo-em-ffi">Retorno nulo em FFI</h2>

<p>Ao chamar uma fun√ß√£o que n√£o retorna nada, ou seja, <code>void</code>, via <code>FFI</code>, o PHP retornava um tipo espec√≠fico chamado <code>FFI\CData</code> com o valor <code>void</code>. Agora, assim como em uma fun√ß√£o PHP com o retorno <code>void</code>, n√≥s receberemos <code>null</code> dessa fun√ß√£o. Exemplo:</p>

<pre><code class="php">$ffi = FFI::cdef(
    "void free(void *ptr);",
    "libc.so.6"
);
// At√© o PHP 8.2, isso retornaria `FFI\CData`, agora retorna `null`
$ffi-&gt;free(/* ponteiro*/);
</code></pre>

<h2 id="atributo-%60%23%5Coverride%60-para-sobrescrita-de-m%C3%A9todos">Atributo <code>#[\Override]</code> para sobrescrita de m√©todos</h2>

<p>Um novo atributo chega ao PHP 8.3. O atributo <code>#[Override]</code> permite que o c√≥digo deixe claro que o m√©todo anotado com ele est√° sobrescrevendo um m√©todo da classe base, ou seja, caso haja alguma inconsist√™ncia na heran√ßa (como nome do m√©todo escrito errado) um erro de compila√ß√£o ser√° exibido.</p>

<p>Isso permite encontrar erros como o seguinte:</p>

<pre><code class="php">&lt;?php
class Conta
{
    public function saca(int $valor): void { /* implementa√ß√£o */ }
}

class ContaCorrente
{
    public function sacar(int $valor): void { /* implementa√ß√£o modificada */ }
}
</code></pre>

<p>O c√≥digo acima possui um erro sutil no nome do m√©todo. Ao chamar <code>(new ContaCorrente())-&gt;saca($valor)</code>, embora a inten√ß√£o seja chamar o m√©todo da classe <code>ContaCorrente</code> que sobrescreve o m√©todo da classe <code>Conta</code>, n√≥s na verdade estamos chamando o m√©todo da classe <code>Conta</code> mesmo. Esse novo atributo nos permite descobrir esse erro com mais facilidade, exibindo uma mensagem de erro bastante clara:</p>

<pre><code class="php">&lt;?php
class Conta
{
    public function saca(int $valor): void { /* implementa√ß√£o */ }
}

class ContaCorrente
{
    #[Override]
    public function sacar(int $valor): void { /* implementa√ß√£o modificada */ }
}
</code></pre>

<p>Isso geraria o seguinte erro:</p>

<blockquote>
  <p>Fatal error: ContaCorrente::sacar() has #[\Override] attribute, but no matching parent method exists</p>
</blockquote>

<p>Essa √© mais uma novidade do PHP 8.3 sobre a qual eu gravei um v√≠deo espec√≠fico em meu canal do YouTube. Aqui voc√™ pode confer√≠-lo:</p>

<p><lite-youtube videoid="OO2fMqTAwZE">
    <a href="https://youtube.com/watch?v=OO2fMqTAwZE" class="lty-playbtn" title="Reproduzir v√≠deo">
        <span class="lyt-visually-hidden">
            Novidades do PHP 8.3 - Novo atributo (Override) para sobrescrita de m√©todos | Dias de Dev
        </span>
    </a>
</lite-youtube></p>

<h2 id="exce%C3%A7%C3%B5es-de-datetime-mais-adequadas-e-espec%C3%ADficas">Exce√ß√µes de DateTime mais adequadas e espec√≠ficas</h2>

<p>Algumas novas classes de exce√ß√£o s√£o introduzidas no PHP 8.3. Se tratando de <code>DateTime</code>, essas s√£o as novas exce√ß√µes:</p>

<ul>
<li><code>DateException</code>

<ul>
<li><code>DateInvalidOperationException</code></li>
<li><code>DateInvalidTimezoneException</code></li>
<li><code>DateMalformedIntervalStringException</code></li>
<li><code>DateMalformedPeriodStringException</code></li>
<li><code>DateMalformedStringException</code></li>
</ul></li>
<li><code>DateError</code>

<ul>
<li><code>DateObjectError</code></li>
<li><code>DateRangeError</code></li>
</ul></li>
</ul>

<p>Com isso, algumas exce√ß√µes lan√ßadas anteriormente ao instanciar objetos do tipo <code>DateTime</code>, <code>DateTimeImmutable</code>, <code>DateInterval</code> e <code>DatePeriod</code> podem ser diferentes agora. Um exemplo:</p>

<pre><code class="php">// At√© o PHP 8.2, uma exce√ß√£o do tipo `Exception` seria lan√ßada
// A partir do 8.3, `DateMalformedStringException` ser√° lan√ßada
new DateTime('data inv√°lida');
</code></pre>

<p>Essa √© uma <em>RFC</em> simples, mas com um grande n√∫mero de modifica√ß√µes. Se quiser saber mais sobre cada caso que pode lan√ßar uma das novas exce√ß√µes, voc√™ pode conferir a <a href="https://wiki.php.net/rfc/datetime-exceptions">p√°gina da <em>RFC</em></a>.</p>

<h2 id="nova-fun%C3%A7%C3%A3o-%60json_validate%60">Nova fun√ß√£o <code>json_validate</code></h2>

<p>Em alguns cen√°rios n√≥s precisamos garantir que uma <em>string</em> √© um <em>json</em> v√°lido, mas n√£o necessariamente precisamos realizar a transforma√ß√£o dessa <em>string</em> em um objeto ou <em>array</em> em PHP. Se n√≥s precisamos armazenar no banco de dados um <em>json</em> recebido na requisi√ß√£o, por exemplo, n√£o h√° necessidade de realizar todo o trabalho de transformar esse <em>json</em> com a fun√ß√£o <code>json_decode</code>.</p>

<p>Por√©m, at√© o PHP 8.2, a √∫nica forma de descobrirmos se uma <em>string</em> √© um <em>json</em> v√°lido em PHP era atrav√©s da fun√ß√£o <code>json_decode</code>. Esse desperd√≠cio de recursos foi resolvido no PHP 8.3 com a chegada da fun√ß√£o <code>json_validate</code>.</p>

<p>Essa nova fun√ß√£o garante que o <em>json</em> √© v√°lido, mas sem precisar alocar mem√≥ria para salvar seu conte√∫do transformado j√° que ela simplesmente retorna um booleano.</p>

<p>Eu gravei um v√≠deo curto no YouTube (no formato de <em>shorts</em>) falando sobre essa nova fun√ß√£o. Voc√™ pode conferir aqui:</p>

<p><lite-youtube videoid="7rnKavIf67w">
    <a href="https://youtube.com/watch?v=7rnKavIf67w" class="lty-playbtn" title="Reproduzir v√≠deo">
        <span class="lyt-visually-hidden">
            Novidades do PHP 8.3: Nova fun√ß√£o json_validate | Dias de Dev #shorts
        </span>
    </a>
</lite-youtube></p>

<h2 id="comando-%60php--l%60-agora-suporta-m%C3%BAltiplos-arquivos">Comando <code>php -l</code> agora suporta m√∫ltiplos arquivos</h2>

<p>Um comando muito √∫til √© o <code>php -l</code> que permite verificar se um arquivo possui algum erro de sintaxe. At√© a vers√£o 8.2 do PHP apenas um arquivo podia ser analisado por vez. Agora, a partir do PHP 8.3, n√≥s podemos passar diversos arquivos para o <code>php -l</code> analisar. Exemplo:</p>

<pre><code class="shell">php -l arquivo1.php arquivo2.php
</code></pre>

<p>O comando exibir√°, caso nenhum dos arquivos possua erros de sintaxe:</p>

<blockquote>
  <p>No syntax errors detected in arquivo1.php</p>
  
  <p>No syntax errors detected in arquivo2.php</p>
</blockquote>

<h2 id="fun%C3%A7%C3%B5es-array_sum-e-array_product-mais-consistentes">Fun√ß√µes array_sum e array_product mais consistentes</h2>

<p>As fun√ß√µes <code>array_sum</code> e <code>array_product</code> possuiam um comportamento menos previs√≠vel quando valores n√£o num√©ricos eram encontrados nos arrays a serem processados. Essa novidade traz uma maior consist√™ncia e previsibilidade para seu comportamento.</p>

<p>Por exemplo:</p>

<pre><code class="php">$input = [true, STDERR, new stdClass(), []];
var_dump(array_sum($input));
var_dump(array_product($input));
</code></pre>

<p>Tanto at√© o PHP 8.2 quanto no PHP 8.3, os resultados ser√£o 4 e 3, por√©m no PHP 8.3 diversos alertas ser√£o exibidos informando que n√£o √© poss√≠vel realizar opera√ß√µes matem√°ticas em <code>resource</code>, em <code>stdClass</code> e em <code>array</code> (<code>true</code> vira 1 em opera√ß√µes matem√°ticas no PHP e isso n√£o muda nessa vers√£o).</p>

<p>Isso faz com que n√≥s sejamos notificados pela aplica√ß√£o caso opera√ß√µes matem√°ticas estejam sendo realizadas onde n√£o deveriam.</p>

<p>H√° mais pontos de melhoria trazidos por essa <em>RFC</em> e por isso eu tamb√©m tenho um v√≠deo completo sobre ela:</p>

<p><lite-youtube videoid="cpJAwte1xZU">
    <a href="https://youtube.com/watch?v=cpJAwte1xZU" class="lty-playbtn" title="Reproduzir v√≠deo">
        <span class="lyt-visually-hidden">
            Novidades do PHP 8.3 - Fun√ß√µes array_sum e array_product mais consistentes | Dias de Dev
        </span>
    </a>
</lite-youtube></p>

<h2 id="mais-novidades">Mais novidades</h2>

<p>Voc√™ j√° deve ter reparado que esse post come√ßou a ficar bem grande, n√£o √© mesmo? O PHP 8.3 realmente est√° trazendo algumas novidades bem interessantes e nesse post eu quis destacar algumas delas.</p>

<p>Mas se voc√™ quiser saber sobre <strong>todas</strong> as novidades que o PHP 8.3 traz, pode conferir a <a href="https://wiki.php.net/rfc#php_83">p√°gina oficial das <em>RFCs</em></a> ou conferir a seguinte lista:</p>

<ul>
<li><a href="https://wiki.php.net/rfc/deprecations_php_8_3">Descontinua√ß√µes do PHP 8.3</a></li>
<li><a href="https://wiki.php.net/rfc/saner-inc-dec-operators">Modifica√ß√µes nos operadores de incremento e decremento</a></li>
<li><a href="https://wiki.php.net/rfc/arbitrary_static_variable_initializers">Possibilidade de usar express√µes em vari√°veis est√°ticas</a></li>
<li><a href="https://wiki.php.net/rfc/unserialize_warn_on_trailing_data">Aviso quando <code>unserialize()</code> encontrar dados remanescentes</a></li>
<li><a href="https://www.youtube.com/watch?v=h3dZlJrpvi0">Acesso din√¢mico a constantes de classes</a></li>
<li><a href="https://wiki.php.net/rfc/improve_unserialize_error_handling">Melhoria de tratativa de erros da fun√ß√£o <code>unserialize()</code></a></li>
<li><a href="https://wiki.php.net/rfc/assert-string-eval-cleanup">Descontinua√ß√µes relacionadas √†s fun√ß√µes de <code>assert</code></a></li>
<li><a href="https://wiki.php.net/rfc/mb_str_pad">Nova fun√ß√£o mb_str_pad</a></li>
<li><a href="https://wiki.php.net/rfc/proper-range-semantics">Melhor defini√ß√£o da sem√¢ntica da fun√ß√£o <code>range()</code></a></li>
<li><a href="https://wiki.php.net/rfc/randomizer_additions">Adi√ß√µes √† extens√£o de aleatoriedade (<code>Randomizer</code>)</a></li>
<li><a href="https://wiki.php.net/rfc/sqlite3_exceptions">Utilizar exce√ß√µes por padr√£o na extens√£o <code>SQLite3</code></a></li>
<li><a href="https://wiki.php.net/rfc/deprecate_functions_with_overloaded_signatures">Descontinuar fun√ß√µes com sobrecarga</a></li>
</ul>

<p>E se voc√™ quiser aprender mais sobre PHP e suas funcionalidades, vou deixar aqui um <a href="https://tidd.ly/4d42Myb">cupom de desconto para a Alura</a>, onde eu tenho diversos cursos sobre PHP, dentre outros assuntos.</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Explorando M√©todos M√°gicos no PHP: Conceitos e Exemplos Pr√°ticos]]></title>
            <link href="https://dias.dev/2023-08-11-metodos-magicos-php/"/>
            <updated>2023-08-11T00:00:00+00:00</updated>
            <id>https://dias.dev/2023-08-11-metodos-magicos-php/</id>
            <content type="html"><![CDATA[<p>Os m√©todos m√°gicos no PHP s√£o m√©todos "especiais" que s√£o invocadas implicitamente quando certas a√ß√µes ocorrem. Neste post, exploraremos esses m√©todos, como eles funcionam e como podem ser √∫teis.</p>

<h3 id="m%C3%A9todos-m%C3%A1gicos%3A-uma-vis%C3%A3o-geral">M√©todos m√°gicos: Uma vis√£o geral</h3>

<p>PHP √© uma linguagem de programa√ß√£o que suporta, dentre outros, o paradigma de programa√ß√£o orientada a objetos. Sendo assim, podemos definir m√©todos dentro das nossas classes, ou seja, fun√ß√µes que operam no contexto de um objeto. M√©todos m√°gicos s√£o aqueles que podemos definir em nosso c√≥digo e s√£o acionados automaticamente pelo PHP em situa√ß√µes espec√≠ficas.</p>

<p>Alguns exemplos de quando os m√©todos m√°gicos podem ser acionados incluem tentativas de acesso a membros inexistentes ou inacess√≠veis de uma classe, convers√µes de objetos e verifica√ß√µes especiais.</p>

<h2 id="exemplo-pr%C3%A1tico">Exemplo pr√°tico</h2>

<p>Um exemplo claro dos m√©todos m√°gicos em a√ß√£o √© o caso do framework Laravel. Considere uma classe de modelo (<em>Model</em>) que lida com a persist√™ncia de um usu√°rio:</p>

<pre><code class="php">&lt;?php

namespace App\Models;

use Illuminate\Database\Eloquent\Model;

class User extends Model
{ }
</code></pre>

<p>Apesar de n√£o definir nenhuma propriedade explicitamente, podemos atribuir valores a propriedades como se elas existissem:</p>

<pre><code class="php">&lt;?php

use App\Models\User;

$user = new User();
$user-&gt;name = 'Vinicius Dias';
$user-&gt;email = 'email@example.com';
$user-&gt;save();
</code></pre>

<p>O m√©todo <code>save</code> √© entendido como parte da classe base <code>Model</code>, mas e quanto √†s propriedades? Para cen√°rios como esse, os m√©todos m√°gicos foram concebidos.</p>

<h2 id="implementa%C3%A7%C3%A3o-de-m%C3%A9todos-m%C3%A1gicos">Implementa√ß√£o de m√©todos m√°gicos</h2>

<p>O nome de todo m√©todo m√°gico no PHP come√ßa com dois underscores (<code>__</code>). Por exemplo, o m√©todo <code>__set</code> √© invocado quando tentamos atribuir um valor a uma propriedade inexistente ou inacess√≠vel. Ele recebe o nome da propriedade e o valor como par√¢metros:</p>

<pre><code class="php">&lt;?php

class NossaModel
{
    /**
     * @var array&lt;string, mixed&gt; Array associativo contendo todos os valores que definirmos
     */
    private array $atributos;

    /**
     * @param string $name Nome da propriedade inacess√≠vel que estamos tentando definir
     * @param mixed $value Valor que estamos tentando atribuir a essa propriedade
     * @return void
     */
    public function __set(string $name, mixed $value): void
    {
        /*
         * Aqui, se fizermos $model-&gt;teste = 'Valor', criaremos a chave 'teste'
         * na propriedade $atributos com o valor 'Valor'
         */
        $this-&gt;atributos[$name] = $value;
    }
}
</code></pre>

<p>Repare que o c√≥digo que escrevemos no m√©todo √© c√≥digo PHP como qualquer outro. Ali n√≥s poder√≠amos realizar qualquer tipo de l√≥gica.</p>

<h3 id="como-acessar-esse-valor%3F">Como acessar esse valor?</h3>

<p>Aprendemos a definir um valor a partir de uma propriedade inexistente, mas se tentarmos ler esse valor, receberemos um erro. O c√≥digo a seguir, por exemplo, falha:</p>

<pre><code class="php">$teste = new NossaModel();
$teste-&gt;nome = 'Vinicius';

/*
 * Na linha a seguir, o retorno ser√° nulo e um _Warning_ ser√° emitido
 * dizendo que a propriedade NossaModel::$nome n√£o existe.
 */
echo $teste-&gt;nome;
</code></pre>

<p>Para escrever em propriedades inexistentes, usamos o <code>__set</code>. J√° para ler de propriedades inexistentes ou inacess√≠veis, utilizamos o m√©todo <code>__get</code>. Ent√£o poder√≠amos ter o seguinte m√©todo na classe <code>NossaModel</code>:</p>

<pre><code class="php">/**
 * @param string $name Nome da propriedade inexistente que estamos tentando ler
 * @return mixed Aqui devemos retornar o valor que corresponder√° a essa propriedade 
 */
public function __get(string $name): mixed
{
    // O valor retornado pelo m√©todo __get √© utilizado onde tentamos acessar a propriedade 
    return $this-&gt;atributos[$name];
}
</code></pre>

<p>Com isso, o c√≥digo a seguir funcionaria sem problemas:</p>

<pre><code class="php">$teste = new NossaModel();
// Chamada impl√≠cita a $teste-&gt;__set('nome', 'Vinicius');
$teste-&gt;nome = 'Vinicius';

// Chamada impl√≠cita a $teste-&gt;__get('nome'), que vai retornar 'Vinicius'
echo $teste-&gt;nome;
</code></pre>

<h2 id="mais-m%C3%A9todos">Mais m√©todos</h2>

<p>At√© aqui n√≥s citamos apenas 2 m√©todos m√°gicos, mas o PHP fornece diversos outros. Vou deixar a seguir uma lista deles:</p>

<h3 id="construtor-e-destrutor">Construtor e destrutor</h3>

<p>O m√©todo construtor, chamado de <code>__construct</code>, √© executado quando criamos um novo objeto (utilizando <code>new</code>). Normalmente utilizamos o m√©todo construtor para receber depend√™ncias e inicializar as propriedades.</p>

<p>J√° o m√©todo destrutor, <code>__destruct</code>, √© executado quando um objeto sai de escopo ou quando o objeto √© passado para a fun√ß√£o <code>unset</code>. Normalmente ele √© utilizado para liberar recursos que tenham sido alocados no construtor, como fechar arquivos, conex√µes, etc. Com a natureza <em>stateless</em> do PHP, esse m√©todo n√£o √© t√£o utilizado.</p>

<h3 id="convers%C3%B5es">Convers√µes</h3>

<p>Em alguns cen√°rios n√≥s podemos querer utilizar nossos objetos como um tipo diferente. Se quisermos usar nosso objeto como uma string, por exemplo, podemos utilizar o m√©todo <code>__toString</code>. O que n√≥s retornarmos nesse m√©todo √© utilizado se nosso objeto for convertido para string de forma impl√≠cita ou expl√≠cita. Objetos de resposta HTTP, por exemplo, geralmente implementam esse m√©todo retornando o corpo da resposta.</p>

<pre><code class="php">&lt;?php

class Response
{
    private string $body;
    // Outras propriedades

    public function __toString() : string
    {
        return $this-&gt;body;
    }
}

$response = new Response();
// Defini√ß√£o dos valores

echo $response; // Isso usa o objeto como string, logo, chama o __toString
</code></pre>

<p>H√° tamb√©m casos onde queremos utilizar nosso objeto como se ele fosse uma fun√ß√£o. Para isso existe o m√©todo <code>__invoke</code>. Se n√≥s passarmos nosso objeto por par√¢metro em algum lugar que espera um <code>callable</code>, o m√©todo <code>__invoke</code> ser√° executado. Exemplo:</p>

<pre><code class="php">&lt;?php

class ControllerDeExemplo
{
    public function __invoke(int $parametro1, string $parametro2): void
    {
        // Execu√ß√£o de exemplo
    }
}

$controller = new ControllerDeExemplo();

$controller(1, 'Teste'); // Isso executar√° o m√©todo __invoke
</code></pre>

<h3 id="chamada-de-m%C3%A9todos">Chamada de m√©todos</h3>

<p>Assim como n√≥s podemos acessar propriedades inexistentes (ou inacess√≠veis) com m√©todos m√°gicos, o mesmo serve para m√©todos. Se voc√™ tentar chamar um m√©todo n√£o existente de um objeto, o m√©todo <code>__call</code> ser√° executado, recebendo o nome do m√©todo que tentou ser executado e todos os seus par√¢metros. J√° o <code>__callStatic</code> funciona da mesma forma, mas caso um m√©todo <strong>est√°tico</strong> inexistente seja chamado a partir de uma classe.</p>

<pre><code class="php">class Exemplo
{
    public function __call(string $name, array $arguments): mixed
    {
        /*
         * $name possui o nome do m√©todo inexistente que foi executado,
         * enquanto $arguments possui todos os par√¢metros que foram passados para esse m√©todo
         */
    }

    public static function __callStatic(string $name, array $arguments): mixed
    {
        // Equivalente est√°tico ao __call
    }
}

// Chama implicitamente Exemplo::__callStatic('qualquerCoisa', [1, 2]):
Exemplo::qualquerCoisa(1, 2);

$objeto = new Exemplo();

// Chama implicitamente $objeto-&gt;__call('qualquerCoisa', [1, 2]):
$objeto-&gt;qualquerCoisa(1, 2);
</code></pre>

<h3 id="restante-dos-m%C3%A9todos">Restante dos m√©todos</h3>

<p>Para que esse post n√£o fique ainda maior, vou deixar a seguir uma lista dos demais m√©todos m√°gicos com uma breve descri√ß√£o, mas caso voc√™ queira ver mais exemplos e detalhes, pode conferir a <a href="https://www.php.net/manual/en/language.oop5.magic.php">documenta√ß√£o do PHP</a>.</p>

<ul>
<li><code>__isset</code>: M√©todo executado caso passemos alguma propriedade inacess√≠vel do nosso objeto para a fun√ß√£o <code>isset</code> ou <code>empty</code>;</li>
<li><code>__unset</code>: M√©todo executado caso passemos alguma propriedade inacess√≠vel do nosso objeto para a fun√ß√£o <code>unset</code>;</li>
<li><code>__sleep</code>: Ao chamar a fun√ß√£o <code>serialize</code> passando nosso objeto, esse m√©todo √© executado <strong>antes</strong> da serializa√ß√£o. Seu retorno deve ser um array contendo os nomes das propriedades do objeto em quest√£o que ser√£o serializadas. Normalmente √© utilizado para remover propriedades que n√£o devem ser serializadas com conex√µes com o banco, arquivos abertos, etc;</li>
<li><code>__wakeup</code>: Esse m√©todo n√£o recebe par√¢metros e √© executado <strong>ap√≥s</strong> um dado ser desserializado e o objeto ser criado. Esse m√©todo geralmente reconstr√≥i os recursos como conex√µes com o banco;</li>
<li><code>__serialize</code>: Similar ao <code>__sleep</code>. Se ambos estiverem definidos, apenas <code>__serialize</code> √© chamado e <code>__sleep</code> √© ignorado. A diferen√ßa √© que o <code>__serialize</code> deve retornar um array associativo que ser√° serializado ao inv√©s de retornar os nomes das propriedades do objeto;</li>
<li><code>__unserialize</code>: Similar ao <code>__wakeup</code>. Se ambos estiverem definidos, apenas <code>__unserialize</code> √© chamado e <code>__wakeup</code> √© ignorado. <code>__unserialize</code> recebe por par√¢metro o array que foi serializado e com isso, deve reconstruir o objeto;</li>
<li><code>static __set_state</code>: Esse m√©todo √© o mais raro. Ele √© utilizado para criar um objeto da classe em quest√£o a partir da fun√ß√£o <code>var_export</code>;</li>
<li><code>__clone</code>: M√©todo chamado quando um clone de um objeto √© criado. <code>$this</code> nesse m√©todo vai se referir ao novo objeto criado. Normalmente esse m√©todo √© definido para evitar <em>shallow copies</em> e realizar os clones de todas as propriedades tamb√©m;</li>
<li><code>__debugInfo</code>: O retorno desse m√©todo deve conter os dados que ser√£o exibidos pela fun√ß√£o <code>var_dump</code>. Geralmente √© um array associativo;</li>
</ul>

<h2 id="conclus%C3%A3o">Conclus√£o</h2>

<p>O PHP possui um grande n√∫mero de m√©todos m√°gicos. Alguns s√£o bastante f√°ceis de entender como <code>__get</code>, <code>__set</code> e <code>__call</code>, enquanto outros s√£o mais confusos como as diferen√ßas entre <code>__sleep</code> e <code>__serialize</code>. H√° ainda aqueles bem pouco usados como o <code>__set_state</code>.</p>

<p>Lembrar de todos os m√©todos (e suas assinaturas) e o que cada um deles faz n√£o √© necess√°rio, mas √© importante saber da exist√™ncia deles para saber o que pesquisar quando for necess√°rio.</p>

<p>Se quiser aprender mais sobre PHP e sobre tecnologia em geral, vou deixar aqui um <a href="https://tidd.ly/4d42Myb">cupom de 15% de desconto na Alura</a>, plataforma onde eu gravei in√∫meros cursos.</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Como remover acentos de palavras com PHP]]></title>
            <link href="https://dias.dev/2023-08-01-como-remover-acentos-de-palavras-com-php/"/>
            <updated>2023-08-01T00:00:00+00:00</updated>
            <id>https://dias.dev/2023-08-01-como-remover-acentos-de-palavras-com-php/</id>
            <content type="html"><![CDATA[<p><em>Edit: <a href="https://www.linkedin.com/feed/update/urn:li:activity:7092531957842026499?commentUrn=urn%3Ali%3Acomment%3A%28activity%3A7092531957842026499%2C7092591873462038528%29">Neste coment√°rio</a> o Wanderson me apontou outra solu√ß√£o para resolver o mesmo problema, ent√£o estou adicionando-a ao in√≠cio do post.</em></p>

<h2 id="extens%C3%A3o-iconv">Extens√£o iconv</h2>

<pre><code class="php">&lt;?php

$string = '√É√©√Ø√≤√ª';
echo iconv('UTF-8', 'ASCII//TRANSLIT', $string); // Exibe: Aeiou
</code></pre>

<p>O c√≥digo PHP acima remove os acentos, logo, o texto <code>√É√©√Ø√≤√ª</code> vai se tornar <code>Aeiou</code>. Esse trabalho √© realizado pela <a href="/2022-02-13-extensoes-php/">extens√£o</a> <code>iconv</code> que vem instalada por padr√£o no PHP. Ela permite a convers√£o entre <em><a href="/2021-08-24-charsets-e-encodings-como-strings-funcionam/">encodings</a></em>.</p>

<p>Ao converter uma string para <em>ASCII</em>, n√≥s podemos escolher ignorar os caracteres n√£o existentes nesse <em>charset</em> ou realizar uma translitera√ß√£o (mapeamento) dos caracteres que n√£o fazem parte da tabela para o mais pr√≥ximo poss√≠vel. Para isso, adicionamos o sufixo <code>//TRANSLIT</code> ao segundo par√¢metro. Isso transforma, por exemplo, o caractere <code>√É</code> em <code>A</code>.</p>

<p>Essa abordagem vai funcionar na maioria dos cen√°rios, mas h√° algumas observa√ß√µes que devem ser consideradas.</p>

<h3 id="locale">Locale</h3>

<p>A convers√£o com <code>iconv</code> n√£o vai funcionar caso a categoria <code>LC_CTYPE</code> do <code>locale</code> esteja definida como <code>C</code> ou <code>POSIX</code>.</p>

<p>Exemplo:</p>

<pre><code class="php">&lt;?php

setlocale(LC_CTYPE, 'POSIX');
echo iconv('UTF-8', 'ASCII//TRANSLIT', '√É√©√Ø√≤√ª'); // Exibe ?????
</code></pre>

<h3 id="implementa%C3%A7%C3%A3o-do-iconv">Implementa√ß√£o do iconv</h3>

<p>Outro problema √© que o sufixo <code>//TRANSLIT</code> tem seu funcionamento dependente da implementa√ß√£o do <code>iconv</code> que seu sistema operacional possui. Algumas implementa√ß√µes s√£o conhecidas por ignorar <code>//TRANSLIT</code>, ent√£o a convers√£o provavelmente falhar√°.</p>

<p>Para esses cen√°rios uma de suas op√ß√µes √© instalar outra implementa√ß√£o do <code>iconv</code>. Voc√™ pode verificar qual a implementa√ß√£o do seu sistema operacional lendo o conte√∫do da constante <code>ICONV_IMPL</code>. A implementa√ß√£o <code>glibc</code> √© segura e funciona conforme exemplificado nesse post.</p>

<h3 id="solu%C3%A7%C3%A3o">Solu√ß√£o</h3>

<p>Caso voc√™, por algum motivo, n√£o possa alterar o <code>locale</code> em seu servidor e o padr√£o for <code>C</code> ou <code>POSIX</code>, a solu√ß√£o descrita n√£o √© v√°lida para seu caso. Se sua implementa√ß√£o do <code>iconv</code> no sistema operacional for uma incompat√≠vel com <code>//TRANSLIT</code> e voc√™ n√£o puder ou preferir n√£o instalar outra implementa√ß√£o, essa dica tamb√©m n√£o foi para voc√™.</p>

<p>Uma solu√ß√£o para os problemas previamente citados √© utilizar outra abordagem, com outra extens√£o. Para estes raros cen√°rios, deixo a seguir o conte√∫do original desse post, onde mostro como utilizar a normaliza√ß√£o de strings com PHP para remover acentos.</p>

<h2 id="post-original">Post original</h2>

<p>Remover acentos de palavras usando PHP √© uma tarefa bastante comum, principalmente para gerar <em>slugs</em> ou links amig√°veis. Nesse texto n√≥s vamos aprender a utilizar a extens√£o <em>intl</em> para realizar essa tarefa com 2 simples linhas de c√≥digo.</p>

<h3 id="tl%3Bdr-me-mostre-logo-o-c%C3%B3digo">TL;DR Me mostre logo o c√≥digo</h3>

<pre><code class="php">&lt;?php

$string = '√É√©√Ø√≤√ª';

$normalized = Normalizer::normalize($string, Normalizer::NFD);
echo preg_replace('/[\x{0300}-\x{036F}]/u', '', $normalized); // Exibe: Aeiou

</code></pre>

<p>O c√≥digo PHP acima remove os acentos, logo, o texto <code>√É√©√Ø√≤√ª</code> vai se tornar <code>Aeiou</code>. Agora vamos entender o que o c√≥digo faz.</p>

<h2 id="normaliza%C3%A7%C3%A3o-de-texto">Normaliza√ß√£o de texto</h2>

<p>A primeira parte desse simples algoritmo consiste em <strong>normalizar</strong> o texto. Normalizar um texto consiste em transform√°-lo de alguma forma pr√©-determinada, seguindo algumas normas ou regras.</p>

<p>O c√≥digo acima pega a string <code>"√É√©√Ø√≤√ª"</code> e a normaliza utilizando a forma de normaliza√ß√£o D (<code>NFD</code>), conhecida tamb√©m como decomposi√ß√£o can√¥nica (<em>Canonical Decomposition</em>). Essa regra consiste em separar os caracteres de acentua√ß√£o dos demais, ou seja, caracteres como crase (&#96;) ou til (~) s√£o separados das letras. O caractere <code>√É</code>, por exemplo, se torna <code>A~</code>.</p>

<p>Essa forma de normaliza√ß√£o foi definida e nomeada pelo <a href="/2021-08-24-charsets-e-encodings-como-strings-funcionam/"><em>Unicode Consortium</em></a>, mas n√£o √© a √∫nica. Voc√™ pode conferir mais detalhes sobre cada uma das "regras" no site oficial: <a href="https://unicode.org/reports/tr15/">https://unicode.org/reports/tr15/</a>.</p>

<h3 id="extens%C3%A3o-php">Extens√£o PHP</h3>

<p>Tendo entendido o que √© normalizar um texto, como √© poss√≠vel atingir esse objetivo com PHP? Atrav√©s de uma <a href="/2022-02-13-extensoes-php/">extens√£o</a> externa chamada <code>intl</code>.</p>

<p>Essa extens√£o fornece acesso a uma biblioteca famosa chamada <em>ICU (International Components for Unicode)</em>, que traz diversas opera√ß√µes referentes a <em>locale</em>. O termo <em>locale</em> em ingl√™s n√£o tem uma boa tradu√ß√£o (pelo menos eu n√£o conhe√ßo), mas basicamente se refere a informa√ß√µes como formatos de data e hora, moedas, textos, etc. Repare que n√£o √© apenas relacionado ao idioma, mas tudo que envolve formatos internacionais.</p>

<p>A extens√£o <code>intl</code> traz, dentre v√°rias outras, a classe <code>Normalizer</code> que tem como √∫nico prop√≥sito realizar a normaliza√ß√£o de textos. Com isso, o c√≥digo a seguir separa cada caractere de seu respectivo acento, caso haja algum:</p>

<pre><code class="php">$normalized = Normalizer::normalize('√É√©√Ø√≤√ª', Normalizer::NFD);
</code></pre>

<p>Isso vai devolver uma string com o conte√∫do semelhante ao seguinte: <code>A~e¬¥i¬®o`u^</code>. "Semelhante" porque os caracteres individuais e separados de acentos (como o <code>^</code>) n√£o s√£o os mesmos que vemos quando s√£o adicionados a uma letra, ent√£o o real caractere n√£o vai ser vis√≠vel de forma individual ao tentar exibir a string resultante. Mas n√≥s n√£o queremos exibir a string normalizada, e sim manipul√°-la. E √© justamente sobre essa manipula√ß√£o que vamos falar agora.</p>

<h2 id="express%C3%A3o-regular">Express√£o regular</h2>

<p>Ap√≥s separar os caracteres de seus respectivos acentos, a tarefa de remover os acentos se torna bastante simples. Basta utilizarmos uma express√£o regular (a temida <em>regex</em>) para remover qualquer caractere que seja um acento. Os caracteres com c√≥digo <em>Unicode</em> entre U+0300 e U+036F s√£o acentos, logo, podemos remov√™-los com o seguinte c√≥digo:</p>

<pre><code class="php">preg_replace('/[\x{0300}-\x{036F}]/u', '', $normalized);
</code></pre>

<p>O modificador <code>/u</code>, ao final da <em>regex</em>, indica ao PHP que estamos trabalhando com UTF-8 nessa express√£o regular, o que nos permite utilizar <code>\x</code>, que √© o que nos d√° o poder de identificar os caracteres <em>Unicode</em>.</p>

<p>Isso garante n√£o haver altera√ß√£o da string original, mantendo n√∫meros, caracteres especiais, etc. Claro que voc√™ pode mudar a express√£o regular para remover tudo que n√£o sejam letras, n√∫meros e espa√ßos, por exemplo. O c√≥digo ficaria assim:</p>

<pre><code class="php">preg_replace('/[^a-zA-Z0-9\s]/', '', $normalized);
</code></pre>

<p>O c√≥digo acima √© geralmente utilizado para gerar URLs amig√°veis, ou os famosos <em>slugs</em>. Mas ap√≥s entender o processo de normaliza√ß√£o, modificar a <em>regex</em> para atingir objetivos diferentes e mais espec√≠ficos se torna uma tarefa trivial.</p>

<h2 id="conclus%C3%A3o">Conclus√£o</h2>

<p>Embora seja uma tarefa bastante comum, remover acentos com PHP pode n√£o parecer t√£o f√°cil quando uma r√°pida pesquisa √© feita na internet. Diversas listas enormes de caracteres a serem substitu√≠dos s√£o sugeridas, dentre outras pr√°ticas ainda mais "question√°veis".</p>

<p>O simples uso de uma extens√£o apropriada faz com que essa complexa tarefa seja imensamente facilitada. Recomendo acessar os links que deixei durante o post como refer√™ncia para se aprofundar em cada um dos assuntos aqui abordados.</p>

<p>J√° no link a seguir eu deixo um <a href="https://tidd.ly/4d42Myb">cupom de 15% de desconto</a> para voc√™ assinar a Alura, plataforma onde h√° cursos completos (alguns comigo, inclusive) sobre manipula√ß√£o de strings (dentre v√°rios outros assuntos de tecnologia).</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Programa√ß√£o ass√≠ncrona, concorrente e paralela]]></title>
            <link href="https://dias.dev/2023-07-18-programacao-concorrente-assincrona-e-paralela/"/>
            <updated>2023-07-18T00:00:00+00:00</updated>
            <id>https://dias.dev/2023-07-18-programacao-concorrente-assincrona-e-paralela/</id>
            <content type="html"><![CDATA[<p>Existem diversas defini√ß√µes para os termos programa√ß√£o ass√≠ncrona e programa√ß√£o concorrente, enquanto programa√ß√£o paralela seja um consenso. Vamos tentar, neste texto, definir de forma mais objetiva e pr√°tica o que esses termos significam e quando n√≥s devemos usar cada uma dessas pr√°ticas.</p>

<h2 id="programa%C3%A7%C3%A3o-ass%C3%ADncrona">Programa√ß√£o ass√≠ncrona</h2>

<p>O termo programa√ß√£o ass√≠ncrona pode se referir a mais de uma coisa na computa√ß√£o e permeia o mundo da programa√ß√£o h√° muito tempo, mas houve um aumento no uso dessas palavras desde a vinda das <em>Promises</em> para o <em>JavaScript</em>.</p>

<h3 id="rede-e-comunica%C3%A7%C3%A3o">Rede e comunica√ß√£o</h3>

<p>Quando programa√ß√£o ass√≠ncrona √© citada no assunto sobre comunica√ß√£o em rede, isso significa que as partes envolvidas na troca de mensagens lidar√£o com essas mensagens quando for poss√≠vel e n√£o necessariamente imediatamente.</p>

<p>Essa defini√ß√£o parece bastante vaga e nada clara, n√£o √© mesmo? Ent√£o vamos tentar usar um exemplo pr√°tico, usando uma linguagem bastante comum na <em>Web</em> (embora esse conceito seja v√°lido para qualquer ecossistema). Quando voc√™ usa a fun√ß√£o <code>fetch</code> do <em>JavaScript</em>, a requisi√ß√£o <em>HTTP</em> ser√° feita, mas a resposta, quando dispon√≠vel, n√£o vai ser tratada imediatamente. O motor de execu√ß√£o do <em>JavaScript</em> vai executar o c√≥digo que lida com essa resposta o mais r√°pido poss√≠vel, mas n√£o ser√° de forma s√≠ncrona ou imediata.</p>

<p>O que isso quer dizer? Ao receber a resposta, o motor de execu√ß√£o do <em>JavaScript</em> vai colocar a fun√ß√£o que lida com essa resposta em uma fila e, assim que poss√≠vel, essa fun√ß√£o ser√° executada. Enquanto a resposta n√£o est√° dispon√≠vel, ou at√© mesmo ap√≥s a resposta chegar, mas antes da fun√ß√£o que lida com ela ter sua vez de ser rodada, outros peda√ßos de c√≥digo podem ser executados.</p>

<p>No exemplo a seguir, usamos <em>Promises</em> para informar qual √© a fun√ß√£o que ser√° adicionada na fila quando a resposta estiver pronta, e at√© l√°, outras linhas de c√≥digo v√£o sendo executadas.</p>

<pre><code class="js">fetch('https://example.com')
  .then(res =&gt; {
    // Essa fun√ß√£o pode lidar com a resposta
  });

// Aqui, outros c√≥digos podem ser executados
// antes mesmo da fun√ß√£o que lida com a resposta
console.log("Outras fun√ß√µes");
</code></pre>

<p>Essa "fila de fun√ß√µes" e delega√ß√£o de execu√ß√£o para um momento futuro √© poss√≠vel gra√ßas a um padr√£o chamado <em>Event Loop</em>. O uso de um <em>Event Loop</em> permite que voc√™ alcance a programa√ß√£o ass√≠ncrona, ou usando um termo menos confuso, <strong>I/O n√£o bloqueante</strong>.</p>

<p>O termo I/O n√£o bloqueante √© muito importante porque √© o que realmente queremos dizer quando nos referimos a programa√ß√£o ass√≠ncrona no contexto de comunica√ß√£o em rede. N√≥s estamos realizando alguma opera√ß√£o de I/O (seja comunica√ß√£o em rede, como no exemplo, ou outras coisas como leitura de arquivos, etc) de forma que o processador n√£o precise ficar esperando pela resposta dessa opera√ß√£o.</p>

<p>H√° outro <a href="/2020-09-16-php-assincrono-de-forma-nativa/">texto aqui no blog</a> explicando como I/O n√£o bloqueante pode ser implementado "na unha" com PHP. Ferramentas como <em>ReactPHP</em> ou <em>Swoole</em> trazem implementa√ß√µes de <em>Event Loops</em> para o mundo PHP, mas bibliotecas mais "simples" como cURL j√° possuem I/O n√£o bloqueante, permitindo a famosa programa√ß√£o ass√≠ncrona.</p>

<h3 id="arquitetura-de-sistemas">Arquitetura de sistemas</h3>

<p>Outro tema que pode receber men√ß√µes do termo programa√ß√£o ass√≠ncrona √© o de <strong>Arquitetura de sistemas</strong>, ou <em>System Design</em>.</p>

<p>Aqui eu vou partir direto para um exemplo para tentar explicar a ideia. Em uma aplica√ß√£o <em>Web</em>, podemos ter tarefas demoradas como gera√ß√£o de relat√≥rios, envios de e-mails, etc. Essas tarefas, se feitas durante uma requisi√ß√£o, podem fazer com que o tempo de resposta seja bem alto, prendendo o cliente <em>HTTP</em> por mais tempo do que necess√°rio.</p>

<p>Uma solu√ß√£o para esse caso √© salvar as tarefas que voc√™ quer executar em uma fila de mensagens, e ter outro processo executando em plano de fundo essas tarefas, de forma que a resposta <em>HTTP</em> possa ser entregue rapidamente ao usu√°rio e as tarefas demoradas ser√£o feitas no futuro, logo, de forma ass√≠ncrona.</p>

<p>O motivo de eu fazer essa explica√ß√£o de forma mais simples e resumida √© que eu j√° gravei um v√≠deo explicando a ideia de processamento ass√≠ncrono e <strong>mensageria</strong>. Voc√™ pode conferir a ideia de programa√ß√£o ass√≠ncrona nesse contexto no v√≠deo abaixo.</p>

<p><lite-youtube videoid="Rx80QRZRgHc">
    <a href="https://youtube.com/watch?v=Rx80QRZRgHc" class="lty-playbtn" title="Reproduzir v√≠deo">
        <span class="lyt-visually-hidden">
            Processamento ass√≠ncrono com mensageria - Escalando aplica√ß√µes Web | Dias de Dev
        </span>
    </a>
</lite-youtube></p>

<h2 id="programa%C3%A7%C3%A3o-paralela">Programa√ß√£o paralela</h2>

<p>Agora vamos √† explica√ß√£o do termo onde h√° um maior consenso: programa√ß√£o paralela.</p>

<p>Como o pr√≥prio nome deixa claro, programa√ß√£o paralela √© o que permite a execu√ß√£o de mais de um peda√ßo de c√≥digo <strong>ao mesmo tempo</strong>, ou seja, de forma paralela. Nos dias atuais, a √™nfase precisa ser nas palavras <strong>ao mesmo tempo</strong> pois √© poss√≠vel ter uma fun√ß√£o sendo executada em cada n√∫cleo da CPU, por exemplo, ou at√© mesmo em CPUs diferentes.</p>

<h3 id="multithreading">Multithreading</h3>

<p>Uma das principais formas de atingir a programa√ß√£o paralela √© criando <em>Threads</em> (n√£o, n√£o √© o clone do Twitter que a Meta criou hahaha). Uma <em>thread</em> √© uma linha de execu√ß√£o de um programa, que pode ser executada em um n√∫cleo da sua CPU (seu processador). Sendo assim, se eu crio m√∫ltiplas threads, eu posso executar fun√ß√µes ao mesmo tempo em n√∫cleos diferentes do meu processador.</p>

<p>Cada linguagem pode (ou n√£o) fornecer uma forma de voc√™ criar <em>threads</em>. Em PHP, por exemplo, voc√™ pode usar a <a href="/2022-02-13-extensoes-php/">extens√£o</a> parallel para atingir esse objetivo. A seguir h√° um exemplo de como ter uma <em>thread</em> adicional em seu programa para executar tarefas em paralelo:</p>

<pre><code class="php">&lt;?php

use function \parallel\run;

run(function(){
    echo "Esse c√≥digo √© executado em uma thread separada" . PHP_EOL;
});

echo "J√° esse c√≥digo √© executado na thread principal" . PHP_EOL;
</code></pre>

<h3 id="multiprocessing">Multiprocessing</h3>

<p>Outra forma muito comum de atingir a programa√ß√£o paralela √© a cria√ß√£o de processos ao inv√©s de <em>threads</em>. Um processo √© basicamente um programa em execu√ß√£o no seu sistema operacional. Todo processo possui pelo menos uma <em>thread</em>. Ao criar um novo processo, como h√° pelo menos uma <em>thread</em> criada tamb√©m, se torna poss√≠vel a execu√ß√£o paralela novamente, por√©m h√° algumas diferen√ßas importantes.</p>

<p>Todo processo no sistema operacional possui um endere√ßo de mem√≥ria separado. Ao criar <em>threads</em>, esse endere√ßo de mem√≥ria √© compartilhado (j√° que as <em>threads</em> fazem parte do mesmo processo), logo, compartilhar dados entre threads √© uma tarefa f√°cil. Agora, ao criar um novo processo, um novo endere√ßo de mem√≥ria √© separado. Compartilhar mem√≥ria entre processos √© uma tarefa mais trabalhosa.</p>

<p>Para criar um novo processo, h√° uma fun√ß√£o em <code>C</code> chamada <code>fork</code>, que clona o processo atual e continua a execu√ß√£o no processo filho a partir da linha seguinte. Exemplo.:</p>

<pre><code class="c">#include &lt;stdio.h&gt;
#include &lt;unistd.h&gt;

int main()
{
    printf("At√© aqui, apenas o processo 'pai' √© executado\n");
    fork();

    printf("Essa linha ser√° executada 2 vezes. Uma pelo processo pai e outra pelo processo filho\n");

    return 0;
}
</code></pre>

<h2 id="programa%C3%A7%C3%A3o-concorrente">Programa√ß√£o concorrente</h2>

<p>Agora que entendemos (mesmo que por alto) os conceitos de programa√ß√£o ass√≠ncrona e programa√ß√£o paralela, vamos ao termo mais "dif√≠cil" de definir: programa√ß√£o concorrente.</p>

<p>O termo programa√ß√£o concorrente possui "problemas" em sua defini√ß√£o porque h√° v√°rios autores que usam essas palavras para definir coisas bem diferentes. Uma das defini√ß√µes poss√≠veis, inclusive, √© que programa√ß√£o concorrente √© o conceito explicado no texto de programa√ß√£o ass√≠ncrona na comunica√ß√£o em rede, ou seja, I/O n√£o bloqueante.</p>

<p>Outros autores definem programa√ß√£o concorrente como qualquer t√©cnica de programa√ß√£o que leva √† concorr√™ncia entre recursos. Por exemplo, se voc√™ possui duas fun√ß√µes paralelas que acessam o mesmo arquivo e por isso ambas n√£o podem ser executadas simultaneamente, as t√©cnicas de programa√ß√£o concorrente (como <em>mutex</em>) s√£o o que permitem a execu√ß√£o do programa sem erros.</p>

<p>H√° ainda outros autores que usam programa√ß√£o concorrente como sin√¥nimo de programa√ß√£o paralela, j√° que diferentes <em>threads</em> ou processos est√£o concorrendo pelo processamento da CPU.</p>

<p>Quem j√° me acompanha h√° algum tempo sabe que eu sou uma pessoa pr√°tica e pragm√°tica, ent√£o para mim √© muito simples: sempre que algu√©m se refere a programa√ß√£o concorrente, se pelo contexto n√£o √© √≥bvio o que ela quer dizer, eu pergunto e pe√ßo um exemplo. Dessa forma consigo entender exatamente o que a pessoa quer dizer e posso prosseguir com a conversa.</p>

<h2 id="quando-usar-cada-uma%3F">Quando usar cada uma?</h2>

<p>Ent√£o, resumindo, quando o assunto √© realmente c√≥digo, n√≥s temos I/O n√£o bloqueante e programa√ß√£o paralela. Essas duas t√©cnicas permitem, de forma muito diferente, executar c√≥digo que pode aumentar a performance de nossa aplica√ß√£o, por exemplo. Ent√£o quando devo usar cada uma dessas t√©cnicas?</p>

<p>Acredito que pelo uso do termo I/O n√£o bloqueante, a resposta j√° tenha ficado clara. Sempre que a opera√ß√£o demorada envolver I/O, sua resposta estar√° na programa√ß√£o ass√≠ncrona. Com isso voc√™ consegue executar tarefas enquanto opera√ß√µes como chamadas de rede e leitura de arquivos est√£o sendo realizadas, mas sem o custo adicional de criar novas <em>threads</em> ou processos.</p>

<p>J√° a programa√ß√£o paralela √© usada quando voc√™ possui tarefas demoradas que demandam computa√ß√£o intensa e muito uso da CPU. C√°lculos matem√°ticos complexos, manipula√ß√µes de imagem e v√≠deo s√£o alguns exemplos onde programa√ß√£o paralela se faz necess√°ria.</p>

<p>No mundo <em>Web</em> √© muito mais comum voc√™ precisar de I/O n√£o bloqueante (ou programa√ß√£o ass√≠ncrona), por isso o <em>JavaScript</em> possui <em>Promises</em> nativamente e ferramentas como <em>ReactPHP</em> e <em>Swoole</em> existem no ecossistema PHP para trazerem implementa√ß√µes de <em>Event Loops</em>. J√° ao realizar o processamento ass√≠ncrono usando mensageria, suas tarefas de plano de fundo podem realizar processamentos pesados, onde talvez o uso de programa√ß√£o paralela possa ser vantajoso.</p>

<h2 id="refer%C3%AAncias">Refer√™ncias</h2>

<p>Durante o texto eu deixei alguns links que podem ajudar a entender alguns conceitos espec√≠ficos, mas quero deixar aqui mais duas refer√™ncias muito importantes. A seguir possui um dos primeiros v√≠deos que gravei para meu canal, explicando justamente a diferen√ßa entre os termos e quando n√≥s devemos usar cada uma dessas t√©cnicas:</p>

<p><lite-youtube videoid="zLfXPSeCkB8">
    <a href="https://youtube.com/watch?v=zLfXPSeCkB8" class="lty-playbtn" title="Reproduzir v√≠deo">
        <span class="lyt-visually-hidden">
            Programa√ß√£o ass√≠ncrona vs Programa√ß√£o paralela - Entenda a diferen√ßa
        </span>
    </a>
</lite-youtube></p>

<p>J√° no link a seguir eu deixo um <a href="https://tidd.ly/4d42Myb">cupom de 15% de desconto</a> para voc√™ assinar a Alura, plataforma onde h√° cursos completos (alguns comigo, inclusive) sobre programa√ß√£o paralela e programa√ß√£o ass√≠ncrona (dentre v√°rios outros assuntos de tecnologia).</p>

<h2 id="conclus%C3%A3o">Conclus√£o</h2>

<p>Programa√ß√£o paralela √© o que permite a execu√ß√£o simult√¢nea de mais de uma por√ß√£o de c√≥digo, podendo cada uma estar em um n√∫cleo da CPU, por exemplo. Essa t√©cnica √© muito √∫til quando temos tarefas intensas em processamento como c√°lculos complexos e manipula√ß√£o de imagens. J√° a programa√ß√£o ass√≠ncrona √© extremamente importante ao lidar com entrada e sa√≠da (I/O), j√° que permite que executemos tarefas sem bloquear a CPU esperando por respostas de I/O. Programa√ß√£o concorrente √© um termo que pode ser definido de diversas formas, onde cada autor descreve essa ideia de forma diferente, indo desde um sin√¥nimo para programa√ß√£o ass√≠ncrona at√© t√©cnicas de compartilhamento de recursos em programa√ß√£o paralela.</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Strings multibyte: o que s√£o e por que voc√™ precisa da extens√£o mbstring do PHP]]></title>
            <link href="https://dias.dev/2023-03-21-strings-multibyte-php-mbstring/"/>
            <updated>2023-03-21T00:00:00+00:00</updated>
            <id>https://dias.dev/2023-03-21-strings-multibyte-php-mbstring/</id>
            <content type="html"><![CDATA[<p><em>Strings multibyte</em> s√£o textos que possuem alguns caracteres que demandam mais de um <em>byte</em> para serem representados. H√° um post aqui no blog onde n√≥s falamos sobre <a href="/2021-08-24-charsets-e-encodings-como-strings-funcionam/">Charsets e Encodings: Como strings funcionam</a>. Agora n√≥s vamos entender como lidar com <em>strings multibyte</em> em PHP usando a <a href="/2022-02-13-extensoes-php/">extens√£o</a> <code>mbstring</code>.</p>

<h2 id="opera%C3%A7%C3%B5es-em-strings">Opera√ß√µes em strings</h2>

<p>Quando trabalhamos com textos, √© bastante comum precisarmos realizar algumas opera√ß√µes. Transformar todas as letras em mai√∫sculas ou min√∫sculas, por exemplo, √© uma opera√ß√£o corriqueira. At√© opera√ß√µes mais simples como contar o n√∫mero de caracteres podem nos trazer algumas dores de cabe√ßa se estivermos trabalhando com <em>strings multibyte</em>.</p>

<p>Um exemplo bastante simples:</p>

<pre><code class="php">&lt;?php

echo strlen('Ol√°'); // Exibe 4
echo strtoupper('ol√°'); // Exibe "OL√°"
</code></pre>

<h2 id="strings-multibyte">Strings multibyte</h2>

<p>Como foi exposto logo na introdu√ß√£o do post, uma <em>string multibyte</em> √© um texto que possui caracteres que demandam mais de um <em>byte</em> para serem representados. Caracteres com acento s√£o um √≥timo exemplo desse cen√°rio. √â necess√°rio mais de um <em>byte</em> para represent√°-los, j√° que em um √∫nico <em>byte</em> n√≥s conseguimos representar apenas 256 caracteres, que s√£o, n√£o coincidentemente, os caracteres da tabela <em>ASCII</em>.</p>

<p>As fun√ß√µes padr√£o de <em>strings</em> do PHP lidam assumindo que cada caractere da <em>string</em> possui um <em>byte</em>, por isso a contagem de caracteres √© inv√°lida com <code>strlen</code> e por isso que <strong>fun√ß√µes como <code>strtoupper</code> ou <code>strtolower</code> n√£o conseguem modificar os caracteres acentuados</strong>.</p>

<h2 id="extens%C3%A3o-mbstring">Extens√£o mbstring</h2>

<p>Como n√≥s cotidianamente trabalhamos com <em>strings</em> que contenham caracteres fora da tabela <em>ASCII</em>, obviamente o PHP n√£o nos deixaria desamparados nessa situa√ß√£o. Para realizar opera√ß√µes em <em>strings multibyte</em> n√≥s podemos usar a extens√£o <code>mbstring</code>. N√≥s j√° falamos sobre <a href="/2022-02-13-extensoes-php/">extens√µes PHP</a> aqui no blog, ent√£o vou partir do princ√≠pio que voc√™ j√° possui familiaridade com o assunto.</p>

<p>A extens√£o <code>mbstring</code> nos fornece diversas fun√ß√µes que possibilitam a manipula√ß√£o de <em>strings multibyte</em>, indo de opera√ß√µes simples como contar o n√∫mero de caracteres de uma string at√© opera√ß√µes mais complexas como <strong>converter o encoding de uma string</strong>.</p>

<p>A maioria das fun√ß√µes "padr√£o" de <em>strings</em> do PHP possui uma contraparte na <code>mbstring</code>, sendo apenas prefixada com <code>mb_</code>. O exemplo de c√≥digo anteriormente exposto que nos gerava o resultado inesperado poderia ser escrito da seguinte forma:</p>

<pre><code class="php">&lt;?php

echo mb_strlen('Ol√°'); // Exibe 3
echo mb_strtoupper('ol√°'); // Exibe "OL√Å"
</code></pre>

<p>Al√©m disso, se eu possuo uma <em>string</em> que est√° no <em>encoding</em> <code>ISO-8859-1</code> ou <code>WINDOWS-1252</code>, eu posso converter facilmente para UTF-8 com o seguinte c√≥digo:</p>

<pre><code class="php"><br />echo mb_convert_encoding('string em ISO-8859-1', 'UTF-8', 'ISO-8859-1');
</code></pre>

<h2 id="%60utf8_encode%60-e-%60utf8_decode%60"><code>utf8_encode</code> e <code>utf8_decode</code></h2>

<p>Quem me acompanha j√° sabe que as fun√ß√µes <code>utf8_encode</code> e <code>utf8_decode</code> ser√£o marcadas como <strong>obsoletas</strong> no PHP 8.2. Quem ainda n√£o sabia disso pode conferir o v√≠deo a seguir:</p>

<p><lite-youtube videoid="al47Lz_SWLc" style="background-image: url('https://i.ytimg.com/vi/al47Lz_SWLc/hqdefault.jpg');">
    <a href="https://youtube.com/watch?v=al47Lz_SWLc" class="lty-playbtn" title="Reproduzir v√≠deo">
        <span class="lyt-visually-hidden">Novidades do PHP 8.2: Descontinua√ß√£o de utf8_encode e utf8_decode | Dias de Dev</span>
    </a>
</lite-youtube></p>

<p>Como foi explicado no v√≠deo, essas fun√ß√µes ser√£o descontinuadas j√° que s√£o confusas e o uso de <code>mbstring</code> √© uma op√ß√£o v√°lida para chegar ao mesmo resultado. A seguir voc√™ pode conferir como seria realizada a convers√£o das <em>strings</em> sem as famosas fun√ß√µes de <code>utf8_</code>:</p>

<pre><code class="php">&lt;?php

// Equivalente a utf8_encode('string em ISO-8859-1');
echo mb_convert_encoding('string em ISO-8859-1', 'UTF-8', 'ISO-8859-1');

// Equivalente a utf8_decode('string em UTF-8');
echo mb_convert_encoding('string em UTF-8', 'ISO-8859-1', 'UTF-8');
</code></pre>

<h2 id="conclus%C3%A3o">Conclus√£o</h2>

<p>Tendo entendido o conceito de <em>strings multibyte</em>, fica bastante claro tanto o papel da extens√£o <code>mbstring</code> quanto v√°rios problemas que n√≥s j√° enfrentamos ao manipular caracteres acentuados, por exemplo.</p>

<p>Se voc√™ quiser aprender mais sobre manipula√ß√µes de strings, encodings, charsets, PHP e mais assuntos relacionados a tecnologia, aqui est√° um <a href="https://tidd.ly/4d42Myb">cupom de desconto</a> para assinar a Alura, plataforma de cursos online onde eu sou o instrutor da maioria dos cursos de PHP.</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Entenda o erro &quot;Cannot modify header information - headers already sent&quot; no PHP]]></title>
            <link href="https://dias.dev/2023-03-07-entenda-o-erro-cannot-modify-header-information-php/"/>
            <updated>2023-03-07T00:00:00+00:00</updated>
            <id>https://dias.dev/2023-03-07-entenda-o-erro-cannot-modify-header-information-php/</id>
            <content type="html"><![CDATA[<p>O famoso erro do PHP com o texto "<em>Cannot modify header information - headers already sent</em>" acontece quando tentamos enviar um cabe√ßalho <em>HTTP</em> ap√≥s j√° termos enviado alguma sa√≠da no corpo da resposta. Nesse post n√≥s vamos entender o que isso tudo significa e como evitar esse problema em seu c√≥digo.</p>

<h2 id="_http_"><em>HTTP</em></h2>

<p><em>HTTP (HyperText Transfer Protocol)</em> √© o protocolo usado na internet, ent√£o sempre que voc√™ acessa um site usando seu navegador, por exemplo, <em>HTTP</em> est√° sendo usado.</p>

<p><em>HTTP</em> √© um protocolo que segue uma arquitetura cliente-servidor, onde h√° duas partes na comunica√ß√£o. De forma super simplificada: voc√™, usando seu navegador, √© o cliente. O site que voc√™ acessa √© o servidor.</p>

<p>Esse protocolo define mensagens de requisi√ß√£o (<em>request</em>) e resposta (<em>response</em>). Quando voc√™ acessa um site, seu navegador faz uma requisi√ß√£o para o servidor, que processa esse pedido e devolve uma resposta. Essas mensagens s√£o divididas em duas grandes partes: <strong>cabe√ßalhos</strong> e <strong>corpo</strong>.</p>

<p>O corpo de uma resposta, por exemplo, √© o conte√∫do que voc√™ v√™ na tela, enquanto cabe√ßalhos possuem informa√ß√µes adicionais como <a href="/2022-09-27-cookies-e-seguranca">cookies</a>, informa√ß√µes de redirecionamento, etc.</p>

<p>Esse √© um resumo bem conciso do protocolo <em>HTTP</em> e de <strong>como a internet funciona</strong>. Ainda sobre esse assunto, caso voc√™ tenha alguma d√∫vida ou queira entender melhor, eu tenho um v√≠deo no YouTube. Voc√™ pode confer√≠-lo antes de continuar lendo esse post:</p>

<p><lite-youtube videoid="B2IWlnJ_dt0" style="background-image: url('https://i.ytimg.com/vi/B2IWlnJ_dt0/hqdefault.jpg');">
  <a href="https://youtube.com/watch?v=B2IWlnJ_dt0" class="lty-playbtn" title="Reproduzir v√≠deo">
    <span class="lyt-visually-hidden">Play Video: Como funciona a Web? - A internet por baixo dos panos | Dias de Dev
</span>
  </a>
</lite-youtube></p>

<h2 id="como-o-php-funciona">Como o PHP funciona</h2>

<p>Entendido como a <em>web</em> funciona, √© hora de entender o que o <strong>PHP</strong> faz na <em>web</em>. Aqui no blog h√° um post sobre <a href="/2021-06-15-como-o-php-funciona-na-web">como o PHP funciona na Web</a> onde voc√™ pode entender como o <strong>PHP</strong> √© executado, mas aqui vou resumir o que voc√™ precisa saber para entender o problema de "<em>Cannot modify header information - headers already sent</em>".</p>

<p>Quando voc√™ exibe algo em PHP, seja atrav√©s de fun√ß√µes como <code>echo</code> ou at√© colocando <em>HTML</em> junto com seu PHP, esse conte√∫do √© enviado no corpo da resposta <em>HTTP</em> que o PHP gera. Isso tudo √© feito de forma transparente para n√≥s desenvolvedores.</p>

<p>Como foi citado no par√°grafo anterior, uma resposta <em>HTTP</em> √© dividida entre <strong>cabe√ßalhos</strong> e <strong>corpo</strong>, sendo que os cabe√ßalhos v√™m antes do corpo. Sendo assim, para n√≥s adicionarmos algo ao corpo da resposta com PHP, os cabe√ßalhos precisam ser montados e enviados antes.</p>

<p>Ent√£o quando voc√™, em um sistema <em>Web</em> feito em PHP, executa um <code>echo</code>, por exemplo, os cabe√ßalhos da resposta <em>HTTP</em> s√£o montados e enviados e depois o corpo √© enviado com o conte√∫do desse <code>echo</code>.</p>

<p>Existem tamb√©m fun√ß√µes no PHP que podem enviar ou modificar cabe√ßalhos. Algumas dessas fun√ß√µes s√£o:</p>

<ul>
<li><code>header</code></li>
<li><code>header_remove</code></li>
<li><code>session_start</code></li>
<li><code>setcookie</code></li>
<li>etc</li>
</ul>

<h2 id="entendendo-o-problema">Entendendo o problema</h2>

<p>Como foi dito logo na introdu√ß√£o desse <em>post</em>, o problema "<em>Cannot modify header information - headers already sent</em>" acontece quando tentamos enviar um cabe√ßalho <em>HTTP</em> ap√≥s j√° termos enviado algo no corpo da resposta.</p>

<p>Isso quer dizer que esse erro acontece quando n√≥s tentamos usar alguma fun√ß√£o que adiciona ou modifica cabe√ßalhos <em>HTTP</em> quando algum conte√∫do j√° foi exibido. Se voc√™ executar o seguinte c√≥digo em um contexto <em>web</em>, ver√° o erro em quest√£o:</p>

<pre><code class="php">&lt;?php

echo 'Corpo da resposta';

header('Location: /url-de-redirecionamento');
</code></pre>

<p>O que n√≥s estamos tentando fazer √© enviar o cabe√ßalho <code>Location</code>, mas o corpo da resposta j√° come√ßou a ser enviado quando n√≥s executamos <code>echo</code>, ou seja, os cabe√ßalhos j√° foram montados e enviados para o cliente.</p>

<h3 id="problema-acontecendo-mesmo-sem-echo-ou-html">Problema acontecendo mesmo sem echo ou HTML</h3>

<p>Voc√™ talvez esteja se perguntando o motivo de j√° ter se deparado com esse erro mesmo sem ter, antes de uma fun√ß√£o <code>header</code>, por exemplo, nenhuma exibi√ß√£o de conte√∫do. Sendo assim, teoricamente, nenhuma resposta deveria ter sido criada e os cabe√ßalhos ainda n√£o teriam sido enviados.</p>

<p>O que acontece √© que n√£o √© incomum que n√≥s geremos uma resposta mesmo sem querer. Se deixarmos espa√ßos em branco antes da <em>tag</em> de abertura do PHP (<code>&lt;?php</code>) ou ap√≥s a <em>tag</em> de fechamento do PHP (<code>?&gt;</code>), esses espa√ßos ser√£o exibidos e com isso os cabe√ßalhos ser√£o enviados. Outro caso <strong>muito comum</strong> √© se nossa aplica√ß√£o gerar algum aviso (os famosos <em>warnings</em> do PHP). Esses avisos sendo exibidos tamb√©m geram uma resposta e com isso, os cabe√ßalhos s√£o enviados.</p>

<h3 id="solu%C3%A7%C3%A3o">Solu√ß√£o</h3>

<p>Para que o erro n√£o ocorra mais, voc√™ precisa se certificar que qualquer fun√ß√£o que adiciona ou modifica cabe√ßalhos <em>HTTP</em> (como <code>header</code> ou <code>session_start</code>) seja executada antes que qualquer coisa seja exibida, mesmo que de forma acidental.</p>

<p>Para isso, voc√™ pode:</p>

<ol>
<li>Identificar e corrigir qualquer problema no c√≥digo que gere algum erro ou aviso;</li>
<li>Mover as fun√ß√µes que adicionam ou modificam cabe√ßalhos <em>HTTP</em> para o in√≠cio da execu√ß√£o de sua aplica√ß√£o, antes de qualquer exibi√ß√£o no corpo da resposta;</li>
<li><a href="/2023-02-24-php-ini-conhecendo-as-configuracoes-do-php">Configurar o PHP</a> para n√£o exibir os erros e avisos (Isso s√≥ deve ser feito em produ√ß√£o. Em ambiente de desenvolvimento precisamos ver e corrigir os avisos);</li>
<li>Evitar o uso da <em>tag</em> de fechamento do PHP (<code>?&gt;</code>) em arquivos que contenham apenas c√≥digo PHP;</li>
<li>Garantir que n√£o h√° espa√ßos antes da <em>tag</em> de abertura (<code>&lt;?php</code>) ou depois da tag de fechamento (<code>?&gt;</code>) do PHP.</li>
<li>Controlar o <a href="/2020-11-03-wraper-de-streams-php"><em>output buffer</em></a> do PHP, caso se depare com um caso mais espec√≠fico.</li>
</ol>

<h2 id="conclus%C3%A3o">Conclus√£o</h2>

<p>Um dos erros mais conhecidos do mundo PHP, embora assustador, n√£o √© t√£o dif√≠cil de resolver. Com esse post voc√™ deve ter as informa√ß√µes necess√°rias para n√£o se deparar com ele novamente e para resolver o problema caso o encontre.</p>

<p>Caso queira se aprofundar e conhecer ainda mais nos estudos sobre PHP, aqui tem um <a href="https://tidd.ly/4d42Myb">cupom de desconto</a> para assinar a Alura, plataforma de cursos online onde eu sou o instrutor da maioria dos cursos de PHP.</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[PHP.ini: Aprendendo a configurar o comportamento do PHP]]></title>
            <link href="https://dias.dev/2023-02-24-php-ini-conhecendo-as-configuracoes-do-php/"/>
            <updated>2023-02-24T00:00:00+00:00</updated>
            <id>https://dias.dev/2023-02-24-php-ini-conhecendo-as-configuracoes-do-php/</id>
            <content type="html"><![CDATA[<h2 id="o-que-%C3%A9-o-php.ini%3F">O que √© o php.ini?</h2>

<p>O arquivo <code>php.ini</code> √© o respons√°vel por conter as configura√ß√µes que afetam o comportamento do PHP onde ele for executado. O PHP l√™ as configura√ß√µes deste arquivo sempre que um novo processo √© iniciado.</p>

<h3 id="todas-as-configura%C3%A7%C3%B5es-em-um-%C3%BAnico-arquivo%3F">Todas as configura√ß√µes em um √∫nico arquivo?</h3>

<p>Entendido (mesmo que por alto) o que √© o <code>php.ini</code>, talvez voc√™ se pergunte: "mas todas as configura√ß√µes do PHP v√£o ficar em um √∫nico arquivo? Esse arquivo vai ser gigante!".</p>

<p>Esse questionamento √© muito v√°lido e a resposta √©: n√£o. N√£o √© necess√°rio manter todas as configura√ß√µes em um √∫nico arquivo. √â poss√≠vel ter em sua instala√ß√£o do PHP um diret√≥rio configurado onde outros arquivos de configura√ß√£o (no mesmo formato) ser√£o buscados e carregados.</p>

<h3 id="onde-encontrar-o-php.ini%3F">Onde encontrar o php.ini?</h3>

<p>A localiza√ß√£o do arquivo <code>php.ini</code> (e dos demais arquivos de configura√ß√£o) pode variar dependendo do sistema operacional e da forma como o PHP foi instalado, mas h√° um simples comando para te mostrar essa informa√ß√£o: <code>php --ini</code>. Executando esse comando voc√™ ter√° uma sa√≠da semelhante a seguinte:</p>

<pre><code>Configuration File (php.ini) Path: /etc/php/8.2/cli
Loaded Configuration File:         /etc/php/8.2/cli/php.ini
Scan for additional .ini files in: /etc/php/8.2/cli/conf.d
Additional .ini files parsed:      /etc/php/8.2/cli/conf.d/10-opcache.ini,
/etc/php/8.2/cli/conf.d/10-pdo.ini,
</code></pre>

<p>Repare que no exemplo acima, o arquivo "principal" √© o <code>php.ini</code> encontrado na pasta <code>/etc/php/8.2/cli</code>. Mas h√° tamb√©m a defini√ß√£o (feita no momento da compila√ß√£o do PHP) para buscar outros arquivos de configura√ß√£o na pasta <code>/etc/php/8.2/cli/conf.d</code>. L√° est√£o os arquivos <code>10-opcache.ini</code> e <code>10-pdo.ini</code>.</p>

<h4 id="prioridade-de-carregamento">Prioridade de carregamento</h4>

<p>Voc√™ deve ter notado que os arquivos "extra" de configura√ß√£o possuem um n√∫mero como prefixo (<code>10-opcache.ini</code> e <code>10-pdo.ini</code>). Esse n√∫mero <strong>n√£o</strong> tem um significado especial para o PHP, mas nos permite ordenar os arquivos por prioridade. O PHP vai carregar os arquivos <code>.ini</code> do diret√≥rio configurado em ordem alfabetica, sendo assim, n√∫meros s√£o adicionados para n√≥s podermos definir a prioridade de carregamento de cada arquivo. Quanto maior o n√∫mero, "mais depois" ele ser√° carregado, fazendo com que suas defini√ß√µes sejam aplicadas por √∫ltimo, sobrescrevendo as anteriores caso hajam configura√ß√µes duplicadas.</p>

<h2 id="o-que-pode-ser-configurado-pelo-php.ini">O que pode ser configurado pelo php.ini</h2>

<p>Existem muitas configura√ß√µes diferentes que podem ser definidas no arquivo <code>php.ini</code>. Algumas das configura√ß√µes mais comuns incluem:</p>

<ul>
<li>Configura√ß√µes de exibi√ß√£o de erros</li>
<li>Configura√ß√µes de seguran√ßa</li>
<li>Configura√ß√µes de desempenho</li>
<li>Configura√ß√µes de extens√µes</li>
</ul>

<h3 id="exemplos">Exemplos</h3>

<p>O formato <code>.ini</code> √© bastante simples e consiste em uma chave (o nome da configura√ß√£o) e um valor (o valor da configura√ß√£o) separados pelo sinal de igualdade (<code>=</code>). Al√©m disso, √© poss√≠vel adicionar coment√°rios colocando um ponto e v√≠rgula (<code>;</code>) em sua frente.</p>

<p>Sendo assim, para termos um arquivo <code>php.ini</code> dizendo que todos os erros devem ser exibidos, habilitando a <a href="/2022-09-27-cookies-e-seguranca/">configura√ß√£o <code>secure</code> do cookie de sess√£o</a>, tendo o <a href="https://youtube.com/watch?v=6vEspHqjrkI">opcache</a> habilitado e a <a href="/2022-02-13-extensoes-php/">extens√£o</a> <code>pdo_mysql</code> tamb√©m habilitada, n√≥s ter√≠amos o seguinte:</p>

<pre><code class="ini">; coment√°rio. O PHP n√£o vai ler essa linha
error_erporting=E_ALL
display_errors=1
session.cookie_secure=1
extension=pdo_mysql
opcache.enable=1
</code></pre>

<h3 id="configura%C3%A7%C3%B5es-poss%C3%ADvels">Configura√ß√µes poss√≠vels</h3>

<p>Voc√™ n√£o precisa tentar memorizar a lista de configura√ß√µes poss√≠veis, pois isso est√° dispon√≠vel na documenta√ß√£o do PHP. A documenta√ß√£o de cada <a href="/2022-02-13-extensoes-php/">extens√£o</a>, por exemplo, possui uma se√ß√£o de configura√ß√µes que mostra as poss√≠veis configura√ß√µes com a explica√ß√£o de cada um de seus valores.</p>

<h3 id="mais-detalhes-do-formato-ini">Mais detalhes do formato ini</h3>

<p>Antes de finalizar, voc√™ tamb√©m deve ter notado que em nosso exemplo, duas linhas possuem um ponto (<code>.</code>) no nome da configura√ß√£o e duas linhas n√£o. Geralmente as configura√ß√µes de <a href="/2022-02-13-extensoes-php/">extens√µes</a> s√£o nomeadas no formato <em>extensao.configuracao</em>, ou seja, a configura√ß√£o <code>enable</code> da extens√£o <code>opcache</code> se torna <code>opcache.enable</code>. J√° as configura√ß√µes que n√£o s√£o de uma extens√£o do PHP n√£o possuem esse ponto.</p>

<p>Um outro detalhe do formato <code>ini</code> s√£o suas <em>Sections</em>. Uma se√ß√£o √© identificada por um nome rodeado por colchetes. Ent√£o se eu quiser organizar meu arquivo e nomear uma se√ß√£o nele com todas as configura√ß√µes relacionadas a <a href="https://youtube.com/watch?v=6vEspHqjrkI">opcache</a>, eu poderia ter o seguinte:</p>

<pre><code class="ini">[opcache]
opcache.enable=1
opcache.validate_timestamps=0
; demais configura√ß√µes de opcache
</code></pre>

<p>Isso n√£o vai ter nenhum significado especial para o PHP, mas nos permite deixar o arquivo mais organizado para n√≥s lermos futuramente.</p>

<h4 id="se%C3%A7%C3%B5es-especiais-do-php.ini">Se√ß√µes especiais do php.ini</h4>

<p>Entendido o conceito de se√ß√µes do formato <code>ini</code>, h√° duas se√ß√µes especiais que podemos ter em nosso <code>php.ini</code>, chamadas <code>HOST</code> e <code>PATH</code>. Elas s√£o utilizadas para limitar configura√ß√µes que ser√£o carregadas em determinados endere√ßos web (<code>HOST</code>) ou em determinados caminhos de arquivos (<code>PATH</code>).</p>

<p>Para exibir todos os erros apenas em processos que respondem as requisi√ß√µes em <code>dev.example.com</code>, por exemplo, eu poderia ter o seguinte:</p>

<pre><code class="ini">[HOST=dev.example.com]
error_reporting=E_ALL
display_errors=1
</code></pre>

<p>Caso eu queira desabilitar o <a href="https://youtube.com/watch?v=6vEspHqjrkI">opcache</a> no projeto executado na pasta <code>/meu/projeto</code>, eu posso ter o seguinte:</p>

<pre><code class="ini">[PATH=/meu/projeto]
opcache.enable=0
</code></pre>

<h2 id="fun%C3%A7%C3%A3o-%60ini_set%60">Fun√ß√£o <code>ini_set</code></h2>

<p>Al√©m dos arquivos <code>.ini</code>, tamb√©m √© poss√≠vel realizar algumas configura√ß√µes no c√≥digo do PHP, que ser√£o v√°lidas apenas durante aquela execu√ß√£o do processo. Para, por exemplo, habilitar a exibi√ß√£o de erros somente durante a execu√ß√£o de um c√≥digo, podemos fazer o seguinte:</p>

<pre><code class="php">ini_set('display_errors', true);
</code></pre>

<p>Na documenta√ß√£o de cada configura√ß√£o √© informado se √© poss√≠vel realiz√°-la atrav√©s da fun√ß√£o <code>ini_set</code> ou apenas a partir de arquivos de configura√ß√£o.</p>

<h2 id="conclus%C3%A3o">Conclus√£o</h2>

<p>Conhecer o <code>php.ini</code> √© de suma import√¢ncia para qualquer pessoa que v√° trabalhar com PHP, seja como <em>dev</em> ou at√© em time de opera√ß√µes/sysadmin. Cada <a href="/2022-02-13-extensoes-php/">extens√£o</a> do PHP vai ter, em sua documenta√ß√£o, a lista de configura√ß√µes poss√≠veis. Sempre que voc√™ for utilizar uma extens√£o como <em>PDO</em>, <em>cURL</em> ou qualquer outra, analise as configura√ß√µes poss√≠veis para saber se h√° alguma poss√≠vel otimiza√ß√£o para seu caso.</p>

<p>Durante o artigo eu deixei alguns links, mas aproveito para deixar algumas refer√™ncias novamente aqui:</p>

<ul>
<li>Post aqui no blog sobre Extens√µes PHP: <a href="/2022-02-13-extensoes-php/">https://dias.dev/2022-02-13-extensoes-php/</a></li>
<li>V√≠deo no meu canal sobre <em>Opcache</em>: <a href="https://youtube.com/watch?v=6vEspHqjrkI">https://youtube.com/watch?v=6vEspHqjrkI</a></li>
<li>Documenta√ß√£o sobre as diretivas do <code>php.ini</code>: <a href="https://www.php.net/manual/en/ini.php">https://www.php.net/manual/en/ini.php</a></li>
<li>Cupom de desconto na Alura para voc√™ se aprofundar em PHP: <a href="https://tidd.ly/4d42Myb">Cupom de desconto</a></li>
</ul>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Enviando e-mails com PHP: uma introdu√ß√£o √† fun√ß√£o mail e ao SMTP]]></title>
            <link href="https://dias.dev/2022-09-27-como-enviar-emails-com-php/"/>
            <updated>2022-09-27T00:00:00+00:00</updated>
            <id>https://dias.dev/2022-09-27-como-enviar-emails-com-php/</id>
            <content type="html"><![CDATA[<blockquote>
  <p>Disclaimer: <em>Esse post foi escrito pela intelig√™ncia artificial do <a href="https://chat.openai.com/chat">ChatGPT</a> contendo apenas poucas altera√ß√µes feitas por mim (Vinicius)</em></p>
</blockquote>

<p>Enviar e-mails √© uma tarefa comum em muitos aplicativos web, e o PHP oferece uma fun√ß√£o nativa chamada <code>mail</code> que pode ser usada para enviar mensagens de e-mail de forma relativamente simples. No entanto, a fun√ß√£o <code>mail</code> tem algumas limita√ß√µes e pode n√£o ser a op√ß√£o mais adequada para todos os casos de uso. Neste post, vamos explorar como a fun√ß√£o <code>mail</code> funciona e quando √© adequada us√°-la, al√©m de introduzir o conceito de Simple Mail Transfer Protocol (SMTP) e apresentar algumas op√ß√µes de bibliotecas de envio de e-mails como PHPMailer e Symfony Mailer.</p>

<h2 id="a-fun%C3%A7%C3%A3o-%60mail%60-do-php">A fun√ß√£o <code>mail</code> do PHP</h2>

<p>A fun√ß√£o <code>mail</code> do PHP √© uma forma simples de enviar e-mails usando a linguagem. Ela √© chamada da seguinte maneira:</p>

<pre><code class="php">mail($to, $subject, $message, $headers, $parameters);
</code></pre>

<p>Onde:</p>

<ul>
<li><code>$to</code> √© o endere√ßo de e-mail do destinat√°rio</li>
<li><code>$subject</code> √© o assunto da mensagem</li>
<li><code>$message</code> √© o corpo da mensagem</li>
<li><code>$headers</code> s√£o cabe√ßalhos adicionais que podem ser inclu√≠dos na mensagem, como o endere√ßo de e-mail do remetente ou o tipo de conte√∫do da mensagem</li>
<li><code>$parameters</code> s√£o par√¢metros adicionais que podem ser passados para a fun√ß√£o</li>
</ul>

<p>A fun√ß√£o retorna <code>true</code> se a mensagem for enviada com sucesso e <code>false</code> caso contr√°rio.</p>

<h3 id="como-a-fun%C3%A7%C3%A3o-%60mail%60-funciona-por-baixo-dos-panos">Como a fun√ß√£o <code>mail</code> funciona por baixo dos panos</h3>

<p>Quando voc√™ chama a fun√ß√£o <code>mail</code> do PHP, ela usa o programa sendmail instalado no servidor para enviar a mensagem. Isso significa que, para que a fun√ß√£o <code>mail</code> funcione, √© necess√°rio que o sendmail esteja configurado e funcionando corretamente no servidor. Al√©m disso, o endere√ßo de e-mail do remetente da mensagem precisa ser v√°lido e o servidor precisa ter permiss√£o para enviar e-mails em nome desse remetente.</p>

<h3 id="limita%C3%A7%C3%B5es-da-fun%C3%A7%C3%A3o-%60mail%60">Limita√ß√µes da fun√ß√£o <code>mail</code></h3>

<p>Apesar de ser uma op√ß√£o conveniente para o envio de e-mails em alguns casos, a fun√ß√£o <code>mail</code> do PHP tem algumas limita√ß√µes que devem ser consideradas:</p>

<ul>
<li>Ela depende do sendmail, que precisa estar instalado e configurado corretamente no servidor. Isso pode ser um problema se voc√™ estiver hospedando o aplicativo em um servi√ßo de nuvem ou em um servidor que n√£o tenha o sendmail instalado.</li>
<li>Ela n√£o oferece muito controle sobre o envio de e-mails. Por exemplo, n√£o √© poss√≠vel definir um servidor SMTP personalizado ou adicionar anexos √† mensagem.</li>
<li>Ela pode ter problemas de entrega de e-mails devido a problemas de configura√ß√£o do sendmail ou de problemas de DNS.</li>
<li>Ela n√£o √© muito confi√°vel em aplicativos de produ√ß√£o, pois pode ser facilmente falsificada e pode ser bloqueada por provedores de e-mail.</li>
</ul>

<p>Essas limita√ß√µes podem ser contornadas usando bibliotecas de envio de e-mails como o PHPMailer ou o Symfony Mailer, que s√£o discutidas no pr√≥ximo t√≥pico.</p>

<h2 id="o-que-%C3%A9-smtp">O que √© SMTP</h2>

<p>SMTP (Simple Mail Transfer Protocol) √© um protocolo usado para enviar e-mails atrav√©s da internet. Ele √© respons√°vel por transferir mensagens de e-mail de um servidor para outro, e tamb√©m pode ser usado para enviar mensagens de e-mail de um cliente para um servidor.</p>

<p>Quando voc√™ envia um e-mail usando um cliente de e-mail como o Microsoft Outlook ou o Gmail, o cliente se comunica com um servidor SMTP para enviar a mensagem. Esse servidor √© respons√°vel por encaminhar a mensagem para o servidor de e-mail do destinat√°rio, que, por sua vez, entrega a mensagem ao cliente de e-mail do destinat√°rio.</p>

<h2 id="pacotes-de-envio-de-e-mails">Pacotes de envio de e-mails</h2>

<p>Se voc√™ precisa de mais flexibilidade do que a fun√ß√£o <code>mail</code> do PHP pode oferecer, existem algumas bibliotecas que podem ser usadas para enviar e-mails com PHP. Dois exemplos populares s√£o o PHPMailer e o Symfony Mailer.</p>

<p>O PHPMailer √© uma das bibliotecas de envio de e-mail mais famosas do ecossistema PHP. Esse componente de c√≥digo aberto que oferece uma interface de alto n√≠vel para o envio de e-mails usando PHP. Ele suporta v√°rios m√©todos de envio, incluindo SMTP, e permite que voc√™ fa√ßa coisas como adicionar anexos e usar templates de e-mail.</p>

<p>Um exemplo de c√≥digo que envia um e-mail usando <code>PHPMailer</code> seria o seguinte:</p>

<pre><code class="php">&lt;?php

use PHPMailer\PHPMailer\PHPMailer;
use PHPMailer\PHPMailer\SMTP;
use PHPMailer\PHPMailer\Exception;

$mail = new PHPMailer(exceptions: true);

try {
    $mail-&gt;isSMTP();

    // Configura√ß√µes do servidor
    $mail-&gt;Host = 'smtp.example.com';
    $mail-&gt;SMTPAuth = true;
    $mail-&gt;Username = 'usuario@example.com';
    $mail-&gt;Password = 'senha-secreta';
    $mail-&gt;SMTPSecure = PHPMailer::ENCRYPTION_SMTPS;
    $mail-&gt;Port = 465;

    // Remetente e Destinat√°rios
    $mail-&gt;setFrom('remetente@example.com', 'Nome do Remetente');
    $mail-&gt;addAddress('destinatario@example.net', 'Primeiro Destinat√°rio');
    $mail-&gt;addAddress('destinatario2@example.com');
    $mail-&gt;addReplyTo('responder@example.com', 'Nome de para quem responder');
    $mail-&gt;addCC('cc@example.com');
    $mail-&gt;addBCC('bcc@example.com');

    // Anexos
    $mail-&gt;addAttachment('/var/tmp/arquivo.tar.gz');
    $mail-&gt;addAttachment('/tmp/imagem.jpg', 'novo-nome.jpg');

    // Conte√∫do
    $mail-&gt;isHTML(true);
    $mail-&gt;Subject = 'Assunto aqui';
    $mail-&gt;Body = 'Esse √© o corpo da mensagem em HTML &lt;b&gt;em negrito!&lt;/b&gt;';
    $mail-&gt;AltBody = 'Esse √© o corpo da mensagem em "texto puro" para clientes que n√£o suportam HTML';

    $mail-&gt;send();
} catch (Exception $exception) {
    echo "Erro ao enviar e-mail: {$mail-&gt;ErrorInfo}";
}
</code></pre>

<h2 id="conclus%C3%A3o%3A">Conclus√£o:</h2>

<p>Enviar e-mails com PHP √© uma tarefa relativamente simples gra√ßas √† fun√ß√£o <code>mail</code> nativa da linguagem. No entanto, essa fun√ß√£o tem algumas limita√ß√µes e pode n√£o ser a op√ß√£o mais adequada para todos os casos de uso. Se voc√™ precisar de mais flexibilidade, pode usar bibliotecas como o PHPMailer ou o Symfony Mailer, que oferecem recursos avan√ßados para o envio de e-mails.</p>

<p>Espero que este post tenha sido √∫til para voc√™ entender as op√ß√µes dispon√≠veis para enviar e-mails com PHP e escolher a op√ß√£o mais adequada para o seu projeto.</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Cookies e seguran√ßa]]></title>
            <link href="https://dias.dev/2022-09-27-cookies-e-seguranca/"/>
            <updated>2022-09-27T00:00:00+00:00</updated>
            <id>https://dias.dev/2022-09-27-cookies-e-seguranca/</id>
            <content type="html"><![CDATA[<p><em>Cookies</em> s√£o amplamente utilizados para armazenar informa√ß√µes em nossos navegadores e muitas vezes n√≥s negligenciamos a seguran√ßa dessas informa√ß√µes. Cookies podem conter dados sens√≠veis como sua informa√ß√£o de sess√£o, por exemplo, por isso devemos nos preocupar com seu armazenamento.</p>

<h2 id="o-que-s%C3%A3o-_cookies_%3F">O que s√£o <em>cookies</em>?</h2>

<p>Um <em>cookie</em> √©, basicamente, uma informa√ß√£o de texto enviada pelo servidor de uma aplica√ß√£o web e salva no navegador. Ap√≥s salvar essa informa√ß√£o, o navegador reenvia os <em>cookies</em> em todas as requisi√ß√µes realizadas. <em>Cookies</em> s√£o enviados atrav√©s de cabe√ßalhos HTTP tanto do servidor para o cliente quanto do cliente para o servidor.</p>

<p>Se voc√™ n√£o est√° familiarizado com o protocolo HTTP, pode conferir este v√≠deo antes de continuar a leitura:</p>

<p><lite-youtube videoid="B2IWlnJ_dt0" style="background-image: url('https://i.ytimg.com/vi/B2IWlnJ_dt0/hqdefault.jpg');">
    <a href="https://youtube.com/watch?v=B2IWlnJ_dt0" class="lty-playbtn" title="Reproduzir v√≠deo">
        <span class="lyt-visually-hidden">Reproduzir v√≠deo: Como funciona a Web? - A internet por baixo dos panos | Dias de Dev</span>
    </a>
</lite-youtube></p>

<p>Dessa forma um servidor pode, por exemplo, ao receber as credenciais do usu√°rio, gerar um ID √∫nico e enviar atrav√©s de cookies. A partir disso, todas as requisi√ß√µes futuras que o navegador fizer conter√£o essa identifica√ß√£o do usu√°rio. Assim funciona o mecanismo de sess√µes que nos permite permanecer logados em sites.</p>

<h3 id="onde-ficam-os-_cookies_">Onde ficam os <em>cookies</em></h3>

<p>Cada navegador pode salvar seus <em>cookies</em> como preferir. Seja em um banco de dados embutido, em arquivos de texto encriptados no sistema operacional, etc. Mas para visualizar os cookies de uma aplica√ß√£o que estamos acessando, podemos utilizar as ferramentas de desenvolvedor.</p>

<p>Aperte F12, v√° at√© a aba "Aplicativo" (ou "Application") e l√° voc√™ ver√°, no menu lateral, a parte de <em>Cookies</em>. Repare que eles s√£o separados por dom√≠nio.</p>

<p>Para entender essa separa√ß√£o por dom√≠nio, vamos imaginar o seguinte cen√°rio: sua aplica√ß√£o, hospedada no dom√≠nio X, envia um <em>cookie</em> de identifica√ß√£o de sess√£o. No c√≥digo do seu app h√° chamadas para um servidor que configura relat√≥rios de acesso ao site. Esse servidor est√° em outro local, no dom√≠nio Y. Sendo assim, voc√™ ver√° <em>cookies</em> dos dom√≠nios X e Y ao acessar essa ferramenta de desenvolvedores.</p>

<h3 id="o-que-_cookies_-armazenam">O que <em>Cookies</em> armazenam</h3>

<p>Entendido o funcionamento b√°sico e onde encontr√°-los, vamos analisar quais informa√ß√µes um <em>cookie</em> pode conter. Todo cookie possui, necessariamente, um nome e um valor. O nome √©, como voc√™ deve imaginar, a forma que usamos para identificar a informa√ß√£o que esse cookie carrega em seu valor. Um <em>cookie</em> de sess√£o, por exemplo, geralmente possui a palavra <em>session</em> em seu nome enquanto seu valor ser√° o ID da sess√£o.</p>

<p>Al√©m desses atributos "b√°sicos", cookies podem possuir par√¢metros extra. Alguns deles s√£o:</p>

<ul>
<li><code>Expires</code>: Define a data e hora de expira√ß√£o do cookie. Se esse par√¢metro n√£o for definido, o <em>cookie</em> ser√° considerado como "<em>cookie</em> de sess√£o" e ir√° expirar quando o navegador for fechado.</li>
<li><code>Max-Age</code>: Similar ao <code>Expires</code>, tamb√©m define quando um <em>cookie</em> vai expirar, mas em segundos. Se os 2 par√¢metros forem informados, <code>Max-Age</code> possui prioridade.</li>
<li><code>Domain</code>: Define para qual host o <em>cookie</em> ser√° enviado pelo navegador. Se esse par√¢metro n√£o for definido, o <em>cookie</em> ser√° enviado somente para o host da URL atual, n√£o incluindo sub-dom√≠nios. Se um valor como <code>example.com</code> for definido, o <em>cookie</em> ser√° enviado nas requisi√ß√µes para <code>example.com</code> e todos os seus sub-dom√≠nios.</li>
<li><code>Path</code>: Indica qual caminho deve existir na URL para que o <em>cookie</em> seja enviado pelo navegador. Se o valor for <code>/docs</code>, o <em>cookie</em> ser√° enviado para URLs como <code>/docs</code>, <code>/docs/</code>, <code>/docs/web</code>, etc, mas n√£o ser√° enviado para URLs como <code>/</code>, <code>/documentos</code>, <code>/pt-br/docs</code>, etc.</li>
<li><code>Secure</code>: Se esse par√¢metro for definido, o <em>cookie</em> s√≥ ser√° enviado em requisi√ß√µes HTTPS.</li>
<li><code>HttpOnly</code>: Proibe o acesso ao <em>cookie</em> em quest√£o atrav√©s de JavaScript com <code>document.cookie</code>.</li>
<li><code>SameSite</code>: Com os poss√≠veis valores sendo <code>Strict</code>, <code>Lax</code> e <code>None</code>, controla se o <em>cookie</em> pode ser enviado em requisi√ß√µes feitas a partir de outros sites para o do dom√≠nio do <em>cookie</em>.

<ul>
<li><code>Strict</code>: Apenas <em>cookies</em> para o endere√ßo da URL que est√° sendo acessada s√£o enviados. Isso faz com que a requisi√ß√£o inicial para um site n√£o contenha os <em>cookies</em> com esse par√¢metro, j√° que est√£o vindo de outro dom√≠nio.</li>
<li><code>Lax</code> (op√ß√£o padr√£o): Semelhante ao <code>Strict</code>, mas permite o envio dos <em>cookies</em> na requisi√ß√£o inicial. Isso permite, por exemplo, manter o usu√°rio logado ao chegar no sistema atrav√©s de um link externo.</li>
<li><code>None</code>: Quer dizer que os <em>cookies</em> ser√£o enviados mesmo se a requisi√ß√£o estiver vindo de outro endere√ßo. Para usar essa op√ß√£o, as vers√µes mais recentes dos navegadores exigem que o par√¢metro <code>Secure</code> seja definido.</li>
</ul></li>
</ul>

<h4 id="exemplos-de-defini%C3%A7%C3%B5es-de-_cookies_">Exemplos de defini√ß√µes de <em>cookies</em></h4>

<p>Para enviar um <em>cookie</em> de sess√£o, o seguinte cabe√ßalho pode ser enviado:</p>

<pre><code class="http">Set-Cookie: sessionId=123456
</code></pre>

<p>J√° para um <em>cookie</em> permanente com dura√ß√£o de 1 semana:</p>

<pre><code class="http">Set-Cookie: nome=valor; Max-Age=604800
</code></pre>

<h2 id="_cookies_-e-seguran%C3%A7a"><em>Cookies</em> e Seguran√ßa</h2>

<p>J√° entendemos o que s√£o, como funcionam e os par√¢metros de <em>cookies</em>. Agora vamos finalmente ao t√≥pico em quest√£o: <em>cookies</em> e seguran√ßa.</p>

<h3 id="_cookies_-e-xss"><em>Cookies</em> e XSS</h3>

<p>Como j√° foi citado, sess√µes s√£o um uso muito comum para <em>cookies</em>. As linguagens de back-end, inclusive, j√° lidam com esse detalhe de forma transparente na maioria das vezes. Agora imagine o seguinte cen√°rio: atrav√©s de um ataque de <a href="https://youtube.com/watch?v=lntsVxPZibw">XSS</a> um usu√°rio malicioso consegue acesso ao seu <em>cookie</em> de sess√£o. Com isso ele conseguir√° se passar por voc√™ e o estrago pode ser enorme.</p>

<p>Para prevenir que ataques XSS consigam acessar seus <em>cookies</em> sens√≠veis (como o de sess√£o), podemos marc√°-lo como <code>HttpOnly</code>. Dessa forma, c√≥digo JavaScript nenhum ter√° acesso ao mesmo.</p>

<p>Claro que um sistema com vulnerabilidade a <em>XSS</em> est√° em GRANDES riscos, mas para evitar <a href="https://owasp.org/www-community/attacks/Session_hijacking_attack"><em>session hijacking</em></a>, tornar o <em>cookie</em> <code>HttpOnly</code> j√° √© um grande passo.</p>

<p>Como j√° foi explicado anteriormente, o par√¢metro <code>HttpOnly</code> impede que o <em>cookie</em> em quest√£o seja acessado via <code>document.cookie</code>. Mas caso voc√™ precise realizar requisi√ß√µes via JavaScript, saiba que a fun√ß√£o <code>fetch</code> vai conseguir enviar os mesmos sem problema. :-D</p>

<p>Cada linguagem back-end pode fornecer suas facilidades para definir o <em>cookie</em> de sess√£o como <code>HttpOnly</code>. No PHP, por exemplo, al√©m da fun√ß√£o <code>session_set_cookie_params</code>, h√° configura√ß√µes como a <code>session.cookie_httponly</code>. O cabe√ßalho de um <em>cookie</em> <code>HttpOnly</code> seria parecido com:</p>

<pre><code class="http">Set-Cookie: sessionId=123456; HttpOnly
</code></pre>

<h3 id="_cookies_-e-csrf"><em>Cookies</em> e CSRF</h3>

<p>Um ataque <em>CSRF</em> (<em>Cross-Site Request Forgery</em>) permite que um atacante se passe por outro usu√°rio tabm√©m, enviando requisi√ß√µes de um site para outro.</p>

<p>Para exemplificar: imagine que meu site dias.dev seja malicioso. Nele eu vou colocar a seguinte tag <code>img</code>:</p>

<pre><code class="html">&lt;img src="https://example.com/index.php?action=delete&amp;id=123" /&gt;
</code></pre>

<p>Se voc√™, acessando meu site, estiver logado em <code>example.com</code> (com o <em>cookie</em> armazenado e o par√¢metro <code>SameSite=None</code>), essa requisi√ß√£o vai ser feita com sucesso para uma a√ß√£o de remo√ß√£o de um dado e voc√™ nem vai perceber. S√≥ haver√° uma "imagem quebrada" no site.</p>

<p>Para impedir que a partir de um site, <em>cookies</em> sejam enviados para outro, podemos (dentre outras coisas), definir a pol√≠tica de <code>SameSite</code> como <code>Lax</code> (o que via de regra √© o padr√£o) ou <code>Strict</code>:</p>

<pre><code class="http">Set-Cookie: sessionId=123456; HttpOnly; SameSite=Lax
</code></pre>

<p>Agora nosso <em>cookie</em> al√©m de n√£o ser mais acess√≠vel via JavaScript, s√≥ √© enviado em requisi√ß√µes realizadas a partir do nosso pr√≥prio site. Talvez voc√™ esteja se perguntando: se <code>Lax</code> j√° √© o padr√£o, por que me preocupar? Acontece que algumas linguagens ou frameworks back-end podem alterar esse padr√£o por diversos motivos. Por isso √© importante saber como usar esse par√¢metro.</p>

<h3 id="_cookies_-e-ataques-_man-in-the-middle_"><em>Cookies</em> e ataques <em>Man in the middle</em></h3>

<p>Outra forma de realizar <a href="https://owasp.org/www-community/attacks/Session_hijacking_attack"><em>session hijacking</em></a> seria um ataque do tipo <em>Man in the middle</em>, onde um atacante observa as requisi√ß√µes realizadas a partir do seu computador para o servidor. Se a requisi√ß√£o n√£o for criptografada, ou seja, n√£o usar HTTPS, o atacante ter√° acesso a todos os <em>cookies</em>.</p>

<p>Para impedir que um <em>cookie</em> seja enviado em requisi√ß√µes n√£o criptografadas, basta definir o par√¢metro <code>Secure</code>. Quando uma requisi√ß√£o sem HTTPS acontecer, esse <em>cookie</em> n√£o ser√° enviado. Com isso, nosso <code>header</code> ficaria:</p>

<pre><code class="http">Set-Cookie: sessionId=123456; HttpOnly; SameSite=Lax; Secure
</code></pre>

<h2 id="conclus%C3%A3o">Conclus√£o</h2>

<p>Repare que o uso correto dos par√¢metros dos <em>cookies</em> j√° nos protege de diversos ataques. Obviamente apenas cuidar dos nossos <em>cookies</em> n√£o √© o suficiente para ter um sistema verdadeiramente seguro. Precisamos nos atentar a diversos outros fatores e poss√≠veis vulnerabilidades. Al√©m disso, <em>cookies</em> de sess√£o n√£o s√£o os √∫nicos a serem cuidados. <em>Tokens</em> geralmente s√£o armazenados como <em>cookies</em> tamb√©m e todos esses cuidados devem ser tomados.</p>

<p>Se seguran√ßa √© um assunto que te interessa, recomendo essa <em>playlist</em> com alguns v√≠deos b√°sicos sobre o assunto: <a href="https://youtube.com/playlist?list=PL3j2sfzg3FPuOOt13tOcNTx6hCFYcQls9">https://youtube.com/playlist?list=PL3j2sfzg3FPuOOt13tOcNTx6hCFYcQls9</a></p>

<p>Se quiser se aprofundar, na Alura h√° diversos cursos e forma√ß√µes sobre o tema de seguran√ßa. Aqui est√° um <a href="https://tidd.ly/4d42Myb">cupom de desconto</a> para assinar a plataforma.</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Paralelizar testes automatizados]]></title>
            <link href="https://dias.dev/2022-09-16-paralelizar-testes-automatizados/"/>
            <updated>2022-09-16T00:00:00+00:00</updated>
            <id>https://dias.dev/2022-09-16-paralelizar-testes-automatizados/</id>
            <content type="html"><![CDATA[<p>Testes automatizados podem levar um certo tempo para serem executados, principalmente se forem rodados um a um. Executar mais de um teste por vez pode ser uma boa alternativa para agilizar sua <em>pipeline</em>.</p>

<h2 id="testes-automatizados">Testes automatizados</h2>

<p>A cria√ß√£o e execu√ß√£o de testes automatizados traz in√∫meras vantagens e isso por si s√≥ poderia ser assunto para outro post completo. Mas um ponto que muitas vezes negligenciamos √© o tempo que a execu√ß√£o dos testes pode tomar em nossa <em>pipeline</em> de <em>build</em>.</p>

<p>Uma das etapas mais importantes em um ambiente de CI/CD, por exemplo, √© a execu√ß√£o dos testes. E sabemos que ter um processo demorado aqui pode at√© inviabilizar a ado√ß√£o de pr√°ticas de integra√ß√£o cont√≠nua.</p>

<p>√â muito comum que ao executar a nossa su√≠te de testes, cada cen√°rio seja executado de forma isolada, um por vez. Por√©m, atualmente √© praticamente regra que os nossos computadores possuam CPUs com capacidade de executar mais de um processo por vez, sendo assim, por que n√£o executar mais de um teste por vez?</p>

<h2 id="paraleliza%C3%A7%C3%A3o-de-testes">Paraleliza√ß√£o de testes</h2>

<p>Paralelismo √© um assunto bastante complexo, mas a ideia de paralelizar uma su√≠te de testes √©, na verdade, bem simples: executar mais de um caso de teste por vez, em processos separados.</p>

<p>Um ponto que deve ser considerado √© a independ√™ncia dos testes. Cada teste deve ser completamente independente e n√£o pode usar o resultado ou a√ß√µes de testes anteriores. Uma forma aumentar a seguran√ßa de que os seus testes atualmente s√£o independentes √© rod√°-los fora de ordem. Dessa forma, se algum teste dependia do anterior, por exemplo, ao execut√°-los em uma ordem aleat√≥ria ele passar√° a falhar.</p>

<h2 id="ferramentas">Ferramentas</h2>

<p>Tendo entendido a ideia de rodar mais de um teste por vez e que para isso os testes precisam ser independentes, como podemos efetivamente atingir o paralelismo nos nossos testes?</p>

<p>Cada ecossistema ter√° a sua solu√ß√£o. Em PHP, por exemplo, podemos usar o <a href="https://github.com/paratestphp/paratest">Paratest</a>. N√£o √© necess√°ria nenhuma configura√ß√£o. Se voc√™ tem os seus testes rodando com PHPUnit, basta executar o comando <code>paratest</code> ao inv√©s de <code>phpunit</code>, mais nada. J√° em JS, cada framework de testes possui uma abordagem diferente. O Jest j√° executa os testes de arquivos diferentes de forma paralela por padr√£o. Em Java, a sua su√≠te JUnit pode usar uma ferramenta chamada Surefire. MSTest (para C#) na sua vers√£o 2 permite paralelizar testes tamb√©m. ExUnit (para Elixir) j√° executa os testes de cada m√≥dulo de forma paralela. Testes em Rust tamb√©m s√£o executados em paralelo por padr√£o.</p>

<h2 id="conclus%C3%A3o">Conclus√£o</h2>

<p>A vantagem de paralelizar testes √© bastante clara e a desvantagem √© somente a necessidade dos testes serem isolados, o que j√° deveria ser um padr√£o independente da forma de execu√ß√£o.</p>

<p>Cada ecossistema e ferramenta resolve esse problema de uma maneira diferente, mas todos eles possuem alguma solu√ß√£o. Vale a pesquisa para saber mais sobre a linguagem com a qual voc√™ trabalha.</p>

<p>Se n√£o estiver familiarizado com conceitos de testes, sugiro assistir <a href="https://youtube.com/playlist?list=PL3j2sfzg3FPsPiaDUmDDKNvco49YMdj8f">esta playlist</a> de testes automatizados. E se quiser se aprofundar em testes e programa√ß√£o em geral, aqui tem um <a href="https://tidd.ly/4d42Myb">cupom de desconto</a> para voc√™ assinar Alura.</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Extens√µes PHP]]></title>
            <link href="https://dias.dev/2022-02-13-extensoes-php/"/>
            <updated>2022-02-13T00:00:00+00:00</updated>
            <id>https://dias.dev/2022-02-13-extensoes-php/</id>
            <content type="html"><![CDATA[<p>PHP √© uma linguagem de programa√ß√£o que roda em uma m√°quina virtual chamada <em>Zend Engine</em>. Essa m√°quina
virtual √© escrita em C e permite que n√≥s escrevamos c√≥digo em C para embutir funcionalidades no PHP. Assim funcionam as
extens√µes do PHP.</p>

<h2 id="o-que-s%C3%A3o-extens%C3%B5es-do-php%3F">O que s√£o extens√µes do PHP?</h2>

<p>As extens√µes no PHP s√£o c√≥digos escritos em C que s√£o, de certa forma, embutidos na linguagem, logo, se parecem com c√≥digo
nativo. √â poss√≠vel criarmos novas fun√ß√µes, classes e at√© criar sintaxe nova na linguagem a partir de extens√µes.</p>

<p>Quem usa PHP no dia-a-dia com certeza usa alguma extens√£o. Alguns exemplos de extens√µes PHP bem comuns:</p>

<ul>
<li>PDO</li>
<li>Sessions</li>
<li>JSON</li>
<li>cURL</li>
</ul>

<h2 id="tipos-de-extens%C3%B5es">Tipos de extens√µes</h2>

<p>Al√©m de existir um n√∫mero enorme de extens√µes do PHP, existem tamb√©m alguns tipos onde elas podem ser categorizadas.
Estes tipos s√£o: <em>Core Extensions</em>, <em>Bundled Extensions</em>, <em>External Extensions</em> e <em>PECL Extensions</em>.</p>

<h3 id="core-extensions">Core Extensions</h3>

<p>As extens√µes <em>Core</em>, como o nome j√° diz, fazem parte do <em>core</em> (n√∫cleo) do PHP. O PHP n√£o existe sem elas e √© imposs√≠vel
ter uma instala√ß√£o do PHP sem estas. Alguns exemplos deste tipo de extens√µes s√£o: Arrays, Classes/Objects, Date/Time,
JSON, OPCache etc.</p>

<p>Estas extens√µes s√£o mantidas pela pr√≥pria equipe do PHP j√° que fazem parte da linguagem em si.</p>

<h3 id="bundled-extensions">Bundled Extensions</h3>

<p>As extens√µes empacotadas com o PHP, chamadas de <em>bundled extensions</em>, s√£o extens√µes que j√° v√™m junto com o PHP, mas √©
poss√≠vel escolher habilit√°-las ou n√£o em sua instala√ß√£o. Estas extens√µes tamb√©m s√£o mantidas pela equipe do PHP j√° que
s√£o empacotadas junto com o restante do c√≥digo da linguagem.</p>

<p>Alguns exemplos de extens√µes deste tipo: PDO, GD, FFI, intl, Sessions etc.</p>

<h3 id="external-extensions">External Extensions</h3>

<p>As extens√µes externas s√£o id√™nticas √†s <em>bundled</em> em quase todos os aspectos. Elas v√™m com o PHP, podem ser habilitadas
ou n√£o e s√£o mantidas pela equipe do <em>core</em>, por√©m possuem uma diferen√ßa: elas possuem depend√™ncias externas.</p>

<p>Para ter este tipo de extens√£o em sua instala√ß√£o do PHP voc√™ vai precisar ter alguma outra biblioteca ou programa em seu
sistema operacional. A extens√£o <em>cURL</em>, por exemplo, entra nessa categoria. Para ter essa extens√£o no PHP voc√™ precisa
do software <em>cURL</em> instalado no sistema, j√° que a extens√£o faz uso do c√≥digo disponibilizado por este software.</p>

<p>Alguns exemplos de extens√µes externas s√£o: cURL, DOM, OpenSSL, Sodium, Zip etc.</p>

<h3 id="pecl-extensions">PECL Extensions</h3>

<p>Por √∫ltimo n√≥s temos as extens√µes disponibilizadas por terceiros usando <em>PECL</em>, que √© basicamente um reposit√≥rio para
extens√µes PHP, como se fosse o <em>Packagist</em> de extens√µes. Se voc√™ pretende criar uma extens√£o para o PHP, vai utilizar
este reposit√≥rio.</p>

<p>As extens√µes desta categoria s√£o mantidas por terceiros e podem ou n√£o possuir depend√™ncias externas. Nem todas as
extens√µes desta categoria est√£o no manual da linguagem, afinal de contas √© poss√≠vel que qualquer pessoa crie uma
extens√£o.</p>

<p>Alguns exemplos interessantes de extens√µes disponibilizadas atrav√©s do <em>PECL</em>: DS (Data Structures), EV, Memcached,
Parallel, Swoole etc.</p>

<h2 id="refer%C3%AAncias">Refer√™ncias</h2>

<p>Conhecer todas extens√µes do PHP √© simplesmente imposs√≠vel, mas conhecer bem algumas extens√µes mais importantes para seu
dia-a-dia √© de extrema import√¢ncia.</p>

<p><a href="https://www.php.net/manual/en/extensions.membership.php">Aqui</a> voc√™ pode conferir a lista completa de extens√µes do
manual do PHP, todas classificadas por categoria.</p>

<p>Se voc√™ tiver interesse em criar suas pr√≥prias extens√µes, existem alguns materiais interessantes dispon√≠veis (embora
n√£o seja uma tarefa t√£o trivial). No tutorial <em><a href="https://flavioheleno.github.io/how-do-i/">How do I</a></em> do Flavio Heleno
voc√™ pode conferir o in√≠cio dessa jornada de cria√ß√£o de extens√µes al√©m de conferir outras refer√™ncias.</p>

<h2 id="conclus%C3%A3o">Conclus√£o</h2>

<p>A linguagem de programa√ß√£o PHP √© escrita em C e possui diversas extens√µes que fazem parte ou n√£o da linguagem. N√≥s
fazemos uso de v√°rias extens√µes no dia-a-dia e entender este funcionamento √© bastante importante para devs PHP.</p>

<p>Se al√©m de entender sobre algumas extens√µes voc√™ quiser aprender mais sobre PHP em si, voc√™ pode usar esse
<a href="https://tidd.ly/4d42Myb">cupom</a> que fornece 15% de desconto na assinatura da Alura, plataforma onde
eu mesmo gravei diversos cursos sobre o assunto.</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[O que s√£o PWAs?]]></title>
            <link href="https://dias.dev/2021-09-14-o-que-sao-pwas/"/>
            <updated>2021-09-14T00:00:00+00:00</updated>
            <id>https://dias.dev/2021-09-14-o-que-sao-pwas/</id>
            <content type="html"><![CDATA[<p><em>Progressive Web Apps</em>, como o nome mesmo j√° diz, s√£o aplicativos <em>web</em> progressivos. Vamos falar um pouco mais sobre a parte de "progressivos", mas o b√°sico √© isso: Um aplicativo que roda no "mundo <em>web</em>"</p>

<h2 id="aplicativo-na-web%3F">Aplicativo na Web?</h2>

<p>Quando falamos de aplicativos, principalmente m√≥veis, pensamos logo em acessar uma loja de aplicativos, escolher um dispon√≠vel e instalar. Pensamos em todo o poder que estes aplicativos t√™m de controlar o <em>hardware</em> de nossos dispositivos. Mas ser√° que precisa ser assim?</p>

<p>Primeiro, precisamos mesmo de uma loja? Por que n√£o pesquisar diretamente no Google um servi√ßo ao inv√©s de pesquisar em uma loja de aplicativos? Segundo, ser√° que s√≥ aplicativos m√≥veis "nativos" s√£o capazes de controlar o <em>hardware</em> dos dispositivos onde eles rodam?</p>

<p><img src="https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/1DKtUFjXLJbiiruKA9P1.svg" alt="Gr√°fico mostrando a rela√ß√£o entre capacidade e alcance de PWAs e aplica√ß√µes nativas e servi√ßos web, onde PWAs possuem tanta capacidade quanto um aplicativo nativo e tanto alcance quanto um servi√ßo Web" class="big-image" loading="lazy" /></p>

<h2 id="o-poder-da-web">O poder da Web</h2>

<p>A <em>Web</em> evoluiu absurdamente nas √∫ltimas d√©cadas e trouxe muito poder para n√≥s <em>devs</em>. Coisas que antigamente seriam impens√°veis sem instalar de forma "nativa" uma aplica√ß√£o, hoje √© trivial de ser feito diretamente no navegador. Alguns exemplos:</p>

<ul>
<li>Acessar √† c√¢mera;</li>
<li>Disponibilidade offline;</li>
<li>Acesso ao GPS;</li>
<li>Execu√ß√£o de tarefas no plano de fundo;</li>
<li>etc.</li>
</ul>

<p>Hoje em dia √© perfeitamente poss√≠vel que ap√≥s acessar um aplicativo <em>web</em>, os pr√≥ximos acessos possam ser feitos sem uma conex√£o ativa com a <em>internet</em>. Al√©m disso √© muito comum aplicativos <em>web</em> acessarem recursos nativos como localiza√ß√£o, sistema de sons, baterias, etc.</p>

<p>Aqui voc√™ pode conferir algumas <em>APIs Web</em> para ter acesso a recursos que antigamente s√≥ eram poss√≠veis atrav√©s de aplica√ß√µes nativas: https://developer.mozilla.org/en-US/docs/Web/API</p>

<h2 id="aplica%C3%A7%C3%B5es-progressivas">Aplica√ß√µes progressivas</h2>

<p>J√° vimos que atrav√©s da <em>Web</em> podemos ter acesso a recursos muito poderosos, mas o que significa o <strong>P</strong> de PWA?</p>

<p>PWAs s√£o aplica√ß√µes progressivas, ou seja, se adaptam a diferentes cen√°rios e dispositivos.</p>

<p>Um exemplo j√° citado de cen√°rio adverso: dispositivo sem conex√£o com a <em>internet</em>. Quando voc√™ acessa o aplicativo m√≥vel do Twitter sem estar conectado a <em>internet</em>, ele te mostra os <em>tweets</em> que j√° foram carregados anteriormente. Ou seja, a sua experi√™ncia √© degradada, mas o aplicativo continua funcionando. A ideia de PWAs √© exatamente essa.</p>

<p>Se voc√™ tentar acessar uma PWA que precisa da localiza√ß√£o do usu√°rio a partir de um dispositivo sem GPS, a aplica√ß√£o deve estar preparada para buscar a localiza√ß√£o menos precisa (atrav√©s da rede) ou solicitar o endere√ßo ao usu√°rio. Com isso, quanto mais recursos o dispositivo tiver, melhor ser√° a experi√™ncia. Em outras palavras, teremos uma experi√™ncia <strong>progressiva</strong>.</p>

<h2 id="posso-instalar-%22sites%22%3F">Posso instalar "sites"?</h2>

<p>Uma d√∫vida comum ao aprender sobre PWAs √© sobre a instala√ß√£o da aplica√ß√£o. N√£o seria pr√°tico que um usu√°rio precisasse abrir o navegador e digitar a URL da nossa aplica√ß√£o sempre que quisesse acess√°-la. Com aplicativos nativos n√≥s temos os √≠cones na tela inicial do dispositivo.</p>

<p>Outro ponto √© que um aplicativo possui uma experi√™ncia mais imersiva, sem interfer√™ncias de outras abas do navegador, al√©m de barras de ferramentas, etc.</p>

<p><img src="/build/pwa/pwa-ifood.jpg" alt="Tela da PWA do ifood, que √© exatamente igual ao aplicativo nativo" class="big-image" loading="lazy" /></p>

<p>Como podemos ver, uma PWA pode se comportar visualmente exatamente como uma aplica√ß√£o nativa. As barras do navegador podem sumir, a cor da barra de notifica√ß√£o pode ser personalizada, etc.</p>

<p>Al√©m do mais, podemos optar por criar um atalho para essa aplica√ß√£o web direto em nossa tela inicial:</p>

<p><img src="/build/pwa/menu-instalar-ifood.jpg" alt='Tela do navegador com o menu aberto, mostrando a op√ß√£o de "Adicionar √† tela inicial"' class="big-image" loading="lazy" /></p>

<p>Mas claro, nem todo usu√°rio vai abrir o menu do navegador para adicionar um atalho √† tela inicial. O ideal seria poder ter um bot√£o de instalar essa aplica√ß√£o para que o usu√°rio n√£o tenha esse "esfor√ßo".</p>

<p><img src="/build/pwa/tela-instalacao-uber.jpg" alt="Mensagem sugerindo a instala√ß√£o da PWA do uber sem precisar abrir o menu do navegador" class="big-image" loading="lazy" /></p>

<p>Conforme podemos ver na imagem anterior, isso tamb√©m √© perfeitamente poss√≠vel. Al√©m de termos um bot√£o na aplica√ß√£o para instal√°-la, o pr√≥prio navegador ao identificar uma PWA pode sugerir sua instala√ß√£o. A ideia √© que isso fiquei cada vez mais natural, inclusive, com os navegadores tomando decis√µes mais assertivas ao fazer tais sugest√µes.</p>

<h2 id="como-desenvolver-pwas%3F">Como desenvolver PWAs?</h2>

<p>Como sou um desenvolvedor Web, o assunto de PWAs me anima bastante. A ideia deste post n√£o √© te ensinar a desenvolver PWAs, mas sim te apresentar ao conceito. Caso voc√™ tenha interesse na parte pr√°tica, vou deixar aqui algumas refer√™ncias.</p>

<p>Se voc√™ aprende melhor lendo, esse livro √© um √≥timo in√≠cio:</p>

<div class="iframe">
    <iframe style="width:120px;height:240px;" marginwidth="0" marginheight="0" scrolling="no" frameborder="0" src="//ws-na.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&OneJS=1&Operation=GetAdHtml&MarketPlace=BR&source=ss&ref=as_ss_li_til&ad_type=product_link&tracking_id=cviniciussd06-20&language=pt_BR&marketplace=amazon&region=BR&placement=B07BZK71NV&asins=B07BZK71NV&linkId=39b9fcf31f08c2d76b0d6f4284cb6a60&show_border=true&link_opens_in_new_window=true"></iframe>
</div>

<p>Por√©m uma desvantagem (na minha opini√£o) deste livro √© o uso de React para a cria√ß√£o da aplica√ß√£o. Eu gosto mais de conte√∫dos conceituais, que explicam a base sem o uso de muitas ferramentas.</p>

<p>Se voc√™ tamb√©m prefere esse tipo de conte√∫do, pode dar uma olhada nesse livro (um pouco mais caro):</p>

<div class="iframe" style="margin-bottom: 1rem;">
    <iframe style="width:120px;height:240px;" marginwidth="0" marginheight="0" scrolling="no" frameborder="0" src="//ws-na.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&OneJS=1&Operation=GetAdHtml&MarketPlace=BR&source=ss&ref=as_ss_li_til&ad_type=product_link&tracking_id=cviniciussd06-20&language=pt_BR&marketplace=amazon&region=BR&placement=B075HP52WY&asins=B075HP52WY&linkId=955ce63a435057d47ccd0bd81620193c&show_border=true&link_opens_in_new_window=true"></iframe>
</div>

<p>Agora se voc√™ prefere estudar atrav√©s de cursos e v√≠deos, super recomendo os treinamentos de front-end e de PWA da Alura. L√° voc√™ consegue toda a base para desenvolver uma PWA de forma profissional, aprendendo desde a base, passando por <em>JavaScript</em> avan√ßado e <em>APIs Web</em>, at√© <em>PWAs</em> de fato. Se for o seu caso, aqui tenho um cupom de 15% de desconto para estudar na Alura:
<a href="https://tidd.ly/4d42Myb">https://tidd.ly/4d42Myb</a></p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Charsets e Encodings: Como strings funcionam]]></title>
            <link href="https://dias.dev/2021-08-24-charsets-e-encodings-como-strings-funcionam/"/>
            <updated>2021-08-24T00:00:00+00:00</updated>
            <id>https://dias.dev/2021-08-24-charsets-e-encodings-como-strings-funcionam/</id>
            <content type="html"><![CDATA[<p>√â de conhecimento geral que computadores trabalham com n√∫meros, especificamente n√∫meros na base bin√°ria. Sabendo disso, como podemos representar o texto que eu estou escrevendo apenas com conjuntos de 0s e 1s? Como o computador, trabalhando apenas com n√∫meros, consegue lidar com textos?</p>

<h2 id="tabelas-de-caracteres-charsets">Tabelas de caracteres (Charsets)</h2>

<p>Para realizar essa tarefa, tabelas de caracteres (<em>charsets</em>) s√£o utilizadas. Com essas tabelas, algum caractere pode ser mapeado para algum n√∫mero. Esse n√∫mero que ser√° armazenado e manipulado pelos programas que lidam com textos. Mas como esse mapeamento √© feito?</p>

<h2 id="ascii">ASCII</h2>

<p>Uma das tabelas de caracteres mais antigas que se tem conhecimento √© a ASCII (<em>American Standard Code for Information Interchange</em>). Esta tabela cont√©m todos os n√∫meros e os caracteres usados pelo idioma ingl√™s, onde cada um desses caracteres √© mapeado para um n√∫mero e esse n√∫mero √© convertido diretamente para a base bin√°ria, sendo uma representa√ß√£o bastante simples. Os n√∫meros v√£o de 0 a 127, ou seja, qualquer caractere da tabela ASCII pode ser representado em at√© 7 <em>bits</em>, o que √© menos que 1 <em>byte</em> (1 <em>byte</em> = 8 <em>bits</em>).</p>

<p><img src="https://raw.githubusercontent.com/wiki/tomgibara/ascii-table/tables/ascii-table-1.1.png" alt="Tabela ASCII" /></p>

<p>Isso funcionava muito bem para textos que usavam ingl√™s como idioma (ou algum idioma com o mesmo conjunto de caracteres). Por√©m, diversos outros idiomas possuem caracteres que n√£o est√£o representados nesta tabela. Caracteres acentuados, por exemplo, n√£o est√£o na tabela ASCII. Como representar textos em portugu√™s, por exemplo?</p>

<h2 id="extended-ascii">Extended ASCII</h2>

<p>Como pudemos ver na imagem da tabela ASCII, os valores v√£o de 0 a 127. Isso pode ser representado com 7 <em>bits</em>.</p>

<p>Como foi citado no cap√≠tulo anterior, todos os caracteres da tabela ASCII podem ser representados com at√© 7 <em>bits</em>. Sendo assim, temos 1 bit "sobrando" para cada caractere completar 1 <em>byte</em>.</p>

<p>Pensando nisso, surgiram diversas outras tabelas de caracteres fazendo uso deste bit adicional para representar outros caracteres. Desta forma √© criada a tabela ASCII estendida: <em>Extended ASCII</em> ou <em>EASCII</em></p>

<p><img src="https://files.passeidireto.com/0b57a2e8-7fae-4e06-ac73-a7004f09a741/0b57a2e8-7fae-4e06-ac73-a7004f09a741.gif" alt="Tabela ASCII Estendida" /></p>

<p>Ao mesmo tempo, outros idiomas que possuem seu alfabeto sem nenhuma semelhan√ßa com o ingl√™s (como japon√™s ou russo) utilizavam tabelas completamente diferentes para representar seus caracteres.</p>

<h2 id="ascens%C3%A3o-da-web">Ascens√£o da Web</h2>

<p>O uso de tabelas diferentes funcionou muito bem enquanto os arquivos ficavam apenas em um computador ou eram compartilhados em redes locais (como de universidades). Por√©m, conforme a Web nasceu e cresceu, o compartilhamento de arquivos se tornou uma tarefa trivial. Como eu, no Brasil, poderia enviar um documento para o Egito, usando o alfabeto grego? Essa tarefa era simplesmente imposs√≠vel.</p>

<h2 id="unicode">Unicode</h2>

<p>Pensando em ter uma forma unificada de representar todos os caracteres conhecidos no mundo, em 1991 foi criada o <em>Unicode Consortium</em>. Essa iniciativa trabalha e tem encontros frequentes para garantir que h√° suporte a todos os idiomas e caracteres conhecidos pela humanidade, incluindo <em>emojis</em>. Parece um trabalho enorme e realmente √©.</p>

<p><em>Emojis</em>, por exemplo, foram sugeridos √† iniciativa em meados de 2000, por√©m apenas ap√≥s 2007 eles foram incorporados ao <em>Unicode</em>.</p>

<p>Ent√£o, se formos supersimplificar (muito), podemos dizer que o <em>Unicode Consortium</em> criou um grande <em>charset</em>, ou seja, uma grande tabela de caracteres. Por√©m, essa "tabela" √© gigante! Como representar estes n√∫meros enormes de forma eficiente?</p>

<h2 id="encodings">Encodings</h2>

<p>Aqui entram os encodings. O n√∫mero <strong>128 512</strong> (em hexadecimal, 1F600) representa o emoji de sorriso (üòÄ). Esse n√∫mero <strong>128 512</strong> pode ser representado de v√°rias formas dependendo do encoding selecionado para tal arquivo. Alguns encodings compat√≠veis com <em>Unicode</em> s√£o:
- UTF-8
- UTF-16
- UTF-32</p>

<p>Inicialmente eu acreditava que a diferen√ßa entre eles era apenas o n√∫mero de <em>bits</em> utilizado, sendo assim UTF-8 poderia representar menos caracteres j√° que usa menos bits. N√£o √© o caso. Todos eles podem consumir um n√∫mero vari√°vel de <em>bits</em> os organizando de forma diferente. Cada encoding pode ser mais vantajoso dependendo do cen√°rio. Para representar textos (como esse que escrevo) e mensagens transferidas pela rede, UTF-8 √© o mais recomendado e utilizado, visto que sua organiza√ß√£o permite que os caracteres mais comuns ocupem o menor espa√ßo poss√≠vel. J√° UTF-16 ocupa menos espa√ßo representando caracteres com n√∫meros maiores na "tabela" unicode.</p>

<h2 id="conclus%C3%A3o">Conclus√£o</h2>

<p>√â comum utilizarmos fun√ß√µes de convers√£o de encoding sem entender bem o que estamos fazendo e muito provavelmente todo mundo que desenvolve <em>software</em> para a <em>web</em> j√° se deparou com o seguinte problema:</p>

<p><img src="https://i.stack.imgur.com/590Tg.png" alt="Texto com caracteres mal codificados" /></p>

<p>Entender como funcionam charsets e encodings de texto al√©m de ser interessante e divertido, pode nos ajudar a compreender melhor problemas deste tipo e principalmente encontrar a solu√ß√£o de forma mais simples.</p>

<p>Creio que seja seguro afirmar que a grande maioria dos textos que tratamos como desenvolvedores utiliza UTF-8 como encoding e neste artigo n√≥s entendemos o motivo disso e como o tratamento de textos evoluiu at√© chegar a esse ponto.</p>

<p>Se voc√™ quiser aprender mais sobre esse assunto, pode considerar assinar a Alura. L√° existem treinamentos que tratam sobre charsets, encoding, manipula√ß√£o de <em>strings</em> e muito mais. Caso pretenda estudar na Alura, <a href="https://tidd.ly/4d42Myb">neste link</a> voc√™ tem um desconto de 15%.</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Como o PHP funciona na Web?]]></title>
            <link href="https://dias.dev/2021-06-15-como-o-php-funciona-na-web/"/>
            <updated>2021-06-15T00:00:00+00:00</updated>
            <id>https://dias.dev/2021-06-15-como-o-php-funciona-na-web/</id>
            <content type="html"><![CDATA[<p>O PHP √© o que conhecemos como linguagem <em>server-side</em>, ou seja, ele roda nos servidores web, e n√£o nos navegadores.</p>

<p>Isso j√° √© de conhecimento geral, mas nem todos entendem como uma requisi√ß√£o sai do navegador e chega em seu c√≥digo PHP. √â exatamente sobre isso que vamos tratar neste artigo.</p>

<h2 id="como-funciona-a-web%3F">Como funciona a Web?</h2>

<p>Antes de falarmos sobre o papel do PHP na Web, √© muito importante entendermos como a Web funciona. O protocolo HTTP √© o que torna toda a comunica√ß√£o entre nosso navegador e servidores, poss√≠vel, ent√£o √© de suma import√¢ncia que a gente estude ele.</p>

<p>Neste v√≠deo eu expliquei um pouco de como funciona o processo desde quando damos <em>Enter</em> em nosso navegador at√© termos uma resposta em nossa tela. Vale a pena conferir antes de continuar lendo este artigo:</p>

<p><lite-youtube videoid="B2IWlnJ_dt0" style="background-image: url('https://i.ytimg.com/vi/B2IWlnJ_dt0/hqdefault.jpg');">
    <a href="https://youtube.com/watch?v=B2IWlnJ_dt0" class="lty-playbtn" title="Reproduzir v√≠deo">
        <span class="lyt-visually-hidden">Reproduzir v√≠deo: Como funciona a Web? - A internet por baixo dos panos | Dias de Dev</span>
    </a>
</lite-youtube></p>

<p>Existem v√°rias outras refer√™ncias (inclusive mais completas) para voc√™ conhecer as tecnologias por tr√°s da Web. Vou deixar aqui algumas refer√™ncias:
- <a href="https://amzn.to/3lzFVkD">Desconstruindo a Web: As tecnologias por tr√°s de uma requisi√ß√£o</a>
- <a href="https://amzn.to/35k9rT1">HTTP: The Definitive Guide</a>
- <a href="https://amzn.to/3gEgz22">Learning Http/2: A Practical Guide for Beginners</a>
- <a href="https://tidd.ly/4d42Myb">Cursos de HTTP na Alura</a></p>

<p>Com esse conhecimento, j√° podemos partir para o foco deste artigo: como o <strong>PHP</strong> funciona na Web?</p>

<h2 id="cgi-_common-gateway-interface_">CGI (<em>Common Gateway Interface</em>)</h2>

<p>A primeira forma de se executar c√≥digo em servidores ao receber uma requisi√ß√£o HTTP foi atrav√©s de uma t√©cnica chamada CGI (<em>Common Gateway Interface</em>).</p>

<p>Esta t√©cnica consistia em basicamente um servidor Web (como Apache, por exemplo) receber uma requisi√ß√£o HTTP e executar um processo enviando os dados da requisi√ß√£o atrav√©s da entrada padr√£o. A sa√≠da do processo era lida pelo servidor Web e devolvida em uma resposta HTTP.</p>

<p>Assim o PHP nasceu, sendo uma esp√©cie de <em>framework</em> C. O Apache executava um programa escrito em C, onde PHP era um conjunto de ferramentas para facilitar a escrita, principalmente de <em>templates</em> (para n√£o misturar C e HTML).</p>

<p>Esta √© a forma mais rudimentar de se executar um c√≥digo <em>server-side</em> e n√£o √© mais recomendada, pois h√° alternativas mais interessantes que veremos neste artigo.</p>

<h2 id="apache-mod_php">Apache mod_php</h2>

<p>Conforme o PHP (e a Web em si) foi evoluindo, a abordagem utilizando CGI foi se mostrando ineficaz, desperdi√ßando recursos de processamento.</p>

<p>Neste momento surgiu um m√≥dulo do PHP para Apache, o famoso <code>mod_php</code>. Esse m√≥dulo "anexava" um execut√°vel do PHP em cada processo do Apache, ou seja, a cada processo que o Apache criava para servir uma requisi√ß√£o, o execut√°vel do PHP era tamb√©m inicializado, mesmo que a requisi√ß√£o fosse apenas para servir arquivos est√°ticos e o PHP n√£o fosse necess√°rio.</p>

<p>Isso era muito mais r√°pido do que utilizar CGI, mas ainda havia muito desperd√≠cio de recursos. O apache evoluiu a ponto de n√£o precisar criar um processo a cada nova requisi√ß√£o e passou a trabalhar com <em>threads</em>, mas al√©m dessa evolu√ß√£o ter demorado para acontecer, esse modelo n√£o funciona bem com o <code>mod_php</code>.</p>

<h2 id="fastcgi-e-php-fpm">FastCGI e PHP-FPM</h2>

<p>Com a nova solu√ß√£o do <code>mod_php</code> tamb√©m se mostrando ineficaz perante a tantas evolu√ß√µes do PHP e da Web (ambos sempre cresceram juntos), o protocolo FastCGI passou a ser utilizado. Com isso, um servidor Web recebia as requisi√ß√µes e apenas se fosse necess√°rio algum processamento, executaria o PHP.</p>

<p>Por√©m, essa execu√ß√£o n√£o era como no CGI. Um conceito de "processos persistentes" foi utilizado, diminuindo muito a quantidade de recursos necess√°rios para processar cada requisi√ß√£o. Um √∫nico processo agora passa a ser capaz de tratar diversas requisi√ß√µes e n√£o apenas uma. Com isso todo o <em>overhead</em> de criar e matar processos a cada requisi√ß√£o foi drasticamente reduzido.</p>

<p>Para extrair o m√°ximo do protocolo FastCGI, foi desenvolvida uma ferramenta chamada PHP-FPM (<em>FastCGI Process Manager</em>). Este servidor de aplica√ß√£o permite que realizemos diversas configura√ß√µes como o n√∫mero de processos <em>workers</em>, a quantidade de recursos liberada para cada processo e muito mais. Este √© o software utilizado atualmente para termos um servidor FastCGI em produ√ß√£o com PHP.</p>

<p>Atualmente, qualquer servidor web que saiba se comunicar atrav√©s do protocolo FastCGI pode ser utilizado em conjunto com PHP, mas o <em>Nginx</em> ganhou muita for√ßa por prometer (e segundo benchmarks, cumprir) entregar diversas melhorias de performance em rela√ß√£o ao Apache. Os recursos s√£o mais bem gerenciados e o uso de programa√ß√£o ass√≠ncrona atrav√©s de <em>multiplexing</em> de I/O trazem ganhos expressivos quando comparamos com o ainda amplamente utilizado Apache.</p>

<h2 id="arquitetura-_share-nothing_">Arquitetura <em>share-nothing</em></h2>

<p>Em qualquer uma das abordagens citadas at√© agora, uma das principais filosofias do PHP se mant√©m: a <em>share-nothing architecture</em>.</p>

<p>A ideia por tr√°s disso √© n√£o compartilhar nenhum recurso entre uma requisi√ß√£o e outra. Por mais que o mesmo processo possa ser utilizado para servir m√∫ltiplas requisi√ß√µes, em nosso c√≥digo, cada execu√ß√£o √© como um novo processo. Ao finalizar a execu√ß√£o de um c√≥digo PHP, todas as vari√°veis s√£o exclu√≠das, todos os recursos s√£o liberados. Praticamente nada √© armazenado entre uma requisi√ß√£o e outra.</p>

<p>Isso permitiu e ainda permite que o PHP tenha uma arquitetura muito simples de escalar e isso √© um dos fatores que contribu√≠ram para a ampla ado√ß√£o do PHP como linguagem back-end Web.</p>

<p>A abordagem utilizando Nginx + PHP-FPM √© a ideal para grande parte das aplica√ß√µes que usam PHP, por√©m existem cen√°rios onde ainda mais performance √© necess√°ria.</p>

<h2 id="servidores-auto-contidos">Servidores auto-contidos</h2>

<p>Quando temos milh√µes de requisi√ß√µes chegando ou comunica√ß√£o em tempo real acontecendo, o fato de ser necess√°ria a inicializa√ß√£o de todas as vari√°veis novamente e o in√≠cio do c√≥digo de toda nossa aplica√ß√£o ter que ser realizada a cada requisi√ß√£o pode ser um peso. Imagine que a cada requisi√ß√£o seu <em>framework</em> favorito (que provavelmente √© bem pesado) precisa ser inicializado novamente.</p>

<p>Para resolver os problemas deste tipo de aplica√ß√£o que demanda um n√≠vel a mais de performance, servidores auto-contidos podem ser utilizados. Um servidor auto-contido √© um serivdor web exposto pela pr√≥pria aplica√ß√£o, ou seja, seu pr√≥prio c√≥digo PHP recebe diretamente as requisi√ß√µes.</p>

<p>Com isso a inicializa√ß√£o da sua aplica√ß√£o pode ser feita uma √∫nica vez e a cada nova requisi√ß√£o, podemos somente executar o c√≥digo necess√°rio, sem necessidade de levantar de novo o <em>framework</em>, buscar as configura√ß√µes, ler vari√°veis de ambiente, processar as depend√™ncias, definir as rotas, etc.</p>

<p>Essa abordagem j√° √© poss√≠vel h√° muito tempo. Um dos precursores desta t√©cnica √© o <a href="https://github.com/php-pm/php-pm">PHP-PM</a> que usa o <a href="https://reactphp.org/">ReactPHP</a> por baixo dos panos. O ReactPHP facilita a execu√ß√£o de c√≥digo ass√≠ncrono e n√£o bloqueante no PHP atrav√©s de um <em>Event Loop</em>. N√≥s falamos um pouco sobre programa√ß√£o ass√≠ncrona <a href="/2020-09-16-php-assincrono-de-forma-nativa/">neste post</a>. O ReactPHP torna esta tarefa MUITO mais f√°cil, por isso ferramentas como PHP-PM puderam surgir.</p>

<p>Outros <em>frameworks</em> como <a href="https://amphp.org/">Amp PHP</a> t√™m a mesma proposta, por√©m uma ferramenta um pouco diferente tem chamado muita aten√ß√£o nos √∫ltimos anos e levado essa proposta para outro n√≠vel</p>

<h2 id="swoole">Swoole</h2>

<p>√â imposs√≠vel falar de servidores auto-contidos PHP e n√£o citar o <a href="https://www.swoole.co.uk/">Swoole</a>.</p>

<p>A principal diferen√ßa entre o Swoole e as demais ferramentas citadas de servidores auto-contidos √© que o Swoole n√£o √© um componente em PHP e sim uma extens√£o, ou seja, o Swoole foi escrito em C e compilado para ser "integrado" ao PHP. Isso al√©m de conceder ainda mais performance para o c√≥digo, ainda d√° poderes a mais para o Swoole como lidar de forma ass√≠ncrona com c√≥digo que originalmente seria s√≠ncrono (como com PDO e curl, por exemplo).</p>

<p>J√° existe material por a√≠ sobre Swoole, inclusive <a href="https://youtube.com/watch?v=GCECSLtT49U">esse v√≠deo</a> no meu canal e o <a href="https://amzn.to/3gxamov">livro</a> escrito por um dos criadores da ferramenta, por isso n√£o vou transformar esse artigo em um tutorial, mas vale a pena pesquisar mais a fundo.</p>

<h2 id="conclus%C3%A3o">Conclus√£o</h2>

<p>Vimos neste artigo que h√° v√°rias formas para fazer com que uma requisi√ß√£o chegue no PHP. Algumas bem antigas, outras bem modernas.</p>

<p>Atualmente as 2 op√ß√µes aceit√°veis s√£o utilizando PHP-FPM ou algum servidor auto-contido. Nenhuma das 2 abordagens tira o papel de servidores Web como o amado Apache ou o moderno Nginx.</p>

<p>No caso do PHP-FPM precisamos de um servidor para receber as requisi√ß√µes HTTP e enviar as chamadas para o PHP com FastCGI. No caso de um servidor auto-contido, podemos ter um proxy reverso servindo os arquivos est√°ticos e realizando cache, por exemplo, enquanto o servidor auto-contido responde apenas as requisi√ß√µes realmente necess√°rias.</p>

<p>Se voc√™ quiser aprender mais sobre algum desses assuntos, pode considerar assinar a Alura. L√° existem treinamentos (gravados por mim) sobre Nginx, ReactPHP, Swoole e muito mais. Caso pretenda estudar na Alura, <a href="https://tidd.ly/4d42Myb">neste link</a> voc√™ tem um desconto de 15%.</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Por que n√£o usar XAMPP]]></title>
            <link href="https://dias.dev/2021-04-10-por-que-nao-usar-xampp/"/>
            <updated>2021-04-10T00:00:00+00:00</updated>
            <id>https://dias.dev/2021-04-10-por-que-nao-usar-xampp/</id>
            <content type="html"><![CDATA[<p>Umas das perguntas mais frequentes que vejo em comunidades de iniciantes em PHP s√£o:
- Como instalar o XAMPP?
- Como configurar URLs amig√°veis no XAMPP?
- Por que o MySQL n√£o funciona com XAMPP?</p>

<p>A resposta que eu gostaria de dar geralmente √©: ‚Äúpare de usar XAMPP!‚Äù, mas sempre tento ajudar.</p>

<p>A ideia desse artigo √© expor a raz√£o para eu n√£o recomendar XAMPP e acreditar que essa ferramenta traz muito mais
problemas do que solu√ß√£o.</p>

<h2 id="o-que-%C3%A9-e-para-que-serve-xampp%3F">O que √© e para que serve XAMPP?</h2>

<p>Antes de falarmos os motivos de n√£o usar XAMPP, √© importante entendermos o que √© a ferramenta. XAMPP √© uma sigla para
<strong>A</strong>pache, <strong>M</strong>ySQL, <strong>P</strong>HP e <strong>P</strong>earl, sendo o <strong>X</strong> inicial para identificar que esta ferramenta √© multiplataforma
(funciona em Windows, Linux e Mac).</p>

<h2 id="qual-o-problema-dessa-abordagem%3F">Qual o problema dessa abordagem?</h2>

<p>Existem alguns problemas com o uso dessa ferramenta, principalmente por iniciantes (que s√£o justamente o p√∫blico alvo da
ferramenta).</p>

<h3 id="processo-de-aprendizado">Processo de aprendizado</h3>

<p>Ao aprender Java, C#, C ou alguma outra linguagem considerada mais <em>enterprise</em>, √© comum aprendermos a sintaxe primeiro,
rodando simples c√≥digos na linha de comando. Depois estudamos um pouco sobre o paradigma principal usado na linguagem e
s√≥ ent√£o, se for o caso de uma linguagem Web, aprendemos a us√°-la na Web.</p>

<p>Por que um iniciante aprenderia a usar PHP na Web configurando um Apache e se conectando a um banco MySQL tudo de uma
vez s√≥?</p>

<p>Infelizmente muitos treinamentos que encontramos pela internet s√£o ministrados por pessoas que n√£o se atualizaram e nem
ao menos trabalham com as tecnologias que se prop√µem a ensinar.</p>

<h3 id="dificuldades-desnecess%C3%A1rias">Dificuldades desnecess√°rias</h3>

<p>Supondo que voc√™ j√° conhe√ßa a linguagem e queira apenas um ambiente simplificado para continuar seus estudos. Como ter
Apache, MySQL e Pearl instalados na sua m√°quina pode te ajudar? Problemas de configura√ß√£o no Apache, configura√ß√µes
espec√≠ficas para frameworks‚Ä¶ Essas complica√ß√µes infelizmente s√£o muito comuns e geradas pelo XAMPP quando talvez tudo que
precis√°vamos era do PHP instalado.</p>

<h2 id="o-que-aprender-primeiro%3F">O que aprender primeiro?</h2>

<p>Minha recomenda√ß√£o sempre √© para aprender primeiro a linguagem que se vai utilizar. Como estamos falando do XAMPP,
aprender PHP. Estude a sintaxe da linguagem, entenda como aplicar os conceitos de l√≥gica de programa√ß√£o usando a
linguagem. Estude sobre Orienta√ß√£o a Objetos, aprenda a organizar um c√≥digo de exemplo. S√≥ depois voc√™ vai pensar em
usar PHP no mundo da Web. E quando chegar o momento, voc√™ n√£o vai sair de cara configurando um servidor Web como o
Apache.</p>

<h2 id="como-usar-php-sem-xampp%3F">Como usar PHP sem XAMPP?</h2>

<p>No cap√≠tulo anterior citei que primeiro os iniciantes deveriam estudar a sintaxe da linguagem e executar alguns c√≥digos
na linha de comando, mas como rodar um c√≥digo PHP sem XAMPP?</p>

<p>Simples: Instalando o PHP no seu computador.</p>

<p>Existem diversas maneiras de se usar o PHP em cada sistema operacional, ent√£o vou citar aqui algumas formas, mas n√£o se
limite a elas.</p>

<h3 id="como-instalar-php-no-windows%3F">Como instalar PHP no Windows?</h3>

<p>Para usar o PHP no Windows, tudo que precisamos fazer √© baixar o execut√°vel na p√°gina oficial de downloads do PHP para
Windows: https://windows.php.net/download</p>

<p>Nesta p√°gina voc√™ ter√° acesso ao download de um zip, e neste zip voc√™ encontra o execut√°vel do PHP. Sendo assim, basta
extrair onde desejar que o PHP seja instalado e pronto. Desta forma, para executar o PHP, acesse no <em>Prompt de Comando</em>
a pasta em quest√£o (usando o comando <code>cd</code>) e a partir de l√° voc√™ poder√° executar o comando <code>php</code>.</p>

<p>Para executar o PHP a partir de qualquer pasta no prompt de comando, voc√™ pode adicionar o caminho de instala√ß√£o na
vari√°vel <em>PATH</em> do sistema. Existem diversos tutoriais explicando o que √© e como modificar a vari√°vel de sitema <em>PATH</em>,
mas se voc√™ quiser que eu fale disso, me conta nos coment√°rios.</p>

<h3 id="como-instalar-php-no-linux%3F">Como instalar PHP no Linux?</h3>

<p>A maioria das distribui√ß√µes Linux j√° v√™m com um pacote PHP pronto para ser instalado atrav√©s do gerenciador de pacotes.
Em distribui√ß√µes baseadas em <em>Debian</em>, por exemplo, basta executar <code>sudo apt install php</code> e voc√™ j√° ter√° o PHP instalado
em sua m√°quina.</p>

<p>Sempre h√° a op√ß√£o de compilar o PHP de forma personalizada e eu recomendo fazer isso quando voc√™ j√° tiver mais intimdade
com a linguagem. √â um bom aprendizado.</p>

<h3 id="como-instalar-php-no-mac%3F">Como instalar PHP no Mac?</h3>

<p>No momento da escrita deste artigo o PHP j√° vem instalado no Mac por padr√£o. :-D</p>

<p>Por√©m via de regra uma vers√£o mais antiga e com menos extens√µes v√™m instalada, ent√£o o ideal √© utilizar o Homebrew
para instalar o PHP e facilitar instala√ß√£o de extens√µes no futuro.</p>

<h2 id="e-como-aprender-web-sem-apache%3F">E como aprender Web sem Apache?</h2>

<p>Se voc√™ tem o PHP na sua m√°quina voc√™ j√° tem tamb√©m um servidor web instalado, sem precisar alterar arquivos de configura√ß√£o, abrir
portas, etc. O PHP vem com um <a href="https://www.php.net/manual/en/features.commandline.webserver.php">servidor embutido</a>
desde 2011 e ele serve exatamente para termos um ambiente web de desenvolvimento simplificado.</p>

<p>Al√©m de servir conte√∫dos processados pelo PHP, este servidor tamb√©m √© capaz de servir arquivos est√°ticos e realizar
roteamento simples para um ponto de entrada em sua aplica√ß√£o, por exemplo.</p>

<p>E claro, quando chegar o momento de sair do ambiente de desenvolvimento e aprender sobre realizar deploys, voc√™ vai
estudar sobre servidores Web. Muito provavelmente voc√™ vai se deparar com artigos sobre Nginx, PHP-FPM, etc. Mas isso √©
assunto para outro momento, e n√£o para o in√≠cio do aprendizado em PHP.</p>

<h2 id="como-fa%C3%A7o-para-sair-de-2011-no-php%3F">Como fa√ßo para sair de 2011 no PHP?</h2>

<p>Se voc√™ percebeu que est√° aprendendo PHP de forma desatualizada e supercomplicada sem necessidade, n√£o se preocupe nem
se sinta sozinho. Infelizmente a maioria de n√≥s passou por isso. O primeiro passo para resolver um problema √© entender
que h√° um problema.</p>

<p>Dado esse primeiro passo (inclusive, parab√©ns), vamos pesquisar materiais atualizados para aprendermos PHP como deve ser.</p>

<p>Um dos melhores livros que li como iniciante √© o <a href="https://amzn.to/3fTOPaF">Modern PHP</a>.
Se preferir em Portugu√™s, <a href="https://amzn.to/3dLk4lx">PHP Moderno</a>. Esse livro √© de antes do PHP 7 ser lan√ßado ent√£o ele
trata da evolu√ß√£o da linguagem sem entrar nos detalhes de sintaxes de 2016 pra c√°.</p>

<p>A partir da√≠, caso voc√™ tenha aprendido a usar o PHP 5, se atualize nas novidades da linguagem. No momento da escrita
deste post n√≥s estamos na <a href="https://youtube.com/playlist?list=PL3j2sfzg3FPuQXklYI2LumuG7jgZsj7cK">vers√£o 8</a>.</p>

<h2 id="conclus%C3%A3o">Conclus√£o</h2>

<p>XAMPP foi uma ferramenta que ajudou bastante gente que precisava de um ambiente de desenvolvimento web um pouco mais
simples antes de 2011, j√° que ele facilitava a instala√ß√£o da praticamente a √∫nica op√ß√£o do mercado: Apache.</p>

<p>Por√©m h√° 10 anos Apache n√£o √© mais necess√°rio para um ambiente simples de aprendizado e desenvolvimento, e se o assunto
for um servidor de produ√ß√£o, XAMPP nunca foi uma alternativa vi√°vel. Sendo assim, para desenvolvedores PHP, n√£o h√°
motivos v√°lidos para uso do XAMPP nos dias atuais.</p>

<p>Se voc√™ quiser aprender mais sobre algum desses assuntos, pode considerar assinar a Alura. L√° existem treinamentos (gravados por mim) sobre PHP, Nginx e muito mais. Caso pretenda estudar na Alura, <a href="https://tidd.ly/4d42Myb">neste link</a> voc√™ tem um desconto de 15%.</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Requisi√ß√µes HTTP paralelas com PHP]]></title>
            <link href="https://dias.dev/2021-03-13-requisicoes-http-paralelas-com-php/"/>
            <updated>2021-03-13T00:00:00+00:00</updated>
            <id>https://dias.dev/2021-03-13-requisicoes-http-paralelas-com-php/</id>
            <content type="html"><![CDATA[<h2 id="i%2Fo-n%C3%A3o-bloqueante-programa%C3%A7%C3%A3o-ass%C3%ADncrona">I/O n√£o bloqueante (programa√ß√£o ass√≠ncrona)</h2>

<p>Em um <a href="/2020-09-16-php-assincrono-de-forma-nativa/">post anterior</a> falei bastante sobre como o PHP trabalha por baixo dos panos de forma nativa com I/O n√£o
bloqueante, e consequentemente com programa√ß√£o ass√≠ncrona. Usando os conhecimentos daquele post com conhecimentos de
<em>sockets</em> e HTTP seria poss√≠vel realizarmos chamadas HTTP ass√≠ncronas e process√°-las conforme elas fossem recebidas.
Por√©m √© bastante comum podermos nos dar ao luxo de processar todas as respostas HTTP depois de prontas, desde que todas
as requisi√ß√µes tenham sido feitas de forma concorrente.</p>

<h2 id="curl">cURL</h2>

<p>Como realizar requisi√ß√µes HTTP usando <em>sockets</em> pode se tornar uma tarefa muito complicada, principalmente em cen√°rios
onde precisamos enviar dados (requisi√ß√µes POST, por exemplo), cURL √© uma alternativa muito interessante. Essa biblioteca
√© pensada especialmente em realizar requisi√ß√µes pela rede e possui diversos facilitadores.</p>

<h2 id="o-problema">O problema</h2>

<p>Entendido o contexto das tecnologias que temos dispon√≠veis, vamos falar do problema que temos em m√£os. Existe uma API
que fornece informa√ß√µes sobre o universo <em>Star Wars</em>. Essa API √© gratuita e vai servir perfeitamente para nosso exemplo.</p>

<p>O que queremos fazer √© buscar a lista de filmes (atrav√©s da url https://swapi.dev/api/films/) e para cada filme buscar
os seus detalhes em outra URL (https://swapi.dev/api/films/:id/).</p>

<h3 id="solu%C3%A7%C3%A3o-bloqueante">Solu√ß√£o bloqueante</h3>

<p>Usando o <code>cURL</code> de forma ‚Äúpadr√£o‚Äù, ou seja, bloqueante, podemos atingir este objetivo com o seguinte c√≥digo:</p>

<pre><code class="php">&lt;?php

$handle = curl_init('https://swapi.dev/api/films/');
// informa que n√£o queremos exibir a resposta diretamente, mas sim pegar seu retorno
curl_setopt($handle, CURLOPT_RETURNTRANSFER, true);
$response = curl_exec($handle);
curl_close($handle);

$data = json_decode($response, true);
$movies = $data['results'];

foreach ($movies as $movie) {
    // Alterando o protocolo para https
    $url = str_replace('http:', 'https:', $movie['url']);
    $handle = curl_init($url);
    curl_setopt($handle, CURLOPT_RETURNTRANSFER, true);
    $response = curl_exec($handle);

    $movieData = json_decode($response, true);
    var_dump($movieData);
}
</code></pre>

<p>O problema desta abordagem √© que cada requisi√ß√£o para os detalhes do filme vai travar a execu√ß√£o do PHP, fazendo
com que a pr√≥xima requisi√ß√£o s√≥ seja iniciada quando a anterior for finalizada.</p>

<h3 id="solu%C3%A7%C3%A3o-n%C3%A3o-bloqueante">Solu√ß√£o n√£o bloqueante</h3>

<p>Para informarmos um determinado n√∫mero de requisi√ß√µes e realizarmos todas de uma vez, podemos usar o <code>curl_multi_init</code>.</p>

<pre><code class="php">&lt;?php

// Primeira requisi√ß√£o como no c√≥digo anterior
$movies = $data['results'];

// Inicializa o handle de m√∫ltiplas conex√µes
$multiHandle = curl_multi_init();

// Armazena cada handle individual em um array
// al√©m de adicion√°-los ao $multiHandle
$handles = [];
foreach ($movies as $i =&gt; $movie) {
    $url = str_replace('http:', 'https:', $movie['url']);
    $handles[$i] = curl_init($url);
    curl_setopt($handles[$i], CURLOPT_RETURNTRANSFER, true);
    curl_multi_add_handle($multiHandle, $handles[$i]);
}
</code></pre>

<p>Assim n√≥s temos diversos <em>handles</em> do <code>cURL</code> adicionados a um gerenciador de m√∫ltiplas requisi√ß√µes. Quando executarmos o
<code>$multiHandle</code>, todas as requisi√ß√µes ser√£o feitas em paralelo. Maravilha, n√£o √© mesmo?</p>

<p>Infelizmente n√£o √© t√£o simples assim. N√£o basta fazer um <code>curl_multi_exec</code> e receber um array de respostas. A fun√ß√£o
<code>curl_multi_exec</code> inicia as requisi√ß√µes, por√©m n√£o bloqueia o c√≥digo, ou seja, n√≥s precisamos ficar em um <em>loop</em> verificando
se todas as requisi√ß√µes j√° foram feitas. Algo como:</p>

<pre><code class="php">do {
    $result = curl_multi_exec($multiHandle, $numberOfMissingHandles);
} while ($numberOfMissingHandles &gt; 0);

// Processar respostas
</code></pre>

<p>A vari√°vel <code>$numberOfMissingHandles</code> √© passada por refer√™ncia e √© preenchida com o n√∫mero dos <em>handles</em> que faltam ser
resolvidos. Em outras palavras, enquanto esse valor n√£o chegar a 0, temos requisi√ß√µes sendo processadas.</p>

<p>Depois de sair desse <em>loop</em>, podemos recuperar as respostas de todas as requisi√ß√µes, ent√£o voltamos para a tarefa f√°cil:</p>

<pre><code class="php">// Por isso armazenamos o array de $handles
foreach ($handles as $handle) {
    // Usamos curl_multi_getcontent para recuperar a resposta
    // de cada um dos handles que foi executado pelo curl_multi_exec
    $response = curl_multi_getcontent($handle);
    curl_multi_remove_handle($multiHandle, $handle);
    curl_close($handle);

    $movieData = json_decode($response, true);
    var_dump($movieData);
}
</code></pre>

<p>Com isso n√≥s atingimos o objetivo de realizar todas as requisi√ß√µes de uma vez e s√≥ depois ler as respostas.</p>

<h3 id="mal-uso-de-recursos">Mal uso de recursos</h3>

<p>O problema da nossa abordagem √© que a fun√ß√£o <code>curl_multi_exec</code> retorna imediatamente, sem esperar por nenhuma atividade
nos <em>handles</em>, ou seja, se as requisi√ß√µes forem demoradas ou houverem muitas requisi√ß√µes (ou ambos), esse <em>loop</em> vai ser
executado de forma muito r√°pida, por muito tempo. Isso vai fazer com que o uso de CPU v√° ao topo, atrasando inclusive o
processo de realizar requisi√ß√µes, afinal de contas o sistema operacional precisa destinar certos recursos para essa tarefa.</p>

<p>Para mitigar esse problema, podemos usar uma fun√ß√£o chamada <code>curl_multi_select</code>. Ela √© semelhante √† <code>stream_select</code> que
vimos no post sobre <a href="/2020-09-16-php-assincrono-de-forma-nativa/">PHP ass√≠ncrono</a>. Essa fun√ß√£o espera que alguma
atividade aconte√ßa nos handles que estamos utilizando. A diferen√ßa √© que ela n√£o recebe um array, mas sim o nosso
<code>$multiHandle</code>. Ent√£o tudo que temos de informa√ß√£o √© quantos <em>handles</em> possuem atividade no momento, mas n√£o quais deles.
Mas tudo bem, j√° que o nosso prop√≥sito √© ler todos apenas no final.</p>

<p>A fun√ß√£o <code>curl_multi_select</code> deve ser chamada ap√≥s o <code>curl_multi_exec</code>, j√° que √© essa que inicia as requisi√ß√µes efetivamente.
Ent√£o o nosso primeiro <em>loop</em> ficaria assim:</p>

<pre><code class="php">do {
    $result = curl_multi_exec($multiHandle, $numberOfMissingHandles);
    $descriptorsCount = curl_multi_select($multiHandle);
} while ($numberOfMissingHandles &gt; 0);
</code></pre>

<p>Onde <code>$descriptorsCount</code> √© o n√∫mero de handles que possuem alguma atividade nesse exato momento. Caso esse n√∫mero seja
<code>-1</code>, significa que aconteceu algum erro.</p>

<p>Dessa forma esse <em>loop</em> ser√° executado menos vezes e em um intervalo maior, ou seja, menos CPU ser√° consumida.</p>

<h3 id="tratamento-de-erros">Tratamento de erros</h3>

<p>Falando em erros, nosso c√≥digo est√° supondo que tudo vai correr bem. Nesse primeiro <em>loop</em> n√≥s precisamos realizar algumas
verifica√ß√µes. Ent√£o no final, teremos algo como:</p>

<pre><code class="php">do {
    $result = curl_multi_exec($multiHandle, $numberOfMissingHandles);
    if ($result !== CURLM_OK) { // CURLM_OK √© uma constante que indica sucesso nesse caso
        throw new RuntimeException('Error executing all the requests', $result);
    }

    $descriptorsCount = curl_multi_select($multiHandle);
    if ($descriptorsCount === -1) {
        throw new RuntimeException('Error checking for activity');
    }
} while ($numberOfMissingHandles);
</code></pre>

<h3 id="c%C3%B3digo-final">C√≥digo final</h3>

<p>Com isso finalizamos todo o processamento necess√°rio para realizar requisi√ß√µes paralelas com PHP. O c√≥digo completo vai
se parecer com isso:</p>

<pre><code class="php">&lt;?php

$handle = curl_init('https://swapi.dev/api/films/');
curl_setopt($handle, CURLOPT_RETURNTRANSFER, true);
$response = curl_exec($handle);
curl_close($handle);

$data = json_decode($response, true);
$movies = $data['results'];

$multiHandle = curl_multi_init();

$handles = [];
foreach ($movies as $i =&gt; $movie) {
    $url = str_replace('http:', 'https:', $movie['url']);
    $handles[$i] = curl_init($url);
    curl_setopt($handles[$i], CURLOPT_RETURNTRANSFER, true);
    curl_multi_add_handle($multiHandle, $handles[$i]);
}

do {
    $result = curl_multi_exec($multiHandle, $numberOfMissingHandles);
    if ($result !== CURLM_OK) {
        throw new RuntimeException('Error executing all the requests', $result);
    }

    $descriptorsCount = curl_multi_select($multiHandle);
    if ($descriptorsCount === -1) {
        throw new RuntimeException('Error checking for activity');
    }
} while ($numberOfMissingHandles &gt; 0);

foreach ($handles as $handle) {
    $response = curl_multi_getcontent($handle);
    curl_multi_remove_handle($multiHandle, $handle);
    curl_close($handle);

    $movieData = json_decode($response, true);
    var_dump($movieData);
}
</code></pre>

<p>Esse c√≥digo provavelmente pode ser refatorado para torn√°-lo um pouco mais leg√≠vel, mas acredito que a l√≥gica por tr√°s dele
tenha ficado clara. Caso contr√°rio, voc√™ pode usar a sess√£o de coment√°rios dessa p√°gina para fazer perguntas.</p>

<h2 id="benchmarks">Benchmarks</h2>

<p>Agora que temos 2 vers√µes de c√≥digo que resolvem o mesmo problema de formas diferentes, podemos testar a sua performance.
Para quem usa sistemas <em>Unix</em> (<em>Linux</em> ou <em>Mac</em>) existe um comando chamado <code>time</code> que √© muito √∫til para verifica√ß√µes simples
como essas.</p>

<p>A primeira vers√£o do nosso c√≥digo (bloqueante) gera essa informa√ß√£o quando executo o seguinte comando (sendo <code>star-wars.php</code>o nome do nosso arquivo):</p>

<pre><code class="console">$ time php star-wars.php

php star-wars.php  0.14s user 0.04s system 2% cpu 7.186 total
</code></pre>

<p>Basicamente, um pouco mais de 7 segundos foram necess√°rios para executar todas as requisi√ß√µes.</p>

<p>J√° com a vers√£o final do c√≥digo, temos a seguinte sa√≠da:</p>

<pre><code class="console">$ time php star-wars.php

php star-wars.php  0.14s user 0.04s system 6% cpu 2.387 total
</code></pre>

<p>Ou seja, pouco mais de 2 segundos (quase 5 segundos a menos). √â uma baita diferen√ßa para um exemplo t√£o simples, n√£o acha?</p>

<p>Agora um √∫ltimo teste, comentando a parte referente ao <code>curl_multi_select</code>:</p>

<pre><code class="console">$ time php star-wars.php

php star-wars.php  0.50s user 0.70s system 49% cpu 2.421 total
</code></pre>

<p>Repare que o uso de CPU subiu muito. De algo pr√≥ximo de 6% para quase 50%. Esse √© o prop√≥sito da chamada da fun√ß√£o
<code>curl_multi_select</code>.</p>

<h2 id="conclus%C3%A3o">Conclus√£o</h2>

<p>Assim como j√° foi citado no post sobre <a href="/2020-09-16-php-assincrono-de-forma-nativa/">PHP ass√≠ncrono</a>, existem
v√°rias ferramentas que facilitam (e muito) o trabalho de realizar requisi√ß√µes HTTP paralelas com PHP. Guzzle √© uma √≥tima
op√ß√£o para isso.</p>

<p>Mas seguindo o que citei no <a href="/2020-04-23-principios-ou-ferramentas-o-que-estudar/">post sobre aprendizado</a>, eu penso como
Richard Feynman (Nobel de f√≠sica): ‚ÄúO que eu n√£o consigo criar, eu n√£o entendo‚Äù. Ent√£o antes de utilizar uma ferramenta
que realiza o trabalho para mim, eu gosto de saber como realizar este trabalho sem ela. Com isso, se algum problema
acontecer com a biblioteca, por exemplo, eu vou estar mais preparado para resolv√™-lo j√° que entendo um pouco melhor como as coisas funcionam.</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Wrapper de Streams php://]]></title>
            <link href="https://dias.dev/2020-11-03-wraper-de-streams-php/"/>
            <updated>2020-11-03T00:00:00+00:00</updated>
            <id>https://dias.dev/2020-11-03-wraper-de-streams-php/</id>
            <content type="html"><![CDATA[<h2 id="streams">Streams</h2>

<p>Antes de falarmos sobre um wrapper espec√≠fico, √© legal dar um certo contexto sobre streams.</p>

<p>Um stream basicamente √© um fluxo de dados. Usando streams podemos realizar opera√ß√µes de I/O como leitura de arquivos,
acessos a rede, comunica√ß√£o por sockets e muito mais.</p>

<p>Existem muitas funcionalidades que giram em torno dos streams do PHP como filtros, contextos, etc,
mas neste artigo meu foco vai ser em um wrapper espec√≠fico.</p>

<h2 id="wrappers">Wrappers</h2>

<p>Wrappers de streams em PHP s√£o o c√≥digo que diz como aquele determinado protocolo vai ser usado e gerenciado.</p>

<p>Ler um arquivo √© diferente de realizar uma requisi√ß√£o HTTP que √© diferente de se conectar com um Unix socket.
Para que todas essas diferen√ßas sejam abstra√≠das para n√≥s devs, o PHP fornece wrappers.</p>

<p>Quando voc√™ abre um arquivo para leitura em PHP, usa o wrapper <code>file://</code>.
Quando faz uma requisi√ß√£o HTTP, usa o wrapper <code>http://</code>.
Com wrappers diferentes, podemos utilizar o mesmo c√≥digo para realizar tarefas completamente diferentes. Ex.:</p>

<pre><code class="php">&lt;?php

echo file_get_contents('file://arquivo.txt'); // l√™ um arquivo
echo file_get_contents('http://google.com'); // faz uma requisi√ß√£o HTTP
</code></pre>

<h3 id="wrappers-dispon%C3%ADveis">Wrappers dispon√≠veis</h3>

<p>Por padr√£o o PHP j√° fornece diversos wrappers como</p>

<ul>
<li><code>file://</code></li>
<li><code>http://</code> e <code>https://</code></li>
<li><code>ftp://</code></li>
<li><code>zlib://</code></li>
<li><code>ssh2://</code></li>
<li><code>rar://</code></li>
<li>etc</li>
</ul>

<p>Existem outros wrappers fornecidos por padr√£o e al√©m disso n√≥s podemos criar nossos pr√≥prios wrappers.
Mas isso foge do escopo desse artigo e no final dele vou deixar alguns links de refer√™ncias.</p>

<h2 id="wrapper-php%3A%2F%2F">Wrapper php://</h2>

<p>Um dos wrappers mais interessantes e que menos vejo material sobre √© o <code>php://</code>.
Atrav√©s dele temos acesso a diversos recursos de I/O como a entrada e sa√≠da padr√£o do sistema, streams tempor√°rios em
disco e em mem√≥ria, etc.</p>

<p>Vamos ver de forma resumida algumas das possibilidades deste wrapper</p>

<h3 id="php%3A%2F%2Finput">php://input</h3>

<p>Este provavelmente √© o stream mais utilizado fornecido por este wrapper. Atrav√©s dele n√≥s conseguimos acessar diretamente
o corpo de uma requisi√ß√£o. Ent√£o se uma requisi√ß√£o <code>POST</code> √© feita para seu sistema enviando o corpo em JSON, por exemplo,
o seguinte c√≥digo pode fazer o parse:</p>

<pre><code class="php">&lt;?php

$corpo = file_get_contents('php://input'); // recupera o corpo todo da requisi√ß√£o, como string
$json = json_decode($corpo); // decodifica a string em json

echo $json-&gt;algumValor; // acessa um valor j√° parseado
</code></pre>

<p>√â v√°lido citar que este stream permite apenas a leitura, logo, n√£o podemos escrever nada nele.</p>

<h3 id="php%3A%2F%2Fmemory-e-php%3A%2F%2Ftemp">php://memory e php://temp</h3>

<p>Ambos streams s√£o de leitura e escrita, e nos permitem acesso a um espa√ßo que pode ser no disco ou na RAM para manipular
dados tempor√°rios. S√£o interessantes para realizar processamentos em dados j√° existentes usando a interface de streams,
por exemplo.</p>

<p><code>php://memory</code> vai manter todo o dado na RAM enquanto <code>php://temp</code> vai utilizar um arquivo quando o conte√∫do do stream
atingir um limite de tamanho pr√©-definido (2MB por padr√£o).</p>

<h3 id="php%3A%2F%2Ffilter">php://filter</h3>

<p>Aplicar filtros de streams pode trazer grandes poderes para sua aplica√ß√£o e at√© poupar bastante uso de mem√≥ria.
Mas para utilizar filtros, teoricamente n√≥s precisar√≠amos de um recurso de stream aberto. Qual o problema disso?
N√£o poder√≠amos usar filtros com fun√ß√µes como <code>file_get_contents</code> que ao inv√©s de um recurso, recebe uma string por
par√¢metro.</p>

<p>Usando o stream <code>php://filter</code> n√≥s podemos especificar filtros para esse tipo de fun√ß√£o sem nenhum problema. Exemplo:</p>

<pre><code class="php">&lt;?php

echo file_get_contents("php://filter/read=string.toupper|string.rot13/resource=http://www.example.com");

</code></pre>

<p>Isso vai aplicar os filtros <code>string.toupper</code> e <code>string.rot13</code> ao ler de <em>http://www.example.com</em>.</p>

<p>Se voc√™ n√£o conhece os filtros de streams, vale a pena conferir as refer√™ncias no final do artigo. ;-)</p>

<h3 id="php%3A%2F%2Fstdin%2C-php%3A%2F%2Fstdout-e-php%3A%2F%2Fstderr">php://stdin, php://stdout e php://stderr</h3>

<p>Estes streams fornecem acesso aos streams correspondentes do pr√≥prio processo do PHP.
<code>php://stdin</code> fornece acesso √† entrada padr√£o do processo (que pode ser o teclado ou um pipe, por exemplo).
<code>php://stdout</code> permite acessar a sa√≠da padr√£o, que pode ser o terminal em uma aplica√ß√£o CLI.
<code>php://stderr</code> nos deixa escrever na sa√≠da de erro do processo.</p>

<p>O primeiro stream √© apenas para leitura, enquanto os 2 outros s√£o apenas para escrita. N√£o √© poss√≠vel escrever em
<code>php://stdin</code> por exemplo.</p>

<h3 id="php%3A%2F%2Foutput">php://output</h3>

<p>Este stream permite escrever no mecanismo de buffer de sa√≠da do PHP, assim como <code>echo</code> e <code>print</code> fazem.</p>

<h3 id="php%3A%2F%2Foutput-vs-php%3A%2F%2Fstdout">php://output vs php://stdout</h3>

<p>Voc√™ talvez esteja se perguntando a diferen√ßa entre <code>php://output</code> e <code>php://stdout</code>.
Basicamente o primeiro escreve no mecanismo de buffer de sa√≠da do PHP, o que permite o controle atrav√©s de fun√ß√µes
como <code>ob_start</code>. J√° o segundo escreve direto na sa√≠da do processo, n√£o passando pelo controle de buffer do PHP.</p>

<p>Para entender melhor:</p>

<pre><code class="php">&lt;?php

$stdout = fopen('php://stdout', 'w');
$output = fopen('php://output', 'w');

ob_start();

fwrite($output, 'Escrevendo no output' . PHP_EOL);
fwrite($stdout, 'Escrevendo na sa√≠da padr√£o' . PHP_EOL);

ob_end_flush();
</code></pre>

<p>Ao executar este script em um terminal, o primeiro <code>fwrite</code> envia a string para o mecanismo de buffer do PHP, e devido
ao <code>ob_start()</code>, n√£o vai ser imprimido ainda. O segundo <code>fwrite</code> manda o conte√∫do direto para a sa√≠da (tela do terminal).
Ao executar <code>ob_end_flush()</code> o buffer √© enviado para a sa√≠da do processo, ent√£o o resultado √©:</p>

<p><output>
Escrevendo na sa√≠da padr√£o <br>
Escrevendo no output
</output></p>

<h3 id="buffer-de-sa%C3%ADda">Buffer de sa√≠da</h3>

<p>Se voc√™ n√£o entendeu bem essa parte de buffer de sa√≠da e quiser que eu fa√ßa um artigo espec√≠fico sobre isso, √© s√≥ me
contar nos coment√°rios que eu preparo pra voc√™! :-D</p>

<h2 id="conclus%C3%A3o">Conclus√£o</h2>

<p>Analisando apenas um dos poss√≠veis wrappers d√° pra ter uma breve no√ß√£o de como essa feature do PHP √© poderosa. Atrav√©s
de streams podemos compactar e descompactar arquivos, enviar dados por FTP, acessar servidores via SSH e muito mais.</p>

<h3 id="refer%C3%AAncias">Refer√™ncias</h3>

<p>Conforme prometido, vou deixar aqui alguns links para que voc√™ possa se aprofundar nesse assunto t√£o rico e importante.</p>

<ul>
<li><a href="https://youtube.com/watch?v=ZRYMzS97HVQ">https://youtube.com/watch?v=ZRYMzS97HVQ</a>

<ul>
<li>Nessa palestra o <a href="https://twitter.com/alganet">Alexandre Gaigalas</a> mostra um pouco do poder dos streams</li>
</ul></li>
<li><a href="https://www.php.net/manual/en/book.stream.php">https://www.php.net/manual/en/book.stream.php</a>

<ul>
<li>A documenta√ß√£o oficial √© sempre um √≥timo lugar para recorrer e entender a fundo as funcionalidades</li>
</ul></li>
<li><a href="https://tidd.ly/4aqwpba">Curso online: PHP I/O - Arquivos de streams</a>

<ul>
<li>Na Alura existe um curso espec√≠fico de streams usando filtros, contextos e muito mais. Se quiser 15% de desconto na sua assinatura, confere <a href="https://tidd.ly/4d42Myb">esse link aqui</a>.</li>
</ul></li>
<li><a href="/2020-09-16-php-assincrono-de-forma-nativa/">PHP Ass√≠ncrono de Forma Nativa</a>

<ul>
<li>Aqui mesmo no blog tem um post onde uso streams para realizar programa√ß√£o ass√≠ncrona atrav√©s de I/O n√£o bloqueante.</li>
</ul></li>
</ul>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[PHP al√©m da Web]]></title>
            <link href="https://dias.dev/2020-10-27-php-alem-da-web/"/>
            <updated>2020-10-27T00:00:00+00:00</updated>
            <id>https://dias.dev/2020-10-27-php-alem-da-web/</id>
            <content type="html"><![CDATA[<h2 id="php-%2B-web-%3D-">PHP + Web = &lt;3</h2>

<p>N√£o √© nenhum segredo que o PHP nasceu na web e para a web. Seu prop√≥sito inicial era servir p√°ginas din√¢micas de forma simples e amig√°vel, mas a Web evoluiu e o PHP tamb√©m. Hoje em dia o PHP √© uma linguagem de programa√ß√£o completa e pronta para ser executada nos mais diversos ambientes, e n√£o s√≥ na Web.</p>

<h3 id="web-al%C3%A9m-do-html">Web al√©m do HTML</h3>

<p>Antes de sair da Web, acredito que seja muito importante citar que nem s√≥ de HTML vive a Web. √â mais do que comum vermos URLs gerando dados nos mais diversos formatos como XML, JSON, etc. Voc√™ provavelmente conhece isso como API, correto? Obviamente o PHP est√° mais do que preparado para este tipo de trabalho e de forma muito simples. A ideia desse artigo √© trazer as possibilidades realmente fora da Web.</p>

<h2 id="por-que-usar-php-fora-da-web%3F">Por que usar PHP fora da web?</h2>

<p>Antes de vermos as possibilidades, por que eu iria fazer isso? Se o PHP nasceu na Web, por que n√£o mant√™-lo l√°? Bom, existem diversos motivos para trazermos o PHP para demais ambientes, mas acredito que o mais √≥bvio e o principal √© a equipe. Se n√≥s j√° temos uma equipe de pessoas que desenvolvem em PHP na Web, por que n√£o utilizar esse conhecimento tamb√©m fora da Web para processamento de dados ass√≠ncronos, leitura de filas, cronjobs, scripts da CLI em geral, etc? √â justamente sobre essas possibilidades que quero tratar nesta publica√ß√£o.</p>

<h2 id="existe-vida-al%C3%A9m-da-web%3F">Existe vida al√©m da Web?</h2>

<p>Agora que j√° entendemos o motivo de possivelmente utilizar PHP fora da Web, vamos falar sobre... o que seria esse "fora da Web". Em uma equipe de desenvolvimento Web, o que poderia estar fora da Web para n√≥s precisarmos utilizar PHP?</p>

<h3 id="processos-ass%C3%ADncronos">Processos ass√≠ncronos</h3>

<p>Uma requisi√ß√£o web deve acontecer da forma mais r√°pida poss√≠vel para que o usu√°rio/cliente n√£o fique esperando uma resposta, e uma das t√©cnicas muito conhecidas para evitar essa espera √© tornar alguns processos ass√≠ncronos.</p>

<p>Se ao cadastrar um usu√°rio no banco de dados n√≥s precisamos enviar um e-mail, por exemplo, n√£o h√° necessidade de faz√™-lo esperar at√© n√≥s conseguirmos enviar este e-mail para s√≥ depois entregar a resposta. N√≥s podemos armazenar em algum lugar a informa√ß√£o de que um e-mail dever√° ser enviado, e fazer isso depois, fora da web, sem que o usu√°rio fique esperando.</p>

<p>Existem in√∫meras formas de atingir este objetivo. Uma das mais comuns √© atrav√©s de filas de processos. N√≥s armazenamos as informa√ß√µes sobre o processo que deve ser executado em algum local espec√≠fico para isso, e futuramente, fora da web, recuperamos esta informa√ß√£o para process√°-la. Banco de dados, mensagerias, onde for. O importante √© que a tarefa demorada n√£o fa√ßa com que o usu√°rio nos espere.</p>

<h3 id="scripts-cli">Scripts CLI</h3>

<p>Um cen√°rio tamb√©m muito comum, principalmente em empresas de m√©dio e grande porte, √© ter processos que devem ser executados periodicamente de forma manual ou automatica. Sincroniza√ß√£o de dados, processamento de informa√ß√µes, o que for... Essas tarefas n√£o precisam ser executadas em um ambiente web, e normalmente s√£o executadas na linha de comando. Os processos autom√°ticos s√£o conhecidos como <em>cronjobs</em> ou tarefas agendadas. J√° os processos executados manualmente s√£o simples scripts ou programas de linha de comando (CLI).</p>

<p>O PHP √© um execut√°vel capaz de rodar na linha de comando e n√£o h√° dificuldade nenhuma em utiliz√°-lo para estes casos. Inclusive h√° diversos recursos da linguagem que nos permitem acessar detalhes interessantes deste novo mundo fora da grande rede mundial.</p>

<h4 id="features-fora-da-web">Features fora da web</h4>

<p>Com PHP n√≥s conseguimos ler par√¢metros da linha de comando atrav√©s de vari√°veis "m√°gicas" como <a href="https://php.net/argv">$argv</a> e <a href="https://php.net/argc">$argc</a>. Isso nos permite interatividade de forma semelhante ao que a Web nos traria com formul√°rios, par√¢metros via URL, etc.</p>

<p>Al√©m de argumentos, podemos receber algumas op√ß√µes para personalizar a execu√ß√£o de nossos c√≥digos. A fun√ß√£o <a href="https://php.net/getopt">getopt</a> consegue nos ajudar a fazer isso de forma simples e profissional, exatamente como os mais famosos comandos que estamos habituados a utilizar j√° fazem.</p>

<h3 id="ferramentas">Ferramentas</h3>

<p>O mundo de componentes PHP √© fant√°stico. Temos ferramentas m√°gicas como Symfony para criar aplica√ß√µes Web, Doctrine para acessar o banco de dados com mais facilidade, PHPUnit para realizar testes automatizados... Mas ser√° que existem ferramentas espec√≠ficas para facilitar nosso mundo fora da Web? A resposta felizmente √© SIM!</p>

<h4 id="cria%C3%A7%C3%A3o-de-programas">Cria√ß√£o de programas</h4>

<p>O pr√≥prio Symfony possui uma das ferramentas mais conhecidas para cria√ß√£o de programas na CLI: O <a href="https://symfony.com/doc/current/components/console.html">Symfony Console</a>. Com ele n√≥s podemos criar aplica√ß√µes de forma semelhantes com a que criamos na Web, mas ao inv√©s de <em>Controllers</em> criamos <em>Commands</em>, por exemplo. Todas as facilidades de um framework moderno podem ser utilizadas fora da Web sem maiores problemas.</p>

<p>Obviamente est√° n√£o √© a √∫nica op√ß√£o, mas diversas outras ferramentas fazem uso do <em>Symfony Console</em>. Algumas alternativas s√£o <em>Laravel Zero</em>, CLImate, Aura.CLI, etc.</p>

<h4 id="performance">Performance</h4>

<p>Tarefas que s√£o executadas por tr√°s das cortinas tendem a ser mais pesadas, exigir mais I/O ou mais processamento. Nesses casos podemos recorrer a ferramentas espec√≠ficas para resolver tais problemas.</p>

<p>Se temos um cen√°rios de muitas requisi√ß√µes para servidores externos, seja em chamadas HTTP, STMP ou outros protocolos, devemos fazer bom uso dos streams do PHP e trabalhar com programa√ß√£o ass√≠ncrona. Uma √≥tima ferramenta que pode nos ajudar muito com isso √© a <a href="https://reactphp.org/#core-components">ReactPHP</a> que fornece diversos componentes com os mais diversos prop√≥sitos.</p>

<p>J√° se muito processamento √© utilizado, com calculos complexos, manipula√ß√£o de imagens e qualquer outra coisa que consuma muita CPU, paraleliza√ß√£o √© a resposta. Podemos criar processos atrav√©s da extens√£o <a href="https://php.net/pcntl">pcntl</a> ou threads atrav√©s da extens√£o <a href="https://php.net/parallel">parallel</a>. Ambas as op√ß√µes requerem um estudo mais aprofundado sobre conceitos de sistemas operacionais e programa√ß√£o paralela, mas o resultado √© muito gratificante.</p>

<p>Se voc√™ quiser entender um pouco melhor sobre a diferen√ßa entre Programa√ß√£o Ass√≠ncrona e Programa√ß√£o Paralela, pode conferir este v√≠deo:</p>

<p><lite-youtube videoid="zLfXPSeCkB8">
    <a href="https://youtube.com/watch?v=zLfXPSeCkB8" class="lty-playbtn" title="Reproduzir v√≠deo">
        <span class="lyt-visually-hidden">
            Programa√ß√£o ass√≠ncrona vs Programa√ß√£o paralela - Entenda a diferen√ßa | Programando com Vinicius Dias
        </span>
    </a>
</lite-youtube></p>

<h2 id="conclus%C3%A3o">Conclus√£o</h2>

<p>Nesta r√°pida leitura j√° conseguimos notar que n√£o s√≥ √© poss√≠vel utilizar PHP fora da Web como tamb√©m ele est√° muito preparado para este ambiente.</p>

<p>Por ser uma linguagem de programa√ß√£o completa e madura, diversas bibliotecas, extens√µes e componentes j√° surgiram para resolver problemas comuns e cabe a n√≥s, devs e amantes do PHP, aprend√™-las e utiliz√°-las.</p>

<p>Al√©m disso, com o advento do <a href="https://youtube.com/watch?v=WLx0z9kloro">JIT</a> que chegar√° no PHP 8, o uso do PHP fora da web se tornar√° ainda mais efetivo. Diversas otimiza√ß√µes de baixo n√≠vel que eu nem mesmo sei explicar v√£o acontecer, tornando poss√≠veis aplica√ß√µes que requerem ainda mais processamento como IoT, Machine Learning e v√°rios outros nomes bonitos que n√£o me arriscarei a citar.</p>

<p>Se voc√™ ainda acha que PHP est√° preso na Web, acredito que n√£o h√° momento melhor para abrir os olhos e conhecer este novo mundo!</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[PHP ass√≠ncrono de forma nativa]]></title>
            <link href="https://dias.dev/2020-09-16-php-assincrono-de-forma-nativa/"/>
            <updated>2020-09-16T00:00:00+00:00</updated>
            <id>https://dias.dev/2020-09-16-php-assincrono-de-forma-nativa/</id>
            <content type="html"><![CDATA[<p>Realizar acesso a streams √© uma tarefa relativamente comum para devs PHP. Seja lendo e escrevendo em arquivos, fazendo requisi√ß√µes HTTP, etc.</p>

<p>Opera√ß√µes de I/O s√£o custosas e levam algum tempo para serem executadas. Quando temos diversas opera√ß√µes desse tipo, uma t√©cnica que pode ajudar (e muito) na performance da aplica√ß√£o √© realiz√°-las de forma ass√≠ncrona.</p>

<h2 id="acesso-a-streams">Acesso a streams</h2>

<p>Antes de falar sobre t√©cnicas e fun√ß√µes que permitem a programa√ß√£o ass√≠ncrona, √© importante saber como normalmente n√≥s trabalhamos com I/O.</p>

<p>Acesso a arquivos, requisi√ß√µes HTTP, sockets e muito mais pode ser feito atrav√©s de <a href="https://php.net/streams">streams</a>. Um stream √© basicamente um fluxo de dados, sendo que a origem desse fluxo pode variar (vide o in√≠cio desse par√°grafo). Quando utilizamos fun√ß√µes como <code>file_get_contents</code>, <code>fopen</code>, <code>fgets</code>, e as demais, estamos trabalhando com streams do PHP.</p>

<h2 id="programa%C3%A7%C3%A3o-ass%C3%ADncrona">Programa√ß√£o ass√≠ncrona</h2>

<p>Se voc√™ n√£o est√° familiarizado com o termo "programa√ß√£o ass√≠ncrona", recomendo assistir este v√≠deo antes de continuar o artigo:</p>

<p><lite-youtube videoid="zLfXPSeCkB8">
    <a href="https://youtube.com/watch?v=zLfXPSeCkB8" class="lty-playbtn" title="Reproduzir v√≠deo">
        <span class="lyt-visually-hidden">
            Programa√ß√£o ass√≠ncrona vs Programa√ß√£o paralela - Entenda a diferen√ßa | Programando com Vinicius Dias
        </span>
    </a>
</lite-youtube></p>

<p>Entendido o que √© programa√ß√£o ass√≠ncrona, como podemos fazer acesso a streams de forma ass√≠ncrona utilizando PHP sem nenhuma extens√£o ou biblioteca externa? Ser√° poss√≠vel?</p>

<h2 id="eventos">Eventos</h2>

<p>Programa√ß√£o orientada a eventos n√£o √© novidade e n√≥s utilizamos muito na web. Para agir quando um bot√£o for clicado, ou quando um texto for digitado em um <code>input</code> n√≥s utilizamos eventos no JavaScript. Eventos podem acontecer a qualquer momento ent√£o sua natureza √© ass√≠ncrona. Mas ser√° poss√≠vel fazer algo parecido do lado do PHP?</p>

<p>Antes de falar do PHP em si, acho v√°lido citar que o sistema operacional j√° trabalha com chamadas ass√≠ncronas. Diversos eventos acontecem durante a execu√ß√£o do seu sistema, e h√° c√≥digo reagindo a estes eventos o tempo todo. Utilizando PHP n√≥s podemos acessar algumas dessas funcionalidades do sistema operacional</p>

<h3 id="fun%C3%A7%C3%A3o-stream_select">Fun√ß√£o stream_select</h3>

<p>Uma fun√ß√£o n√£o muito comum para n√≥s que trabalhamos com PHP √© a <a href="https://php.net/stream_select">stream_select</a>. Essa fun√ß√£o nos permite "observar" modifica√ß√µes que possam acontecer em streams. O problema √© que ela n√£o √© nada f√°cil de se entender, ent√£o vou tentar tornar este processo menos doloroso para voc√™.</p>

<h2 id="cen%C3%A1rio">Cen√°rio</h2>

<p>Imagine que para executar uma tarefa n√≥s precisemos ler 5 arquivos distintos e depois realizar algum processamento. Normalmente utilizando PHP n√≥s poder√≠amos fazer algo como:</p>

<pre><code class="php">&lt;?php

$conteudoDoArquivo1 = file_get_contents('arquivo1.txt');
$conteudoDoArquivo2 = file_get_contents('arquivo2.txt');
$conteudoDoArquivo3 = file_get_contents('arquivo3.txt');
$conteudoDoArquivo4 = file_get_contents('arquivo4.txt');
$conteudoDoArquivo5 = file_get_contents('arquivo5.txt');

// Processar os 5 arquivos
</code></pre>

<p>O problema nessa abordagem √© √≥bvio: Antes de ler o <code>arquivo2.txt</code> precisamos terminar de ler todo o conte√∫do de <code>arquivo1.txt</code>. Enquanto o computador espera, n√≥s j√° poder√≠amos estar lendo os demais arquivos e os processando de forma individual.</p>

<p>Quando temos uma opera√ß√£o de I/O (acesso a arquivos, rede, etc) sendo realizada de forma s√≠ncrona, o processador fica ocioso enquanto a opera√ß√£o n√£o √© executada. Ou seja, enquanto o arquivo estiver sendo carregado, o processador fica esperando, sem fazer nada. √â exatamente isso que queremos evitar. Queremos garantir que ele continue trabalhando enquanto o arquivo n√£o estiver pronto para leitura.</p>

<h2 id="solu%C3%A7%C3%A3o-com-assincronicidade">Solu√ß√£o com assincronicidade</h2>

<p>Para resolver essa situa√ß√£o, podemos utilizar a fun√ß√£o <code>stream_select</code> que observa altera√ß√µes no status de uma lista de streams, ou seja, quando algum dos arquivos estiver pronto para leitura, essa fun√ß√£o nos avisar√°. E √© interessante citar que a leitura n√£o necessariamente vai acontecer em ordem. O sistema operacional pode abrir o <code>arquivo3.txt</code> mais r√°pido do que o <code>arquivo1.txt</code>, por exemplo. Neste cen√°rio, vamos process√°-lo logo, sem ficar esperando os arquivos anteriores.</p>

<pre><code class="php">&lt;?php

$listaDeStreamsDeArquivos = [
    fopen('arquivo1.txt', 'r'),
    fopen('arquivo2.txt', 'r'),
    fopen('arquivo3.txt', 'r'),
    fopen('arquivo4.txt', 'r'),
    fopen('arquivo5.txt', 'r'),
];

foreach ($listaDeStreamsDeArquivos as $streamDeArquivo) {
    stream_set_blocking($streamDeArquivo, false);
}

do {
    $streamsParaLer = $listaDeStreamsDeArquivos;
    $streamsComNovidades = stream_select($streamsParaLer, $write, $except, 1, 0);

    if ($streamsComNovidades === false) {
        echo 'Erro inesperado';
        exit(1);
    }

    if ($streamsComNovidades === 0) {
        continue;
    }

    foreach ($streamsParaLer as $indice =&gt; $streamDeArquivo) {
        $conteudo = stream_get_contents($streamDeArquivo);
        // processa o conte√∫do do arquivo
        if (feof($streamDeArquivo)) {
            fclose($streamDeArquivo);
            unset($listaDeStreamsDeArquivos[$indice]);
        }
    }
} while ($listaDeStreamsDeArquivos !== []);
</code></pre>

<h3 id="explica%C3%A7%C3%A3o">Explica√ß√£o</h3>

<h4 id="prepara%C3%A7%C3%A3o">Prepara√ß√£o</h4>

<p>Como eu disse, n√£o √© muito f√°cil, ent√£o vamos por partes. Primeiro abrimos todos os arquivos que queremos ler com o <code>fopen</code>. At√© a√≠ sem segredo. Depois, informamos com a fun√ß√£o <code>stream_set_blocking</code> que o recurso deve ser aberto em modo n√£o-bloqueante - assim, o processo que acessa o arquivo n√£o bloquear√° a CPU por causar um estado de espera ao tentar acessar os arquivos.</p>

<p>Nesse ponto, temos um array com 5 recursos abertos para podermos trabalhar com estes streams. Ent√£o analisando o este peda√ßo de c√≥digo:</p>

<pre><code class="php">$listaDeStreamsDeArquivos = [
    fopen('arquivo1.txt', 'r'),
    fopen('arquivo2.txt', 'r'),
    fopen('arquivo3.txt', 'r'),
    fopen('arquivo4.txt', 'r'),
    fopen('arquivo5.txt', 'r'),
];

var_dump($listaDeStreamsDeArquivos);
</code></pre>

<p>Ter√≠amos a seguinte sa√≠da:</p>

<pre><code class="php">array(5) {
  [0]=&gt;
  resource(5) of type (stream)
  [1]=&gt;
  resource(6) of type (stream)
  [2]=&gt;
  resource(7) of type (stream)
  [3]=&gt;
  resource(8) of type (stream)
  [4]=&gt;
  resource(9) of type (stream)
}
</code></pre>

<p>Depois disso que come√ßa a parte dif√≠cil. A chamada para a fun√ß√£o <code>stream_select</code> deve estar em um loop, porque pode acontecer de nem todos os streams estarem prontos para leitura logo de cara.</p>

<h4 id="par%C3%A2metros">Par√¢metros</h4>

<p>Segundo detalhe importante: os par√¢metros. Os 3 primeiros par√¢metros dessa fun√ß√£o s√£o passados por refer√™ncia. Por isso o segundo e terceiro s√£o vari√°veis que n√≥s nem t√≠nhamos definido ainda. O primeiro par√¢metro √© a lista de streams que queremos observar para ler. O segundo √© para escrita. J√° o terceiro, menos comum, √© para dados excepcionais que possuem maior prioridade. Os 2 √∫ltimos par√¢metros s√£o sobre timeout.</p>

<p>O par√¢metro passado como 1 indica o n√∫mero de segundos que essa fun√ß√£o deve esperar receber uma notifica√ß√£o de novidade nos streams at√© "desistir", ou seja, o timeout. Esse √© o motivo pelo qual ela deve estar em um loop. Se esse tempo passar e n√≥s n√£o tivermos novidade, devemos tentar de novo depois. Caso algum (n√£o necessariamente todos) stream esteja pronto antes desse 1 segundo, a fun√ß√£o retornar√°. O √∫ltimo par√¢metro, que informamos como 0, indica o tempo em microsegundos para timeout.</p>

<h4 id="retorno-e-leitura">Retorno e leitura</h4>

<p>Agora vamos falar do retorno. Essa fun√ß√£o retorna o n√∫mero de streams que cont√©m modifica√ß√µes. No nosso caso, vai informar quantos arquivos est√£o prontos para leitura. Por√©m em caso de erro essa fun√ß√£o nos retorna o valor <code>false</code>.</p>

<p>Al√©m disso, os par√¢metros que n√≥s passamos podem ter sido modificados. Por isso eu realizo uma c√≥pia da lista original de streams em <code>$arquivosParaLer = $listaDeArquivos;</code>. Ap√≥s o retorno da fun√ß√£o, o par√¢metro passado vai conter apenas os streams que possuem novidades, ou seja, no nosso caso, os arquivos que est√£o prontos para leitura.</p>

<p>Para exemplificar, vamos supor que na primeira execu√ß√£o do loop todos os arquivos j√° estejam dispon√≠veis. Nesse caso, analisando os valores das vari√°veis, podemos entender o que est√° acontecendo. Analisando ent√£o o valor de <code>$streamsComNovidades</code>, ter√≠amos <code>int(5)</code> como resultado deste cen√°rio.</p>

<p>J√° analisando ambos arrays de streams (<code>$listaDeStreamsDeArquivos</code> e <code>$streamsParaLer</code>), ter√≠amos exatamente o mesmo resultado:</p>

<pre><code class="php">array(5) {
  [0]=&gt;
  resource(5) of type (stream)
  [1]=&gt;
  resource(6) of type (stream)
  [2]=&gt;
  resource(7) of type (stream)
  [3]=&gt;
  resource(8) of type (stream)
  [4]=&gt;
  resource(9) of type (stream)
}
array(5) {
  [0]=&gt;
  resource(5) of type (stream)
  [1]=&gt;
  resource(6) of type (stream)
  [2]=&gt;
  resource(7) of type (stream)
  [3]=&gt;
  resource(8) of type (stream)
  [4]=&gt;
  resource(9) of type (stream)
}
</code></pre>

<p>Agora caso na primeira execu√ß√£o tiv√©ssemos apenas 3 dos 5 arquivos prontos, e analis√°ssemos os 3 valores anteriores, ter√≠amos ter algo como:</p>

<pre><code class="php">var_dump($streamsComNovidades, $listaDeStreamsDeArquivos, $streamsParaLer);
</code></pre>

<pre><code class="php">int(3)
array(5) {
  [0]=&gt;
  resource(5) of type (stream)
  [1]=&gt;
  resource(6) of type (stream)
  [2]=&gt;
  resource(7) of type (stream)
  [3]=&gt;
  resource(8) of type (stream)
  [4]=&gt;
  resource(9) of type (stream)
}
array(3) {
  [0]=&gt;
  resource(5) of type (stream)
  [2]=&gt;
  resource(7) of type (stream)
  [4]=&gt;
  resource(9) of type (stream)
}
</code></pre>

<p>Onde, nesse caso, o segundo array exibido √© o de <code>$streamsParaLer</code>, e possui apenas os 3 arquivos prontos para leitura.</p>

<p>Sendo assim, posso percorrer este array tendo a certeza de que h√° dados para ler e processar. Mas n√£o h√° garantia de que todo o conte√∫do do arquivo estar√° l√°, por isso verifico se cheguei ao fim do arquivo com <code>feof</code>. Para arquivos pequenos, via de regra, todo o conte√∫do vir√° de uma vez s√≥, mas n√£o conte com isso e prepare seu c√≥digo para ler at√© mesmo um √∫nico byte por vez.</p>

<p>Ap√≥s ler todo o arquivo, devemos fech√°-lo. Mas um outro detalhe importante √© que eu tamb√©m o removo da lista original de streams que queremos ler. Fa√ßo isso para que caso seja necess√°ria uma nova itera√ß√£o no loop, ou seja, caso nem todos os arquivos tenham sido lidos, eu n√£o tente ler novamente os arquivos que j√° foram lidos e fechados.</p>

<p>Com isso temos nossa condi√ß√£o de sa√≠da do loop. Quando todos os arquivos tiverem sido removidos e minha lista estiver vazia, sei que processei todos os arquivos.</p>

<p>PS.: A fun√ß√£o <code>stream_set_blocking</code> s√≥ surte efeito com arquivos e sockets. Os outros wrappers, com esta t√©cnica, n√£o podem ser lidos de forma ass√≠ncrona e n√£o bloqueante.</p>

<h2 id="conceitos">Conceitos</h2>

<p>Esse c√≥digo obviamente pode ser refatorado para torn√°-lo um pouco mais leg√≠vel, mas acredito que a l√≥gica por tr√°s dele tenha ficado clara. Caso contr√°rio, voc√™ pode usar a sess√£o de coment√°rios dessa p√°gina para fazer perguntas.</p>

<p>O que n√≥s escrevemos de forma rudimentar aqui pode ser visto como uma implementa√ß√£o do que √© conhecido como <em>Event Loop</em>, ou loop de eventos. Voc√™ provavelmente j√° ouviu esse termo se estuda sobre a runtime Node.js.</p>

<p>Claro que essa implementa√ß√£o n√£o √© completa ou otimizada, mas atende nosso prop√≥sito: ler arquivos conforme eles fiquem prontos para leitura. Dessa forma n√≥s vamos pedir para que o sistema operacional prepare todos os arquivos para leitura de uma s√≥ vez.</p>

<p>As vantagens nessa abordagem ass√≠ncrona s√£o mais percept√≠veis quando temos opera√ß√µes mais lentas como chamadas HTTP, por exemplo. Mas isso aumentaria a complexidade do c√≥digo para este artigo.</p>

<h2 id="conclus%C3%A3o">Conclus√£o</h2>

<p>Claro que o PHP j√° possui ferramentas que realizam este trabalho de forma muito mais simples. ReactPHP com seu pacote de Streams √© um √≥timo exemplo.</p>

<p>Mas seguindo o que citei no post sobre aprendizado, eu penso como <a href="https://pt.wikipedia.org/wiki/Richard_Feynman">Richard Feynman</a> (Nobel de f√≠sica): "O que eu n√£o consigo criar, eu n√£o entendo". Ent√£o antes de utilizar uma ferramenta que realiza o trabalho para mim, eu gosto de saber como realizar este trabalho sem ela. Com isso, se algum problema acontecer com a biblioteca, por exemplo, eu vou estar mais preparado para resolv√™-lo j√° que eu entendo um pouco melhor como as coisas funcionam.</p>

<p>Se voc√™ quiser aprender mais sobre algum desses assuntos, pode considerar assinar a Alura. L√° existem treinamentos (gravados por mim) sobre PHP Streams, ReactPHP e muito mais. Caso pretenda estudar na Alura, <a href="https://tidd.ly/4d42Myb">neste link</a> voc√™ tem um desconto de 15%.</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Princ√≠pios ou Ferramentas - O que estudar]]></title>
            <link href="https://dias.dev/2020-04-23-principios-ou-ferramentas-o-que-estudar/"/>
            <updated>2020-04-23T00:00:00+00:00</updated>
            <id>https://dias.dev/2020-04-23-principios-ou-ferramentas-o-que-estudar/</id>
            <content type="html"><![CDATA[<h2 id="o-mundo-de-desenvolvimento">O mundo de desenvolvimento</h2>

<p>Quando decidimos entrar para o mundo de desenvolvimento, sofremos um bombardeio de informa√ß√µes e novos termos.</p>

<p>Linguagens, frameworks, bibliotecas, paradigmas, princ√≠pios, etc. N√£o √© f√°cil saber que caminho seguir e o que estudar primeiro.</p>

<p>Obviamente n√£o existe alternativa certa ou errada, ent√£o nesse post eu vou somente expor minha opini√£o. N√£o tome o que for dito aqui como verdade, mas sim reflita e analise se faz sentido para voc√™.</p>

<h2 id="mercado-de-trabalho">Mercado de trabalho</h2>

<p>√â ineg√°vel que para atuar no mercado de trabalho n√≥s precisamos de muito mais conhecimento do que nos √© passado inicialmente em qualquer livro, curso ou post de blog. Somente a experi√™ncia e viv√™ncia v√£o nos dar a bagagem necess√°ria para resolver os problemas e gerar valor para os clientes.</p>

<p>Mas isso n√£o quer dizer que n√≥s s√≥ devamos estudar o que o emprego atual nos pede. Pelo contr√°rio. Se n√≥s estudamos al√©m do que nos √© pedido, ou no caso do primeiro emprego, estudamos antes de algo nos ser cobrado, quando uma oportunidade ou problema surgir, as chances ser√£o muito maiores de estarmos prontos.</p>

<p>Al√©m de solucionar os problemas ou aproveitar as oportunidades, estudar nos faz conhecer melhores formas de atingir estes objetos, nos dando vantagens competitivas sobre quem simplesmente "resolve o problema".</p>

<p>Ok, at√© aqui s√≥ usei o termo "estudo", mas devemos estudar o que? Ferramentas espec√≠ficas ou princ√≠pios gen√©ricos que podem ser aplicados a v√°rias ferramentas?</p>

<h2 id="linguagens%2C-bibliotecas-e-frameworks">Linguagens, bibliotecas e frameworks</h2>

<p>Se voc√™ quer entrar para a √°rea de desenvolvimento e acredita que seu trabalho vai ser escrever c√≥digo, voc√™ est√° enganado(a). O nosso trabalho √© solucionar problemas. C√≥digo √© uma ferramenta, um meio para o fim. Linguagens de programa√ß√£o s√£o apenas ferramentas para n√≥s resolvermos determinados problemas. Frameworks e bibliotecas nada mais s√£o do que ferramentas de "alto n√≠vel", que nos trazem algumas facilidades e alguns problemas gen√©ricos j√° resolvidos.</p>

<p>Ah, Vinicius, quer dizer que a escolha da linguagem de programa√ß√£o n√£o √© importante? Longe disso! A linguagem de programa√ß√£o √© uma ferramenta muito importante para a solu√ß√£o do problema e existem linguagens diferentes para solucionar problemas diferentes. O ponto √©: elas s√£o ferramentas.</p>

<p>Se n√≥s tivermos isso em mente, acabamos deixando de lado aquele tipo de briga de "minha linguagem √© melhor que a sua" ou "meu framework √© melhor do que o seu". Discuss√µes desse tipo s√£o interessantes e at√© emocionantes (eu mesmo adoro falar mal de Laravel ;-p), mas n√≥s n√£o podemos nos cegar achando que realmente h√° uma ferramenta melhor do que outra e ponto.</p>

<p><strong>N√£o existe bala de prata</strong> (solu√ß√£o pra qualquer problema)!</p>

<p>Assim como cada linguagem resolve um problema, cada framework tem um prop√≥sito, uma identidade. Voc√™ vai acabar se identificando mais com um ou outro, mas n√£o fa√ßa com que isso seja o foco de todo o seu estudo e trabalho. Conhecer muito bem a linguagem e o framework que voc√™ utiliza para trabalhar √© importante, mas √© o primeiro passo?</p>

<h2 id="paradigmas">Paradigmas</h2>

<p>Como eu citei no √∫ltimo par√°grafo, "cada linguagem resolve um problema", e cada linguagem faz isso de um jeito. Existem diversos paradigmas de programa√ß√£o, dentre eles:</p>

<ul>
<li>Declarativos

<ul>
<li>Programa√ß√£o funcional</li>
</ul></li>
<li>Imperativos

<ul>
<li>Programa√ß√£o procedural</li>
<li>Programa√ß√£o orientada a objetos</li>
</ul></li>
</ul>

<p>Entender bem as vantagens e desvantagens de cada paradigma e as diferen√ßas entre eles √© crucial para aprender qualquer linguagem de programa√ß√£o. Diversas linguagens modernas s√£o o que chamamos de "multi-paradigma", ou seja, nos permitem utilizar mais de um paradigma em nosso c√≥digo, como procedural e Orientado a Objetos, funcional e Orientado a objetos, funcional e procedural, etc.</p>

<p>Este post (em ingl√™s) fala com bem mais de detalhes sobre os principais paradigmas de programa√ß√£o e alguns exemplos de linguagens:</p>

<p>https://dev.to/vplentinax/classification-of-computer-languages-ii-2201</p>

<p>Se voc√™ (assim como eu) prefere v√≠deos, pode conferir este aqui:</p>

<p><lite-youtube videoid="asFnD-JLFWs" style="background-image: url('https://i.ytimg.com/vi/asFnD-JLFWs/hqdefault.jpg');">
    <a href="https://youtube.com/watch?v=asFnD-JLFWs" class="lty-playbtn" title="Reproduzir v√≠deo">
        <span class="lyt-visually-hidden">Reproduzir v√≠deo: Paradigmas de Programa√ß√£o | Programando com Vinicius Dias</span>
    </a>
</lite-youtube></p>

<h2 id="princ%C3%ADpios">Princ√≠pios</h2>

<p>Cada paradigma de programa√ß√£o (e suas respectivas linguagens suportadas) sugerem diversos princ√≠pios para que seu c√≥digo seja de f√°cil manuten√ß√£o, test√°vel, leg√≠vel, etc.</p>

<p>Princ√≠pios muito comuns da programa√ß√£o orientada a objetos (paradigma que estudo mais a fundo) s√£o:</p>

<ul>
<li><a href="https://youtube.com/watch?v=7IXeLhpjk6g">Tell, don't ask</a>;</li>
<li>Least astonishment;</li>
<li>*<a href="https://youtube.com/watch?v=6mfX6863SAk">Fail fast</a>;</li>
<li>*Early return;</li>
<li><a href="https://amzn.to/3Eplrm2">SOLID</a> (conjunto de princ√≠pios);</li>
<li>etc.</li>
</ul>

<p><em>* Princ√≠pios tamb√©m aplic√°veis a outros paradigmas</em></p>

<p>Estudar os princ√≠pios referentes ao paradigma que voc√™ escolher √© fundamental para manter seu c√≥digo saud√°vel. N√£o aplic√°-los pode dar a falsa impress√£o de que voc√™ est√° sendo mais produtivo(a), mas a longo prazo a verdade sempre surge e n√≥s acabamos nos arrependendo.</p>

<h2 id="padr%C3%B5es">Padr√µes</h2>

<p>Tendo entendido o que s√£o paradigmas e que cada um deles possui princ√≠pios, baseando-se nestes princ√≠pios surgem padr√µes. Os famosos <em>Padr√µes de Projeto</em> s√£o basicamente solu√ß√µes padr√µes para problemas gen√©ricos. S√£o sugest√µes de como proceder em determinadas situa√ß√µes.</p>

<p>Certos problemas s√£o t√£o comuns de acontecer, que pessoas atrav√©s dos anos j√° estudaram e discutiram muito sobre as melhores formas de resolv√™-los.</p>

<p>Alguns dos padr√µes mais famosos seguindo os princ√≠pios da programa√ß√£o orientada a objetos s√£o:</p>

<ul>
<li><a href="https://amzn.to/3pIqBDR">Padr√µes da "turma dos 4" (<em>Gang of Four "GoF"</em>)</a>

<ul>
<li>24 padr√µes (super famosos) separados em 3 categorias</li>
</ul></li>
<li><a href="https://youtube.com/watch?v=z4fxFU5MoAA">Object calisthenics</a>

<ul>
<li>9 regras para exercitar em seus c√≥digos</li>
</ul></li>
<li><a href="https://amzn.to/3ojA9Wf">Sugeridos pelo "desenvolvimento guiado a dom√≠nio" (<em>DDD</em>)</a>

<ul>
<li>Conhecidos como blocos de constru√ß√£o do <em>DDD</em> como <em>Entity</em>, <em>Value Object</em>, etc.</li>
</ul></li>
</ul>

<p>Como citado no in√≠cio do cap√≠tulo, cada padr√£o visa resolver problemas bem comuns e gen√©ricos, e devem ser aplicados quando fazem sentido. Os padr√µes exemplificados est√£o em n√≠veis bem diferentes de sua aplica√ß√£o e explic√°-los individualmente √© imposs√≠vel atrav√©s de um √∫nico post.</p>

<h2 id="o-que-estudar-primeiro%3F">O que estudar primeiro?</h2>

<p>Como foi dito l√° no in√≠cio, esse post √© para que eu expressar <strong>minha opini√£o</strong>.</p>

<p>Na minha vis√£o, devemos estudar o b√°sico dos paradigmas de programa√ß√£o, entendendo qual problema cada um resolve e em que casos s√£o usados. Ap√≥s entend√™-los, normalmente nos aprofundamos em 1 deles, mas existe um por√©m:
Antes de aprender Orienta√ß√£o a Objetos, √© importante conhecermos o paradigma procedural, visto que o primeiro surgiu para resolver determinados problemas do √∫ltimo.</p>

<p>Para estudar um dos paradigmas, obviamente precisamos de uma linguagem de programa√ß√£o, ent√£o este estudo acontece em paralelo: Conhecemos uma linguagem enquanto conhecemos um paradigma.</p>

<p>Ap√≥s dominar razoavelmente bem os conceitos da linguagem e do paradigma em quest√£o, podemos come√ßar a estudar os princ√≠pios sugeridos, entendendo suas propostas, quais problemas resolvem, porque surgiram, etc.</p>

<p>Estes princ√≠pios, normalmente nos levam naturalmente para o estudo de alguns padr√µes. O estudo de padr√µes j√° √© um estudo mais avan√ßado, por√©m muito recompensante.</p>

<p>Se voc√™ tem um bom conhecimento de um paradigma (e consequentemente, uma linguagem), alguns de seus princ√≠pios e padr√µes, pode ser o momento de aprender a utilizar ferramentas que auxiliem no processo.</p>

<p>Frameworks e bibliotecas s√£o ferramentas que facilitam a resolu√ß√£o de problemas <strong>que voc√™ deveria saber resolver sem elas</strong>. Richard Feynman, ganhador do Nobel de f√≠sica, escreveu uma vez: ‚ÄúWhat I cannot create I do not understand‚Äù. Traduzindo: "O que eu n√£o consigo criar eu n√£o entendo".</p>

<p>Ent√£o antes de utilizar um framework, saiba resolver o problema sem ele. Antes de utilizar uma biblioteca mais espec√≠fica, saiba resolver o problema sem ela. Isso faz com que voc√™ consiga resolver um problema nas ferramentas, caso aconte√ßa.</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Programa√ß√£o procedural orientada a classes - Parte 2]]></title>
            <link href="https://dias.dev/2020-04-16-programacao-procedural-orientada-a-classes-parte-2/"/>
            <updated>2020-04-16T00:00:00+00:00</updated>
            <id>https://dias.dev/2020-04-16-programacao-procedural-orientada-a-classes-parte-2/</id>
            <content type="html"><![CDATA[<h2 id="design-de-c%C3%B3digo">Design de c√≥digo</h2>

<p>Uma vez eu ouvi uma frase mas n√£o me lembro o autor: "N√£o existe c√≥digo sem design. Existe c√≥digo com design ruim". Inclusive adaptei esta frase para "arquitetura" na primeira parte desta publica√ß√£o.</p>

<p>Antes de falarmos sobre as p√©ssimas decis√µes de design que tomamos, vamos falar sobre o que √© design de c√≥digo.</p>

<p>Uma analogia interessante foi feita pelo <a href="https://twitter.com/junior_grossi">Junior Grossi</a> em um workshop maravilhoso de qualidade de c√≥digo que fiz com ele. Foi mais ou menos assim (n√£o com essas exatas palavras):</p>

<p>"Podemos fazer uma analogia da arquitetura de software com a arquitetura de uma casa. Onde fica cada c√¥modo, como se encaixam juntos, etc. √â uma vis√£o de bem <strong>alto n√≠vel</strong>. J√° o design de c√≥digo pode ser considerado an√°logo aos m√≥veis de uma casa. √â uma vis√£o de mais <strong>baixo n√≠vel</strong> sobre nossas decis√µes sobre o c√≥digo".</p>

<p>Ent√£o, basicamente (beem basicamente), arquitetura diz respeito a como voc√™ vai separar sua aplica√ß√£o em camadas, por exemplo, onde cada camada pode ter sua responsabilidade bem definida. J√° o design de c√≥digo diz respeito a como voc√™ vai organizar suas classes e m√©todos em cada uma das camadas. Quais padr√µes voc√™ vai seguir, como cada classe vai se comportar sozinha ou em conjunto com suas respetivas depend√™ncias, etc.</p>

<h2 id="escolhas-corriqueiras">Escolhas corriqueiras</h2>

<p>Agora que j√° entendemos basicamente o que √© Design de C√≥digo, vamos falar sobre escolhas que fazemos frequentemente e que talvez n√£o sejam as mais interessantes sob a √≥tica da programa√ß√£o orientada a objetos, ou melhor, sob a √≥tica do design orientado a objetos.</p>

<p>Como j√° foi discutido no post anterior, √© muito comum termos um modelo an√™mico: Classes que apenas possuem <code>getters</code> e <code>setters</code>, ou seja, meros sacos de dados. Para quem j√° estudou C sabe que no fundo isso n√£o √© uma classe, mas sim uma <code>struct</code>.</p>

<p>O fato de termos modelos an√™micos onde classes que deveriam ser do nosso dom√≠nio na verdade acabam sem nenhuma regra de neg√≥cio, geralmente faz com que n√≥s transfiramos essas regras para lugares "errados" (entre aspas porque quem sou eu pra dizer o que √© certo ou errado?).</p>

<p>Que lugares errados seriam esses?</p>

<h2 id="helpers-ou-utils">Helpers ou Utils</h2>

<p>Quem nunca viu uma classe chamada <code>StringHelper</code> ou <code>DateUtils</code>? S√£o classes que claramente est√£o perdidas em nosso sistema. O que seria, no mundo real, um(a) <code>StringHelper</code>? Se n√£o existe no mundo real, tem certeza que deveria existir no c√≥digo?</p>

<p><img src="https://i.imgur.com/rc9OMWr.jpg" alt="Reflit√£o" /></p>

<p>Esse tipo de classe √© uma heran√ßa clara da programa√ß√£o procedural em nosso c√≥digo onde estamos separando o comportamento dos seus dados, quando a orienta√ß√£o a objetos tem todas as ferramentas necess√°rias para n√≥s os juntarmos.</p>

<h3 id="poss%C3%ADvel-solu%C3%A7%C3%A3o">Poss√≠vel solu√ß√£o</h3>

<p>Se voc√™ possui uma classe <code>StringHelper</code>, talvez ela esteja fazendo valida√ß√µes bem gen√©ricas. Nesse caso, nada mais justo do que transform√°-la em uma classe bem gen√©rica, como <code>String</code>. Nessa classe voc√™ pode ter comportamentos e verifica√ß√µes pertinentes a uma string em seu c√≥digo.</p>

<p>Mas na maioria das vezes as verifica√ß√µes nesse tipo de classe s√£o espec√≠ficas de regras de neg√≥cio. Ex.: Garantir que nome possua pelo menos 10 letras.</p>

<p>Se √© uma regra de neg√≥cio, deveria estar na classe de neg√≥cio. Talvez na classe <code>Pessoa</code>. Talvez numa classe mais espec√≠fica, como <code>Nome</code>. Depende do seu sistema.</p>

<h2 id="services-in%C3%BAteis">Services in√∫teis</h2>

<p><a href="https://amzn.to/39MBuNH">O livro do Eric Evans sobre DDD</a> √© certamente uma obra que revolucionou o mundo do desenvolvimento. Eu particularmente ainda n√£o o li, mas li <a href="https://amzn.to/2Q1bW8d">obras inspiradas por este livro</a>, ent√£o sei que: Neste livro foram definidos alguns conceitos sobre classes chamadas de <code>Services</code>.</p>

<p>Uma das poss√≠veis "categorias" desse tipo de classe √© <code>Application Service</code>. Este tipo de classe tem como prop√≥sito receber informa√ß√µes de fora do dom√≠nio do sistema (da web, linha de comando, etc) e orquestrar as chamadas a regras de dom√≠nio.</p>

<p>Um exemplo cl√°ssico:</p>

<pre><code class="php">&lt;?php

class AddUser
{
    private UserRepository $repository;
    private PasswordHasher $hasher;

    public function __construct(UserRepository $repository, PasswordHasher $hasher)
    {
        $this-&gt;repository = $repository;
        $this-&gt;hasher = $hasher;
    }

    public function execute(AddUserDto $data): void
    {
        $hashedPassword = $this-&gt;hasher
            -&gt;hash($data-&gt;password());
        $user = new User($data-&gt;email(), $hashedPassword);

        $this-&gt;repository-&gt;add($user);
    }
}
</code></pre>

<p>H√° pontos de melhoria nesse c√≥digo (sempre h√°), mas basicamente: Ele recebe os dados de algum mecanismo de entrega atrav√©s de um DTO (objeto de transfer√™ncia de dados, que serve basicamente para transferir dados entre camadas no sistema), e passa para o dom√≠nio que sabe cifrar a senha, armazenar o usu√°rio no reposit√≥rio, etc.</p>

<h3 id="problema-comum">Problema comum</h3>

<p>Essa defini√ß√£o de <code>Application Service</code> em algum momento foi tomada por algu√©m como "Classe obrigat√≥ria para adicionar <em>indire√ß√£o</em> desnecess√°ria no sistema".</p>

<p>Na pr√°tica √© muito comum vermos c√≥digo onde um Controller chama um m√©todo de uma classe com <code>Service</code> no nome, e esse m√©todo n√£o faz nada al√©m de chamar um m√©todo de outra classe. Essa chamada extra de um m√©todo √© conhecida como indire√ß√£o, de forma resumida.</p>

<p>Algo parecido com isso:</p>

<pre><code class="php">&lt;?php

class UserService
{
    private UserRepository $repository;

    public function __construct(UserRepository $repository)
    {
        $this-&gt;repository = $repository;
    }

    public function add(User $user): void
    {
        $this-&gt;repository-&gt;add($user);
    }

    // todos os outros m√©todos p√∫blicos que tamb√©m existem em UserRepository
}
</code></pre>

<p>Agora me responda: O que ganhamos ao ter a classe <code>UserService</code>? Ganhamos apenas mais indire√ß√µes em nosso sistema. Mais um lugar que nossa IDE vai nos fazer passar at√© chegar no c√≥digo que de fato executa algo.</p>

<p>Al√©m de parecerem ser classes conhecidas como <em>God classes</em>, j√° que aparentam fazer tudo no sistema, s√£o in√∫teis na pr√°tica.</p>

<p>Esse √© mais um exemplo de programa√ß√£o procedural sendo aplicada, onde temos apenas fun√ß√µes sem nenhum significado pro neg√≥cio agrupadas em uma classe que simplesmente chama outras fun√ß√µes.</p>

<p>Outra caracter√≠stica de programa√ß√£o procedural nesse caso √© que muito comumente temos m√©todos n√£o t√£o relacionados na mesma classe <code>Service</code>.</p>

<p>√â comum um <code>UserService</code> ter um m√©todo com uma chamada para salvar um usu√°rio e outro m√©todo para enviar um e-mail para ele. Responsabilidades que deveriam estar em classes separadas.</p>

<p>No canal <em>Dev Eficiente</em>, do Aberto Souza, tem um v√≠deo falando um pouco mais sobre o problema deste tipo de classe, mas sob uma outra √≥tica. Vale a pena conferir:</p>

<p><lite-youtube videoid="szGb93_hXgI" style="background-image: url('https://i.ytimg.com/vi/szGb93_hXgI/hqdefault.jpg');">
    <a href="https://youtube.com/watch?v=szGb93_hXgI" class="lty-playbtn" title="Reproduzir v√≠deo">
        <span class="lyt-visually-hidden">Reproduzir v√≠deo: Paradigmas de Programa√ß√£o | Programando com Vinicius Dias</span>
    </a>
</lite-youtube></p>

<h2 id="camada-model-do-mvc">Camada Model do MVC</h2>

<p>Um ponto que tem levantado bastante discuss√£o em comunidades que participo √©: O que √© a camada <em>Model</em> no MVC?</p>

<p>Discutir sobre MVC √© assunto pra outro post, mas o que tenho visto como consenso √©: Camada que faz a persist√™ncia dos dados.</p>

<p>E a regra de neg√≥cio? Uma galera tem colocado nos <em>Controllers</em>. E a√≠? Se essa l√≥gica precisar ser reaproveitada, como fazemos? Como chamamos um <em>Controller</em> dentro de outro? Complicado, n√©?</p>

<p>Em nossos <em>Controllers</em> √© muito comum ver aquele c√≥digo super famoso da programa√ß√£o procedural cheio de IFs e verifica√ß√µes em tipos primitivos, sem nenhum significado para o neg√≥cio.</p>

<h3 id="padr%C3%B5es-arquiteturais">Padr√µes arquiteturais</h3>

<p>Para "resolver" esse problema, diversos padr√µes arquiteturais existem, e eu falei um pouquinho (bem pouquinho) sobre arquitetura nesse meu outro post: <a href="https://dias.dev/2020-04-10-o-que-e-arquitetura/">O que √© Arquitetura</a></p>

<h2 id="conclus%C3%A3o">Conclus√£o</h2>

<p>Por mais que a gente estude muito sobre ferramentas, frameworks, hypes e modinhas, os princ√≠pios da programa√ß√£o orientada a objetos mudam muito pouco e merecem MUITA aten√ß√£o.</p>

<p>Estude conceitos, princ√≠pios, padr√µes... Tudo isso vai poder ser aplicado naquele framework que foi lan√ßado semana passada e voc√™ est√° doido pra usar pra fazer um CRUD. Acredite.</p>

<p>Infelizmente eu ainda vejo muito c√≥digo utilizando estas "t√©cnicas" procedurais utilizando classes, e pessoas acreditando que isso √© desenvolver utilizando a programa√ß√£o orientada a objetos.</p>

<p>Voc√™ costuma ver c√≥digo assim no seu dia a dia? Compartilha aqui nos coment√°rios algum caso que voc√™ tenha visto recentemente.</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Programa√ß√£o procedural orientada a classes - Parte 1]]></title>
            <link href="https://dias.dev/2020-04-13-programacao-procedural-orientada-a-classes-parte-1/"/>
            <updated>2020-04-13T00:00:00+00:00</updated>
            <id>https://dias.dev/2020-04-13-programacao-procedural-orientada-a-classes-parte-1/</id>
            <content type="html"><![CDATA[<h2 id="farsa-da-programa%C3%A7%C3%A3o-orientada-a-objetos">Farsa da programa√ß√£o Orientada a Objetos</h2>

<p>Acredito que todos concordamos que a programa√ß√£o Orientada a Objetos torna nosso c√≥digo mais leg√≠vel e permite arquiteturas mais interessantes do que a programa√ß√£o procedural, al√©m de permitir recursos interessantes de reutiliza√ß√£o de c√≥digo.</p>

<p>Partindo desse pressuposto, tamb√©m acredito que seja inten√ß√£o de qualquer pessoa que trabalhe com desenvolvimento aprender mais e mais as t√©cnicas e boas pr√°ticas deste paradigma de programa√ß√£o.</p>

<p>O problema acontece quando a gente vem de um aprendizado de programa√ß√£o procedural e tenta aplicar as mesmas t√©cnicas fazendo uso de classes e objetos.</p>

<h2 id="exemplo-cl%C3%A1ssico">Exemplo cl√°ssico</h2>

<p>H√° um exemplo muito cl√°ssico de um c√≥digo que claramente, embora utilize classes e objetos, √© procedural:</p>

<h3 id="defini%C3%A7%C3%A3o-de-uma-classe">Defini√ß√£o de uma classe</h3>

<pre><code class="php">&lt;?php

class Pessoa
{
    private string $primeiroNome;
    private string $ultimoNome;
    private \DateTimeInterface $dataNascimento;

    public function setPrimeiroNome(string $primeiroNome): void
    {
        $this-&gt;primeiroNome = $primeiroNome;
    }

    public function getPrimeiroNome(): string
    {
        return $this-&gt;primeiroNome;
    }

    public function setUltimoNome(string $ultimoNome): void
    {
        $this-&gt;ultimoNome = $ultimoNome;
    }

    public function getUltimoNome(): string
    {
        return $this-&gt;ultimoNome;
    }

    public function setDataNascimento(\DateTimeInterface $dataNascimento): void
    {
        $this-&gt;dataNascimento = $dataNascimento;
    }

    public function getDataNascimento(): \DateTimeInterface
    {
        return $this-&gt;dataNascimento;
    }
}

</code></pre>

<h3 id="utiliza%C3%A7%C3%A3o-dela">Utiliza√ß√£o dela</h3>

<pre><code class="php">$pessoa = new Pessoa();
$pessoa-&gt;setPrimeiroNome('Vinicius');
$pessoa-&gt;setUltimoNome('Dias');
$pessoa-&gt;setDataNascimento(new \DateTimeImmutable('1997-10-15')); // aceito presentes

$idade = $pessoa-&gt;getDataNascimento()-&gt;diff(new \DateImmutable())-&gt;y;

echo "{$pessoa-&gt;getPrimeiroNome()} {$pessoa-&gt;getUltimoNome()} tem $idade anos";
</code></pre>

<h3 id="problema">Problema</h3>

<p>Olhando esse simples exemplo:</p>

<ol>
<li>Voc√™ nota algum problema?</li>
<li>Identifica semelhan√ßa com algum peda√ßo de c√≥digo que voc√™ tenha escrito recentemente?</li>
</ol>

<p>Depois de voc√™ refletir um pouco, vamos continuar.</p>

<p>O c√≥digo exemplificado utiliza uma classe <code>Pessoa</code> e a partir desta classe, cria um objeto. Logo, est√° utilizando do paradigma de programa√ß√£o orientada a objetos, certo? Errado!</p>

<p>Esse exemplo √© claramente um c√≥digo procedural que usa uma classe. Nada al√©m disso.</p>

<h2 id="proposta">Proposta</h2>

<p>Se voc√™ possui uma classe, os objetos gerados atrav√©s dela devem ter seus comportamentos descritos (atrav√©s de m√©todos) e n√£o apenas fornecer os dados para realizar essas a√ß√µes.</p>

<p>O c√≥digo anterior poderia ser escrito da seguinte forma para usar o paradigma Orientado a Objetos:</p>

<pre><code class="php">&lt;?php

class Pessoa
{
    public function __construct(
        private string $primeiroNome,
        private string $ultimoNome,
        private \DateTimeInterface $dataNascimento
    ) {
    }

    public function nomeCompleto(): string
    {
        return "{$this-&gt;primeiroNome} {$this-&gt;ultimoNome}";
    }

    public function idade(): int
    {
        $hoje = new DateTimeImmutable();

        return $this-&gt;dataNascimento-&gt;diff($hoje)-&gt;y;
    }
</code></pre>

<p>E assim poder√≠amos utilizar esta classe:</p>

<pre><code class="php">&lt;?php

$pessoa = new Pessoa('Vinicius', 'Dias', new \DateTimeImmutable('1997-10-15'));

echo "{$pessoa-&gt;nomeCompleto()} tem {$pessoa-&gt;idade()} anos.";
</code></pre>

<h3 id="motiva%C3%A7%C3%A3o-da-mudan%C3%A7a">Motiva√ß√£o da mudan√ßa</h3>

<p>Com essa simples modifica√ß√£o n√≥s n√£o temos mais inst√¢ncias inv√°lidas, j√° que agora toda <code>Pessoa</code> tem seu primeiro e √∫ltimo nome e sua data de nascimento. Antes, primeiro n√≥s est√°vamos criando uma <code>Pessoa</code> em um estado inconsistente, sem seus dados, para depois defini-los.</p>

<p>Al√©m disso, agora qualquer m√©todo que receba uma <code>Pessoa</code> por par√¢metro n√£o precisa saber se nesse objeto o nome completo est√° separado em primeiro e segundo nome ou n√£o. N√£o precisa saber como o c√°lculo da idade √© feito.</p>

<p>Caso a forma de apresentar o nome precise ser modificado (de "Vinicius Dias" para "Dias, Vinicius", por exemplo), podemos ir direto no ponto correto: O m√©todo <code>nomeCompleto</code>.</p>

<p>Embora seja um exemplo muito simples, ele mostra com clareza como normalmente escrevemos c√≥digo acreditando estar utilizando a programa√ß√£o orientada a objetos.</p>

<p>Caso voc√™ tenha algum outro exemplo desse tipo em mente, j√° tenha visto algum c√≥digo procedural com classes assim, ou tenha alguma outra sugest√£o de melhoria pra esse exemplo, que tal compartilhar com a gente aqui nos coment√°rios?</p>

<h2 id="princ%C3%ADpios-e-padr%C3%B5es">Princ√≠pios e padr√µes</h2>

<p>Para nos ajudar a utilizar de forma mais "correta" a orienta√ß√£o a objetos, existem diversos padr√µes e princ√≠pios. Uns mais simples como o <a href="https://www.youtube.com/watch?v=7IXeLhpjk6g">Tell, Don't ask</a>, outros mais completos e complexos como os <a href="https://amzn.to/3Eplrm2">princ√≠pios SOLID</a>.</p>

<p>Todos os princ√≠pios merecem uma aten√ß√£o especial, por√©m isso foge do escopo deste artigo, mas uma r√°pida busca te mostra uma imensid√£o de conte√∫do a respeito.</p>

<h2 id="conclus%C3%A3o">Conclus√£o</h2>

<p>Muito frequentemente n√≥s utilizamos o paradigma procedural em nosso c√≥digo e s√≥ pelo fato de termos classes definidas no c√≥digo, achamos que estamos utilizando a Orienta√ß√£o a Objetos.</p>

<p>Este paradigma √© muito mais do que apenas definir classes, atributos e m√©todos, logo, precisa de muito mais estudo do que apenas a leitura da documenta√ß√£o da sua linguagem favorita para aprender a sintaxe.</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[O que √© arquitetura de software]]></title>
            <link href="https://dias.dev/2020-04-10-o-que-e-arquitetura/"/>
            <updated>2020-04-10T00:00:00+00:00</updated>
            <id>https://dias.dev/2020-04-10-o-que-e-arquitetura/</id>
            <content type="html"><![CDATA[<h2 id="problema">Problema</h2>

<p>Imagine que no momento da escrita desse artigo (ano de 2020) voc√™ esteja criando um sistema para a empresa que te contratou como desenvolvedor(a). Nesse sistema voc√™ pode utilizar todas as novas tecnologias, pode decidir como vai organizar o c√≥digo, enfim, o sonho de qualquer pessoa que trabalha na √°rea.</p>

<p>Como voc√™ trabalha com PHP, escolhe o framework que est√° "na boca do povo": Laravel. Come√ßa o desenvolvimento e rapidamente entrega uma primeira vers√£o do projeto. A equipe de neg√≥cios est√° feliz com toda a velocidade de entrega e a equipe t√©cnica est√° feliz de utilizar um framework da moda.</p>

<p>Os anos se passam. No futuro, voc√™ precisa dar manuten√ß√£o em um sistema que usa uma vers√£o mega desatualizada do framework j√° que eles decidiram trocar a ferramenta que fazia o acesso ao banco de dados, e toda a regra de neg√≥cios da aplica√ß√£o est√° em "models" do Eloquent.</p>

<h2 id="mundo-real">Mundo real</h2>

<p>Parece irreal, n√©!?</p>

<p>"Ah, mas o Laravel n√£o vai deixar de usar o Eloquent. N√£o faz sentido esse exemplo"</p>

<p>Bom, hoje eu trabalho em uma empresa que tem um software funcionando desde o PHP 3.</p>

<p>Em algum momento da vida desse software, acharam uma boa ideia atrelar as regras de neg√≥cio a um projeto conhecido como Pear DB. Esse projeto hoje n√£o recebe atualiza√ß√µes (apenas corre√ß√µes de seguran√ßa), al√©m de nos deixar "amarrados" a sua filosofia de c√≥digo, que difere do que temos nos mundos atuais de PSRs, Composer, etc.</p>

<p>Resultado: O sistema evolui. Novas funcionalidades s√£o adicionadas todo dia. A equipe de neg√≥cios continua recebendo suas demandas, mas como a forma de desenvolver n√£o evoluiu junto com o conhecimento e ferramentas atuais, o prazo j√° n√£o √© o mesmo.</p>

<p>Al√©m disso, novos integrantes da equipe sofrem para entender todo o espaguete que o c√≥digo virou. Caos!</p>

<h2 id="como-poderia-ter-sido%3F">Como poderia ter sido?</h2>

<p>Se os arquitetos desse sistema pudessem voltar no tempo, o que fariam, voc√™ pode se perguntar. Minha ideia aqui √© levantar algumas op√ß√µes.</p>

<p>Em termos de c√≥digo, entidades poderiam ter sido criadas sem nenhum conhecimento da infraestrutura que cuida da persist√™ncia. Se √© utilizado Pear DB, PDO, Doctrine, Eloquent, uma API, um arquivo com os dados, tanto faz. A l√≥gica de neg√≥cios estaria intacta.</p>

<p>E para salvar no banco? Classes especializadas nessa tarefa, tamb√©m conhecidas como reposit√≥rios, poderiam ter sido utilizadas. Essas classes saberiam lidar com as entidades e fazer a tradu√ß√£o necess√°ria para o sistema de persist√™ncia (usando SQL, por exemplo).</p>

<p>E se a ferramenta usada fosse descontinuada? Bom, simples: Poder√≠amos criar uma <code>interface</code> que define o que um reposit√≥rio deve saber fazer. Quando o Pear DB deixasse de receber suporte, nossa classe <code>PearDbQuestionRepository</code> (reposit√≥rio de perguntas) poderia ser f√°cilmente substitu√≠da por uma classe <code>PdoQuestionRepository</code>, ou at√© mesmo <code>DoctrineQuestionRepository</code>. Isso n√£o faria diferen√ßa para as regras de neg√≥cio, que precisavam de qualquer implementa√ß√£o da interface <code>QuestionRepository</code>.</p>

<h2 id="o-que-isso-tem-a-ver-com-arquitetura%3F">O que isso tem a ver com arquitetura?</h2>

<p>‚Äî Essa solu√ß√£o proposta √© perfeita?<br>
‚Äî Longe disso! Tem suas vantagens e desvantagens</p>

<p>Decis√µes de como organizar nosso c√≥digo de forma que ele continue "utiliz√°vel" ap√≥s determinado per√≠odo √© o prop√≥sito mais simples de uma arquitetura.</p>

<p>Arquitetura, segundo nosso querido Google, √©: "arte e t√©cnica de organizar espa√ßos e criar ambientes para abrigar os diversos tipos de atividades humanas, visando tb. a determinada inten√ß√£o pl√°stica."</p>

<p>Se trazemos isso para o mundo do desenvolvimento temos uma defini√ß√£o semelhante √† seguinte: "A arquitetura de software de um sistema consiste na defini√ß√£o dos componentes de software, suas propriedades externas, e seus relacionamentos com outros softwares."</p>

<p>Voc√™ pode encontrar in√∫meras defini√ß√µes para esse termo, mas em sua ess√™ncia, arquitetura de software nos ajuda a definir como organizar nosso c√≥digo, torn√°-lo mais compreens√≠vel, manuten√≠vel a longo prazo, e separar a responsabilidades de dom√≠nio (regras de neg√≥cio) da infraestrutura (banco de dados, log, envio de e-mails, etc).</p>

<h2 id="padr%C3%B5es-arquiteturais">Padr√µes arquiteturais</h2>

<p>O exemplo que eu dei √© bem raso e cita apenas um pequeno problema que uma arquitetura bem feita visa resolver. Para resolver diversos outros problemas, padr√µes arquiteturais surgiram ao longo do tempo.</p>

<p>Voc√™ muito provavelmente conhece pelo menos um (nem que seja de nome), e aqui cito nomes de padr√µes arquiteturais bem famosos:</p>

<ul>
<li>MVC (o famoso Model-View-Controller)</li>
<li>ADR (Action-Domain-Response, uma esp√©cie de evolu√ß√£o do MVC para web)</li>
<li><a href="https://amzn.to/3Do3e7h">SOA (Arquitetura orientada a servi√ßos)</a></li>
<li><a href="https://amzn.to/3dljwDj">Clean Architecture</a> (em portugu√™s, <a href="https://amzn.to/3fqp69x">Arquitetura Limpa</a>)</li>
<li>Hexagonal Architecture (em portugu√™s, Arquitetura Hexagonal)</li>
<li>Onion Architecture (em portugu√™s, Arquitetura em Camadas (cebola))</li>
</ul>

<p>Citar especificidades de cada padr√£o e suas semelhan√ßas / diferen√ßas fogem do escopo desse post, mas √© interessante conhecer e se adaptar com alguns nomes.</p>

<h2 id="conclus%C3%A3o">Conclus√£o</h2>

<p>N√£o existe sistema sem arquitetura, s√≥ sistema com arquitetura ruim.</p>

<p>Mesmo que no desenvolvimento de um sistema voc√™ n√£o siga nenhum padr√£o arquitetural, h√° decis√µes de arquitetura no c√≥digo, e se mal feitas, essas decis√µes podem te assombrar por muito MUITO tempo.</p>
]]></content>
        </entry>
    </feed>