{"version":3,"sources":["webpack:///./src/components/bio.js","webpack:///./src/templates/blog-post.js"],"names":["Bio","data","useStaticQuery","author","site","siteMetadata","social","className","style","marginRight","src","alt","borderRadius","width","height","name","summary","href","twitter","pageQuery","BlogPostTemplate","pageContext","location","post","markdownRemark","siteTitle","title","previous","next","frontmatter","description","excerpt","meta","content","itemScope","itemType","itemProp","date","dangerouslySetInnerHTML","__html","html","display","flexWrap","justifyContent","listStyle","padding","to","fields","slug","rel"],"mappings":"iLAwDeA,EA9CH,WAAO,IAAD,IACVC,EAAOC,yBAAe,cAiBtBC,EAAM,UAAGF,EAAKG,KAAKC,oBAAb,aAAG,EAAwBF,OACjCG,EAAM,UAAGL,EAAKG,KAAKC,oBAAb,aAAG,EAAwBC,OAEvC,OACE,yBAAKC,UAAU,OAEb,yBAAKC,MAAO,CAAEC,YAAa,qBACzB,yBAAKC,IAAI,wEACJC,IAAI,oEACJH,MAAO,CACLI,aAAc,MACdC,MAAO,MACPC,OAAQ,WAGhBX,aAAA,EAAAA,EAAQY,OACP,0CACc,gCAASZ,EAAOY,MAD9B,KAC8CZ,aAAA,EAAAA,EAAQa,UAAW,KADjE,IAGE,uBAAGC,KAAI,yBAAyBX,aAAA,EAAAA,EAAQY,UAAR,KAAhC,qC,wBCsBGC,GAFEC,UA5DU,SAAC,GAAqC,IAAD,EAAlCnB,EAAkC,EAAlCA,KAAMoB,EAA4B,EAA5BA,YAAaC,EAAe,EAAfA,SACvCC,EAAOtB,EAAKuB,eACZC,GAAY,UAAAxB,EAAKG,KAAKC,oBAAV,eAAwBqB,QAAxB,QACVC,EAAmBN,EAAnBM,SAAUC,EAASP,EAATO,KAElB,OACE,kBAAC,IAAD,CAAQN,SAAUA,EAAUI,MAAOD,GACjC,kBAAC,IAAD,CACEC,MAAOH,EAAKM,YAAYH,MACxBI,YAAaP,EAAKM,YAAYC,aAAeP,EAAKQ,QAClDC,KAAM,CAAC,CAAEjB,KAAM,SAAUkB,QAAS,oBAEpC,6BACE1B,UAAU,YACV2B,WAAS,EACTC,SAAS,6BAET,gCACE,wBAAIC,SAAS,YAAYb,EAAKM,YAAYH,OAC1C,uBAAGU,SAAS,eAAeb,EAAKM,YAAYQ,OAE9C,6BACEC,wBAAyB,CAAEC,OAAQhB,EAAKiB,MACxCJ,SAAS,gBAEX,6BACA,gCACE,kBAAC,EAAD,QAGJ,yBAAK7B,UAAU,iBACb,wBACEC,MAAO,CACLiC,QAAQ,OACRC,SAAS,OACTC,eAAe,gBACfC,UAAU,OACVC,QAAS,IAGX,4BACGlB,GACC,kBAAC,OAAD,CAAMmB,GAAInB,EAASoB,OAAOC,KAAMC,IAAI,QAApC,KACKtB,EAASE,YAAYH,QAI9B,4BACGE,GACC,kBAAC,OAAD,CAAMkB,GAAIlB,EAAKmB,OAAOC,KAAMC,IAAI,QAC7BrB,EAAKC,YAAYH,MADpB,WAaQ","file":"component---src-templates-blog-post-js-9d1a8703c0f84fa9ad8f.js","sourcesContent":["/**\n * Bio component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.com/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nconst Bio = () => {\n  const data = useStaticQuery(graphql`\n    query BioQuery {\n      site {\n        siteMetadata {\n          author {\n            name\n            summary\n          }\n          social {\n            twitter\n          }\n        }\n      }\n    }\n  `)\n\n  // Set these values by editing \"siteMetadata\" in gatsby-config.js\n  const author = data.site.siteMetadata?.author\n  const social = data.site.siteMetadata?.social\n\n  return (\n    <div className=\"bio\">\n\n      <div style={{ marginRight: 'var(--spacing-4)' }}>\n        <img src=\"https://gravatar.com/avatar/63579c5a873f3ab6abff10803e9a252f.jpg?s=50\"\n             alt=\"Foto de Vinicius Dias segurando um microfone durante uma palestra\"\n             style={{\n               borderRadius: '50%',\n               width: 50.01,\n               height: 50.01,\n             }} />\n      </div>\n      {author?.name && (\n        <p>\n          Escrito por <strong>{author.name}</strong> {author?.summary || null}\n          {` `}\n          <a href={`https://twitter.com/${social?.twitter || ``}`}>\n            Que tal seguir ele no Twitter?\n          </a>\n        </p>\n      )}\n    </div>\n  )\n}\n\nexport default Bio\n","import React from \"react\"\nimport { Link, graphql } from \"gatsby\"\n\nimport Bio from \"../components/bio\"\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\n\nconst BlogPostTemplate = ({ data, pageContext, location }) => {\n  const post = data.markdownRemark\n  const siteTitle = data.site.siteMetadata?.title || `Title`\n  const { previous, next } = pageContext\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <SEO\n        title={post.frontmatter.title}\n        description={post.frontmatter.description || post.excerpt}\n        meta={[{ name: 'author', content: 'Vinicius Dias' }]}\n      />\n      <article\n        className=\"blog-post\"\n        itemScope\n        itemType=\"http://schema.org/Article\"\n      >\n        <header>\n          <h1 itemProp=\"headline\">{post.frontmatter.title}</h1>\n          <p itemProp=\"dateCreated\">{post.frontmatter.date}</p>\n        </header>\n        <section\n          dangerouslySetInnerHTML={{ __html: post.html }}\n          itemProp=\"articleBody\"\n        />\n        <hr />\n        <footer>\n          <Bio />\n        </footer>\n      </article>\n      <nav className=\"blog-post-nav\">\n        <ul\n          style={{\n            display: `flex`,\n            flexWrap: `wrap`,\n            justifyContent: `space-between`,\n            listStyle: `none`,\n            padding: 0,\n          }}\n        >\n          <li>\n            {previous && (\n              <Link to={previous.fields.slug} rel=\"prev\">\n                ← {previous.frontmatter.title}\n              </Link>\n            )}\n          </li>\n          <li>\n            {next && (\n              <Link to={next.fields.slug} rel=\"next\">\n                {next.frontmatter.title} →\n              </Link>\n            )}\n          </li>\n        </ul>\n      </nav>\n    </Layout>\n  )\n}\n\nexport default BlogPostTemplate\n\nexport const pageQuery = graphql`\n  query BlogPostBySlug($slug: String!) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    markdownRemark(fields: { slug: { eq: $slug } }) {\n      id\n      excerpt(pruneLength: 160)\n      html\n      frontmatter {\n        title\n        date(formatString: \"DD [de] MMMM [de] YYYY\", locale: \"pt-BR\")\n        description\n      }\n    }\n  }\n`\n"],"sourceRoot":""}