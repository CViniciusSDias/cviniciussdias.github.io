{"componentChunkName":"component---src-templates-blog-post-js","path":"/2020-04-13-programacao-procedural-orientada-a-classes-parte-1/","result":{"data":{"site":{"siteMetadata":{"title":"Dias de Dev","siteUrl":"https://dias.dev"}},"markdownRemark":{"id":"a2e2bbf8-228c-53c5-bb26-ba1d64724138","excerpt":"Farsa da programação Orientada a Objetos Acredito que todos concordamos que a programação Orientada a Objetos torna nosso código mais legível e permite…","html":"<h2>Farsa da programação Orientada a Objetos</h2>\n<p>Acredito que todos concordamos que a programação Orientada a Objetos torna nosso código mais legível e permite arquiteturas mais interessantes do que a programação procedural, além de permitir recursos interessantes de reutilização de código.</p>\n<p>Partindo desse pressuposto, também acredito que seja intenção de qualquer pessoa que trabalhe com desenvolvimento aprender mais e mais as técnicas e boas práticas deste paradigma de programação.</p>\n<p>O problema acontece quando a gente vem de um aprendizado de programação procedural e tenta aplicar as mesmas técnicas fazendo uso de classes e objetos.</p>\n<h2>Exemplo clássico</h2>\n<p>Há um exemplo muito clássico de um código que claramente, embora utilize classes e objetos, é procedural:</p>\n<h3>Definição de uma classe</h3>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Pessoa</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword type-declaration\">string</span> <span class=\"token variable\">$primeiroNome</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword type-declaration\">string</span> <span class=\"token variable\">$ultimoNome</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name class-name-fully-qualified type-declaration\"><span class=\"token punctuation\">\\</span>DateTimeInterface</span> <span class=\"token variable\">$dataNascimento</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">setPrimeiroNome</span><span class=\"token punctuation\">(</span><span class=\"token keyword type-hint\">string</span> <span class=\"token variable\">$primeiroNome</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword return-type\">void</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">primeiroNome</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$primeiroNome</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getPrimeiroNome</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword return-type\">string</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">primeiroNome</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">setUltimoNome</span><span class=\"token punctuation\">(</span><span class=\"token keyword type-hint\">string</span> <span class=\"token variable\">$ultimoNome</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword return-type\">void</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">ultimoNome</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$ultimoNome</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getUltimoNome</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword return-type\">string</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">ultimoNome</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">setDataNascimento</span><span class=\"token punctuation\">(</span><span class=\"token class-name class-name-fully-qualified type-declaration\"><span class=\"token punctuation\">\\</span>DateTimeInterface</span> <span class=\"token variable\">$dataNascimento</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword return-type\">void</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">dataNascimento</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$dataNascimento</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getDataNascimento</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token class-name class-name-fully-qualified return-type\"><span class=\"token punctuation\">\\</span>DateTimeInterface</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">dataNascimento</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></span></code></pre></div>\n<h3>Utilização dela</h3>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token variable\">$pessoa</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Pessoa</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$pessoa</span><span class=\"token operator\">-></span><span class=\"token function\">setPrimeiroNome</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'Vinicius'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$pessoa</span><span class=\"token operator\">-></span><span class=\"token function\">setUltimoNome</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'Dias'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$pessoa</span><span class=\"token operator\">-></span><span class=\"token function\">setDataNascimento</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name class-name-fully-qualified\"><span class=\"token punctuation\">\\</span>DateTimeImmutable</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'1997-10-15'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// aceito presentes</span>\n\n<span class=\"token variable\">$idade</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$pessoa</span><span class=\"token operator\">-></span><span class=\"token function\">getDataNascimento</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token function\">diff</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name class-name-fully-qualified\"><span class=\"token punctuation\">\\</span>DateImmutable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token property\">y</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">echo</span> <span class=\"token string double-quoted-string\">\"<span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token variable\">$pessoa</span><span class=\"token operator\">-></span><span class=\"token function\">getPrimeiroNome</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span> <span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token variable\">$pessoa</span><span class=\"token operator\">-></span><span class=\"token function\">getUltimoNome</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span> tem <span class=\"token interpolation\"><span class=\"token variable\">$idade</span></span> anos\"</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3>Problema</h3>\n<p>Olhando esse simples exemplo:</p>\n<ol>\n<li>Você nota algum problema?</li>\n<li>Identifica semelhança com algum pedaço de código que você tenha escrito recentemente?</li>\n</ol>\n<p>Depois de você refletir um pouco, vamos continuar.</p>\n<p>O código exemplificado utiliza uma classe <code class=\"language-text\">Pessoa</code> e a partir desta classe, cria um objeto. Logo, está utilizando do paradigma de programação orientada a objetos, certo? Errado!</p>\n<p>Esse exemplo é claramente um código procedural que usa uma classe. Nada além disso.</p>\n<h2>Proposta</h2>\n<p>Se você possui uma classe, os objetos gerados através dela devem ter seus comportamentos descritos (através de métodos) e não apenas fornecer os dados para realizar essas ações.</p>\n<p>O código anterior poderia ser escrito da seguinte forma para usar o paradigma Orientado a Objetos:</p>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Pessoa</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword type-declaration\">string</span> <span class=\"token variable\">$primeiroNome</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword type-declaration\">string</span> <span class=\"token variable\">$ultimoNome</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name class-name-fully-qualified type-declaration\"><span class=\"token punctuation\">\\</span>DateTimeInterface</span> <span class=\"token variable\">$dataNascimento</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">__construct</span><span class=\"token punctuation\">(</span>\n        <span class=\"token keyword type-hint\">string</span> <span class=\"token variable\">$primeiroNome</span><span class=\"token punctuation\">,</span>\n        <span class=\"token keyword type-hint\">string</span> <span class=\"token variable\">$ultimoNome</span><span class=\"token punctuation\">,</span>\n        <span class=\"token class-name class-name-fully-qualified type-declaration\"><span class=\"token punctuation\">\\</span>DateTimeInterface</span> <span class=\"token variable\">$dataNascimento</span>\n    <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">primeiroNome</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$primeiroNome</span><span class=\"token punctuation\">;</span>\n        <span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">ultimoNome</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$ultimoNome</span><span class=\"token punctuation\">;</span>\n        <span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">dataNascimento</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$dataNascimento</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">nomeCompleto</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword return-type\">string</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string double-quoted-string\">\"<span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">primeiroNome</span><span class=\"token punctuation\">}</span></span> <span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">ultimoNome</span><span class=\"token punctuation\">}</span></span>\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">idade</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword return-type\">int</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token variable\">$hoje</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DateTimeImmutable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        \n        <span class=\"token keyword\">return</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">dataNascimento</span><span class=\"token operator\">-></span><span class=\"token function\">diff</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$hoje</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token property\">y</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span></span></code></pre></div>\n<p>E assim poderíamos utilizar esta classe:</p>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token variable\">$pessoa</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Pessoa</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'Vinicius'</span><span class=\"token punctuation\">,</span> <span class=\"token string single-quoted-string\">'Dias'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name class-name-fully-qualified\"><span class=\"token punctuation\">\\</span>DateTimeImmutable</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'1997-10-15'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">echo</span> <span class=\"token string double-quoted-string\">\"<span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token variable\">$pessoa</span><span class=\"token operator\">-></span><span class=\"token function\">nomeCompleto</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span> tem <span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token variable\">$pessoa</span><span class=\"token operator\">-></span><span class=\"token function\">idade</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span> anos.\"</span><span class=\"token punctuation\">;</span></span></code></pre></div>\n<h3>Motivação da mudança</h3>\n<p>Com essa simples modificação nós não temos mais instâncias inválidas, já que agora toda <code class=\"language-text\">Pessoa</code> tem seu primeiro e último nome e sua data de nascimento. Antes, primeiro nós estávamos criando uma <code class=\"language-text\">Pessoa</code> em um estado inconsistente, sem seus dados, para depois defini-los.</p>\n<p>Além disso, agora qualquer método que receba uma <code class=\"language-text\">Pessoa</code> por parâmetro não precisa saber se nesse objeto o nome completo está separado em primeiro e segundo nome ou não. Não precisa saber como o cálculo da idade é feito.</p>\n<p>Caso a forma de apresentar o nome precise ser modificado (de “Vinicius Dias” para “Dias, Vinicius”, por exemplo), podemos ir direto no ponto correto: O método <code class=\"language-text\">nomeCompleto</code>.</p>\n<p>Embora seja um exemplo muito simples, ele mostra com clareza como normalmente escrevemos código acreditando estar utilizando a programação orientada a objetos.</p>\n<p>Caso você tenha algum outro exemplo desse tipo em mente, já tenha visto algum código procedural com classes assim, ou tenha alguma outra sugestão de melhoria pra esse exemplo, que tal compartilhar com a gente aqui nos comentários?</p>\n<h2>Princípios e padrões</h2>\n<p>Para nos ajudar a utilizar de forma mais “correta” a orientação a objetos, existem diversos padrões e princípios. Uns mais simples como o <a href=\"https://youtu.be/7IXeLhpjk6g\">Tell, Don’t ask</a>, outros mais completos e complexos como os <a href=\"https://amzn.to/2PAWL60\">princípios SOLID</a>.</p>\n<p>Todos os princípios merecem uma atenção especial, porém isso foge do escopo deste artigo, mas uma rápida busca te mostra uma imensidão de conteúdo a respeito.</p>\n<h2>Conclusão</h2>\n<p>Muito frequentemente nós utilizamos o paradigma procedural em nosso código e só pelo fato de termos classes definidas no código, achamos que estamos utilizando a Orientação a Objetos.</p>\n<p>Este paradigma é muito mais do que apenas definir classes, atributos e métodos, logo, precisa de muito mais estudo do que apenas a leitura da documentação da sua linguagem favorita para aprender a sintaxe.</p>","frontmatter":{"title":"Programação procedural orientada a classes - Parte 1","date":"13 de abril de 2020","description":"A programação orientada a objetos é muito citada e utilizada, mas será que você está fazendo da forma correta? Será que não está apenas usando classes na programação procedural?"}}},"pageContext":{"slug":"/2020-04-13-programacao-procedural-orientada-a-classes-parte-1/","previous":{"fields":{"slug":"/2020-04-10-o-que-e-arquitetura/"},"frontmatter":{"title":"O que é arquitetura"}},"next":{"fields":{"slug":"/2020-04-16-programacao-procedural-orientada-a-classes-parte-2/"},"frontmatter":{"title":"Programação procedural orientada a classes - Parte 2"}}}},"staticQueryHashes":["2841359383","3257411868"]}