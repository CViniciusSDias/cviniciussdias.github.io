{"componentChunkName":"component---src-templates-blog-post-js","path":"/2020-04-10-o-que-e-arquitetura/","result":{"data":{"site":{"siteMetadata":{"title":"Dias de Dev","siteUrl":"https://dias.dev"}},"markdownRemark":{"id":"e88ab542-78d6-5c8c-a98d-6ac8dcd9c14f","excerpt":"Problema Imagine que no momento da escrita desse artigo (ano de 2020) você esteja criando um sistema para a empresa que te contratou como desenvolvedor(a…","html":"<h2>Problema</h2>\n<p>Imagine que no momento da escrita desse artigo (ano de 2020) você esteja criando um sistema para a empresa que te contratou como desenvolvedor(a). Nesse sistema você pode utilizar todas as novas tecnologias, pode decidir como vai organizar o código, enfim, o sonho de qualquer pessoa que trabalha na área.</p>\n<p>Como você trabalha com PHP, escolhe o framework que está “na boca do povo”: Laravel. Começa o desenvolvimento e rapidamente entrega uma primeira versão do projeto. A equipe de negócios está feliz com toda a velocidade de entrega e a equipe técnica está feliz de utilizar um framework da moda.</p>\n<p>Os anos se passam. No futuro, você precisa dar manutenção em um sistema que usa uma versão mega desatualizada do framework já que eles decidiram trocar a ferramenta que fazia o acesso ao banco de dados, e toda a regra de negócios da aplicação está em “models” do Eloquent.</p>\n<h2>Mundo real</h2>\n<p>Parece irreal, né!?</p>\n<p>“Ah, mas o Laravel não vai deixar de usar o Eloquent. Não faz sentido esse exemplo”</p>\n<p>Bom, hoje eu trabalho em uma empresa que tem um software funcionando desde o PHP 3.</p>\n<p>Em algum momento da vida desse software, acharam uma boa ideia atrelar as regras de negócio a um projeto conhecido como Pear DB. Esse projeto hoje não recebe atualizações (apenas correções de segurança), além de nos deixar “amarrados” a sua filosofia de código, que difere do que temos nos mundos atuais de PSRs, Composer, etc.</p>\n<p>Resultado: O sistema evolui. Novas funcionalidades são adicionadas todo dia. A equipe de negócios continua recebendo suas demandas, mas como a forma de desenvolver não evoluiu junto com o conhecimento e ferramentas atuais, o prazo já não é o mesmo.</p>\n<p>Além disso, novos integrantes da equipe sofrem para entender todo o espaguete que o código virou. Caos!</p>\n<h2>Como poderia ter sido?</h2>\n<p>Se os arquitetos desse sistema pudessem voltar no tempo, o que fariam, você pode se perguntar. Minha ideia aqui é levantar algumas opções.</p>\n<p>Em termos de código, entidades poderiam ter sido criadas sem nenhum conhecimento da infraestrutura que cuida da persistência. Se é utilizado Pear DB, PDO, Doctrine, Eloquent, uma API, um arquivo com os dados, tanto faz. A lógica de negócios estaria intacta.</p>\n<p>E para salvar no banco? Classes especializadas nessa tarefa, também conhecidas como repositórios, poderiam ter sido utilizadas. Essas classes saberiam lidar com as entidades e fazer a tradução necessária para o sistema de persistência (usando SQL, por exemplo).</p>\n<p>E se a ferramenta usada fosse descontinuada? Bom, simples: Poderíamos criar uma <code class=\"language-text\">interface</code> que define o que um repositório deve saber fazer. Quando o Pear DB deixasse de receber suporte, nossa classe <code class=\"language-text\">PearDbQuestionRepository</code> (repositório de perguntas) poderia ser fácilmente substituída por uma classe <code class=\"language-text\">PdoQuestionRepository</code>, ou até mesmo <code class=\"language-text\">DoctrineQuestionRepository</code>. Isso não faria diferença para as regras de negócio, que precisavam de qualquer implementação da interface <code class=\"language-text\">QuestionRepository</code>.</p>\n<h2>O que isso tem a ver com arquitetura?</h2>\n<p>— Essa solução proposta é perfeita?<br>\n— Longe disso! Tem suas vantagens e desvantagens</p>\n<p>Decisões de como organizar nosso código de forma que ele continue “utilizável” após determinado período é o propósito mais simples de uma arquitetura.</p>\n<p>Arquitetura, segundo nosso querido Google, é: “arte e técnica de organizar espaços e criar ambientes para abrigar os diversos tipos de atividades humanas, visando tb. a determinada intenção plástica.”</p>\n<p>Se trazemos isso para o mundo do desenvolvimento temos uma definição semelhante à seguinte: “A arquitetura de software de um sistema consiste na definição dos componentes de software, suas propriedades externas, e seus relacionamentos com outros softwares.”</p>\n<p>Você pode encontrar inúmeras definições para esse termo, mas em sua essência, arquitetura de software nos ajuda a definir como organizar nosso código, torná-lo mais compreensível, manutenível a longo prazo, e separar a responsabilidades de domínio (regras de negócio) da infraestrutura (banco de dados, log, envio de e-mails, etc).</p>\n<h2>Padrões arquiteturais</h2>\n<p>O exemplo que eu dei é bem raso e cita apenas um pequeno problema que uma arquitetura bem feita visa resolver. Para resolver diversos outros problemas, padrões arquiteturais surgiram ao longo do tempo.</p>\n<p>Você muito provavelmente conhece pelo menos um (nem que seja de nome), e aqui cito nomes de padrões arquiteturais bem famosos:</p>\n<ul>\n<li>MVC (o famoso Model-View-Controller)</li>\n<li>ADR (Action-Domain-Response, uma espécie de evolução do MVC para web)</li>\n<li><a href=\"https://amzn.to/3m7mnTU\">SOA (Arquitetura orientada a serviços)</a></li>\n<li><a href=\"https://amzn.to/39usj4i\">Clean Architecture</a> (em português, <a href=\"https://amzn.to/3fqp69x\">Arquitetura Limpa</a>)</li>\n<li>Hexagonal Architecture (em português, Arquitetura Hexagonal)</li>\n<li>Onion Architecture (em português, Arquitetura em Camadas (cebola))</li>\n</ul>\n<p>Citar especificidades de cada padrão e suas semelhanças / diferenças fogem do escopo desse post, mas é interessante conhecer e se adaptar com alguns nomes.</p>\n<h2>Conclusão</h2>\n<p>Não existe sistema sem arquitetura, só sistema com arquitetura ruim. </p>\n<p>Mesmo que no desenvolvimento de um sistema você não siga nenhum padrão arquitetural, há decisões de arquitetura no código, e se mal feitas, essas decisões podem te assombrar por muito MUITO tempo.</p>","frontmatter":{"title":"O que é arquitetura","date":"10 de abril de 2020","description":"O que é Arquitetura? E design de código, é a mesma coisa? Nesse post você vai entender o básico do que é Arquitetura de Software e alguns casos reais de aplicação."}}},"pageContext":{"slug":"/2020-04-10-o-que-e-arquitetura/","previous":null,"next":{"fields":{"slug":"/2020-04-13-programacao-procedural-orientada-a-classes-parte-1/"},"frontmatter":{"title":"Programação procedural orientada a classes - Parte 1"}}}},"staticQueryHashes":["2841359383","3257411868"]}