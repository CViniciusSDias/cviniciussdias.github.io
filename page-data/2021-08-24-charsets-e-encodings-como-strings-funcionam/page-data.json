{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/2021-08-24-charsets-e-encodings-como-strings-funcionam/",
    "result": {"data":{"site":{"siteMetadata":{"title":"Dias de Dev","siteUrl":"https://dias.dev"}},"markdownRemark":{"id":"6f267a7d-025b-5f58-a16e-85d302be1d88","excerpt":"√â de conhecimento geral que computadores trabalham com n√∫meros, especificamente n√∫meros na base bin√°ria. Sabendo disso, como podemos representar o texto que eu‚Ä¶","html":"<p>√â de conhecimento geral que computadores trabalham com n√∫meros, especificamente n√∫meros na base bin√°ria. Sabendo disso, como podemos representar o texto que eu estou escrevendo apenas com conjuntos de 0s e 1s? Como o computador, trabalhando apenas com n√∫meros, consegue lidar com textos?</p>\n<h2>Tabelas de caracteres (Charsets)</h2>\n<p>Para realizar essa tarefa, tabelas de caracteres (<em>charsets</em>) s√£o utilizadas. Com essas tabelas, algum caractere pode ser mapeado para algum n√∫mero. Esse n√∫mero que ser√° armazenado e manipulado pelos programas que lidam com textos. Mas como esse mapeamento √© feito?</p>\n<h2>ASCII</h2>\n<p>Uma das tabelas de caracteres mais antigas que se tem conhecimento √© a ASCII (<em>American Standard Code for Information Interchange</em>). Esta tabela cont√©m todos os n√∫meros e os caracteres usados pelo idioma ingl√™s, onde cada um desses caracteres √© mapeado para um n√∫mero e esse n√∫mero √© convertido diretamente para a base bin√°ria, sendo uma representa√ß√£o bastante simples. Os n√∫meros v√£o de 0 a 127, ou seja, qualquer caractere da tabela ASCII pode ser representado em at√© 7 <em>bits</em>, o que √© menos que 1 <em>byte</em> (1 <em>byte</em> = 8 <em>bits</em>).</p>\n<p><img src=\"https://raw.githubusercontent.com/wiki/tomgibara/ascii-table/tables/ascii-table-1.1.png\" alt=\"Tabela ASCII\"></p>\n<p>Isso funcionava muito bem para textos que usavam ingl√™s como idioma (ou algum idioma com o mesmo conjunto de caracteres). Por√©m, diversos outros idiomas possuem caracteres que n√£o est√£o representados nesta tabela. Caracteres acentuados, por exemplo, n√£o est√£o na tabela ASCII. Como representar textos em portugu√™s, por exemplo?</p>\n<h2>Extended ASCII</h2>\n<p>Como pudemos ver na imagem da tabela ASCII, os valores v√£o de 0 a 127. Isso pode ser representado com 7 <em>bits</em>. </p>\n<p>Como foi citado no cap√≠tulo anterior, todos os caracteres da tabela ASCII podem ser representados com at√© 7 <em>bits</em>. Sendo assim, temos 1 bit ‚Äúsobrando‚Äù para cada caractere completar 1 <em>byte</em>.</p>\n<p>Pensando nisso, surgiram diversas outras tabelas de caracteres fazendo uso deste bit adicional para representar outros caracteres. Desta forma √© criada a tabela ASCII estendida: <em>Extended ASCII</em> ou <em>EASCII</em></p>\n<p><img src=\"https://files.passeidireto.com/0b57a2e8-7fae-4e06-ac73-a7004f09a741/0b57a2e8-7fae-4e06-ac73-a7004f09a741.gif\" alt=\"Tabela ASCII Estendida\"></p>\n<p>Ao mesmo tempo, outros idiomas que possuem seu alfabeto sem nenhuma semelhan√ßa com o ingl√™s (como japon√™s ou russo) utilizavam tabelas completamente diferentes para representar seus caracteres.</p>\n<h2>Ascens√£o da Web</h2>\n<p>O uso de tabelas diferentes funcionou muito bem enquanto os arquivos ficavam apenas em um computador ou eram compartilhados em redes locais (como de universidades). Por√©m, conforme a Web nasceu e cresceu, o compartilhamento de arquivos se tornou uma tarefa trivial. Como eu, no Brasil, poderia enviar um documento para o Egito, usando o alfabeto grego? Essa tarefa era simplesmente imposs√≠vel.</p>\n<h2>Unicode</h2>\n<p>Pensando em ter uma forma unificada de representar todos os caracteres conhecidos no mundo, em 1991 foi criada o <em>Unicode Consortium</em>. Essa iniciativa trabalha e tem encontros frequentes para garantir que h√° suporte a todos os idiomas e caracteres conhecidos pela humanidade, incluindo <em>emojis</em>. Parece um trabalho enorme e realmente √©.</p>\n<p><em>Emojis</em>, por exemplo, foram sugeridos √† iniciativa em meados de 2000, por√©m apenas ap√≥s 2007 eles foram incorporados ao <em>Unicode</em>.</p>\n<p>Ent√£o, se formos supersimplificar (muito), podemos dizer que o <em>Unicode Consortium</em> criou um grande <em>charset</em>, ou seja, uma grande tabela de caracteres. Por√©m, essa ‚Äútabela‚Äù √© gigante! Como representar estes n√∫meros enormes de forma eficiente?</p>\n<h2>Encodings</h2>\n<p>Aqui entram os encodings. O n√∫mero <strong>128 512</strong> (em hexadecimal, 1F600) representa o emoji de sorriso (üòÄ). Esse n√∫mero <strong>128 512</strong> pode ser representado de v√°rias formas dependendo do encoding selecionado para tal arquivo. Alguns encodings compat√≠veis com <em>Unicode</em> s√£o:</p>\n<ul>\n<li>UTF-8</li>\n<li>UTF-16</li>\n<li>UTF-32</li>\n</ul>\n<p>Inicialmente eu acreditava que a diferen√ßa entre eles era apenas o n√∫mero de <em>bits</em> utilizado, sendo assim UTF-8 poderia representar menos caracteres j√° que usa menos bits. N√£o √© o caso. Todos eles podem consumir um n√∫mero vari√°vel de <em>bits</em> os organizando de forma diferente. Cada encoding pode ser mais vantajoso dependendo do cen√°rio. Para representar textos (como esse que escrevo) e mensagens transferidas pela rede, UTF-8 √© o mais recomendado e utilizado, visto que sua organiza√ß√£o permite que os caracteres mais comuns ocupem o menor espa√ßo poss√≠vel. J√° UTF-16 ocupa menos espa√ßo representando caracteres com n√∫meros maiores na ‚Äútabela‚Äù unicode.</p>\n<h2>Conclus√£o</h2>\n<p>√â comum utilizarmos fun√ß√µes de convers√£o de encoding sem entender bem o que estamos fazendo e muito provavelmente todo mundo que desenvolve <em>software</em> para a <em>web</em> j√° se deparou com o seguinte problema:</p>\n<p><img src=\"https://i.stack.imgur.com/590Tg.png\" alt=\"Texto com caracteres mal codificados\"></p>\n<p>Entender como funcionam charsets e encodings de texto al√©m de ser interessante e divertido, pode nos ajudar a compreender melhor problemas deste tipo e principalmente encontrar a solu√ß√£o de forma mais simples.</p>\n<p>Creio que seja seguro afirmar que a grande maioria dos textos que tratamos como desenvolvedores utiliza UTF-8 como encoding e neste artigo n√≥s entendemos o motivo disso e como o tratamento de textos evoluiu at√© chegar a esse ponto.</p>\n<p>Se voc√™ quiser aprender mais sobre esse assunto, pode considerar assinar a Alura. L√° existem treinamentos que tratam sobre charsets, encoding, manipula√ß√£o de <em>strings</em>    e muito mais. Caso pretenda estudar na Alura, <a href=\"https://www.alura.com.br/promocao/diasdedev\">neste link</a> voc√™ tem um desconto de 10%.</p>","frontmatter":{"title":"Charsets e Encodings: Como strings funcionam","date":"24 de agosto de 2021","description":"J√° ouviu falar em charset, encoding, UTF-8, ASCII e outros termos do tipo? Entenda neste post como isso tudo funciona na pr√°tica"}}},"pageContext":{"slug":"/2021-08-24-charsets-e-encodings-como-strings-funcionam/","previous":{"fields":{"slug":"/2021-06-15-como-o-php-funciona-na-web/"},"frontmatter":{"title":"Como o PHP funciona na Web?"}},"next":null}},
    "staticQueryHashes": ["2841359383","3257411868"]}