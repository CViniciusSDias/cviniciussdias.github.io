{"componentChunkName":"component---src-templates-blog-post-js","path":"/2020-04-16-programacao-procedural-orientada-a-classes-parte-2/","result":{"data":{"site":{"siteMetadata":{"title":"Dias de Dev","siteUrl":"https://dias.dev"}},"markdownRemark":{"id":"45be7f95-c7c9-54e5-bfae-f852959559cc","excerpt":"Design de código Uma vez eu ouvi uma frase mas não me lembro o autor: “Não existe código sem design. Existe código com design ruim”. Inclusive adaptei esta…","html":"<h2>Design de código</h2>\n<p>Uma vez eu ouvi uma frase mas não me lembro o autor: “Não existe código sem design. Existe código com design ruim”. Inclusive adaptei esta frase para “arquitetura” na primeira parte desta publicação.</p>\n<p>Antes de falarmos sobre as péssimas decisões de design que tomamos, vamos falar sobre o que é design de código.</p>\n<p>Uma analogia interessante foi feita pelo <a href=\"https://twitter.com/junior_grossi\">Junior Grossi</a> em um workshop maravilhoso de qualidade de código que fiz com ele. Foi mais ou menos assim (não com essas exatas palavras):</p>\n<p>“Podemos fazer uma analogia da arquitetura de software com a arquitetura de uma casa. Onde fica cada cômodo, como se encaixam juntos, etc. É uma visão de bem <strong>alto nível</strong>. Já o design de código pode ser considerado análogo aos móveis de uma casa. É uma visão de mais <strong>baixo nível</strong> sobre nossas decisões sobre o código”.</p>\n<p>Então, basicamente (beem basicamente), arquitetura diz respeito a como você vai separar sua aplicação em camadas, por exemplo, onde cada camada pode ter sua responsabilidade bem definida. Já o design de código diz respeito a como você vai organizar suas classes e métodos em cada uma das camadas. Quais padrões você vai seguir, como cada classe vai se comportar sozinha ou em conjunto com suas respetivas dependências, etc.</p>\n<h2>Escolhas corriqueiras</h2>\n<p>Agora que já entendemos basicamente o que é Design de Código, vamos falar sobre escolhas que fazemos frequentemente e que talvez não sejam as mais interessantes sob a ótica da programação orientada a objetos, ou melhor, sob a ótica do design orientado a objetos.</p>\n<p>Como já foi discutido no post anterior, é muito comum termos um modelo anêmico: Classes que apenas possuem <code class=\"language-text\">getters</code> e <code class=\"language-text\">setters</code>, ou seja, meros sacos de dados. Para quem já estudou C sabe que no fundo isso não é uma classe, mas sim uma <code class=\"language-text\">struct</code>.</p>\n<p>O fato de termos modelos anêmicos onde classes que deveriam ser do nosso domínio na verdade acabam sem nenhuma regra de negócio, geralmente faz com que nós transfiramos essas regras para lugares “errados” (entre aspas porque quem sou eu pra dizer o que é certo ou errado?).</p>\n<p>Que lugares errados seriam esses?</p>\n<h2>Helpers ou Utils</h2>\n<p>Quem nunca viu uma classe chamada <code class=\"language-text\">StringHelper</code> ou <code class=\"language-text\">DateUtils</code>? São classes que claramente estão perdidas em nosso sistema. O que seria, no mundo real, um(a) <code class=\"language-text\">StringHelper</code>? Se não existe no mundo real, tem certeza que deveria existir no código?</p>\n<p><img src=\"https://i.imgur.com/rc9OMWr.jpg\" alt=\"Reflitão\"></p>\n<p>Esse tipo de classe é uma herança clara da programação procedural em nosso código onde estamos separando o comportamento dos seus dados, quando a orientação a objetos tem todas as ferramentas necessárias para nós os juntarmos.</p>\n<h3>Possível solução</h3>\n<p>Se você possui uma classe <code class=\"language-text\">StringHelper</code>, talvez ela esteja fazendo validações bem genéricas. Nesse caso, nada mais justo do que transformá-la em uma classe bem genérica, como <code class=\"language-text\">String</code>. Nessa classe você pode ter comportamentos e verificações pertinentes a uma string em seu código.</p>\n<p>Mas na maioria das vezes as verificações nesse tipo de classe são específicas de regras de negócio. Ex.: Garantir que nome possua pelo menos 10 letras.</p>\n<p>Se é uma regra de negócio, deveria estar na classe de negócio. Talvez na classe <code class=\"language-text\">Pessoa</code>. Talvez numa classe mais específica, como <code class=\"language-text\">Nome</code>. Depende do seu sistema.</p>\n<h2>Services inúteis</h2>\n<p><a href=\"https://amzn.to/39MBuNH\">O livro do Eric Evans sobre DDD</a> é certamente uma obra que revolucionou o mundo do desenvolvimento. Eu particularmente ainda não o li, mas li <a href=\"https://amzn.to/2Q1bW8d\">obras inspiradas por este livro</a>, então sei que: Neste livro foram definidos alguns conceitos sobre classes chamadas de <code class=\"language-text\">Services</code>.</p>\n<p>Uma das possíveis “categorias” desse tipo de classe é <code class=\"language-text\">Application Service</code>. Este tipo de classe tem como propósito receber informações de fora do domínio do sistema (da web, linha de comando, etc) e orquestrar as chamadas a regras de domínio.</p>\n<p>Um exemplo clássico:</p>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">AddUser</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name type-declaration\">UserRepository</span> <span class=\"token variable\">$repository</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name type-declaration\">PasswordHasher</span> <span class=\"token variable\">$hasher</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">__construct</span><span class=\"token punctuation\">(</span><span class=\"token class-name type-declaration\">UserRepository</span> <span class=\"token variable\">$repository</span><span class=\"token punctuation\">,</span> <span class=\"token class-name type-declaration\">PasswordHasher</span> <span class=\"token variable\">$hasher</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">repository</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$repository</span><span class=\"token punctuation\">;</span>\n        <span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">hasher</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$hasher</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token class-name type-declaration\">AddUserDto</span> <span class=\"token variable\">$data</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword return-type\">void</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token variable\">$hashedPassword</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">hasher</span>\n            <span class=\"token operator\">-></span><span class=\"token function\">hash</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$data</span><span class=\"token operator\">-></span><span class=\"token function\">password</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token variable\">$user</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$data</span><span class=\"token operator\">-></span><span class=\"token function\">email</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$hashedPassword</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">repository</span><span class=\"token operator\">-></span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$user</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></span></code></pre></div>\n<p>Há pontos de melhoria nesse código (sempre há), mas basicamente: Ele recebe os dados de algum mecanismo de entrega através de um DTO (objeto de transferência de dados, que serve basicamente para transferir dados entre camadas no sistema), e passa para o domínio que sabe cifrar a senha, armazenar o usuário no repositório, etc.</p>\n<h3>Problema comum</h3>\n<p>Essa definição de <code class=\"language-text\">Application Service</code> em algum momento foi tomada por alguém como “Classe obrigatória para adicionar <em>indireção</em> desnecessária no sistema”.</p>\n<p>Na prática é muito comum vermos código onde um Controller chama um método de uma classe com <code class=\"language-text\">Service</code> no nome, e esse método não faz nada além de chamar um método de outra classe. Essa chamada extra de um método é conhecida como indireção, de forma resumida.</p>\n<p>Algo parecido com isso:</p>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">UserService</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name type-declaration\">UserRepository</span> <span class=\"token variable\">$repository</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">__construct</span><span class=\"token punctuation\">(</span><span class=\"token class-name type-declaration\">UserRepository</span> <span class=\"token variable\">$repository</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">repository</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$repository</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token class-name type-declaration\">User</span> <span class=\"token variable\">$user</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword return-type\">void</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">repository</span><span class=\"token operator\">-></span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$user</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// todos os outros métodos públicos que também existem em UserRepository</span>\n<span class=\"token punctuation\">}</span></span></code></pre></div>\n<p>Agora me responda: O que ganhamos ao ter a classe <code class=\"language-text\">UserService</code>? Ganhamos apenas mais indireções em nosso sistema. Mais um lugar que nossa IDE vai nos fazer passar até chegar no código que de fato executa algo.</p>\n<p>Além de parecerem ser classes conhecidas como <em>God classes</em>, já que aparentam fazer tudo no sistema, são inúteis na prática.</p>\n<p>Esse é mais um exemplo de programação procedural sendo aplicada, onde temos apenas funções sem nenhum significado pro negócio agrupadas em uma classe que simplesmente chama outras funções.</p>\n<p>Outra característica de programação procedural nesse caso é que muito comumente temos métodos não tão relacionados na mesma classe <code class=\"language-text\">Service</code>.</p>\n<p>É comum um <code class=\"language-text\">UserService</code> ter um método com uma chamada para salvar um usuário e outro método para enviar um e-mail para ele. Responsabilidades que deveriam estar em classes separadas.</p>\n<p>No canal <em>Dev Eficiente</em>, do Aberto Souza, tem um vídeo falando um pouco mais sobre o problema deste tipo de classe, mas sob uma outra ótica. Vale a pena conferir:</p>\n<div class=\"gatsby-resp-iframe-wrapper\" style=\"padding-bottom: 56.25%; position: relative; height: 0; overflow: hidden; margin-bottom: 1.0725rem\" > <iframe src=\"https://www.youtube-nocookie.com/embed/szGb93_hXgI\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\" style=\" position: absolute; top: 0; left: 0; width: 100%; height: 100%; \"></iframe> </div>\n<h2>Camada Model do MVC</h2>\n<p>Um ponto que tem levantado bastante discussão em comunidades que participo é: O que é a camada <em>Model</em> no MVC?</p>\n<p>Discutir sobre MVC é assunto pra outro post, mas o que tenho visto como consenso é: Camada que faz a persistência dos dados.</p>\n<p>E a regra de negócio? Uma galera tem colocado nos <em>Controllers</em>. E aí? Se essa lógica precisar ser reaproveitada, como fazemos? Como chamamos um <em>Controller</em> dentro de outro? Complicado, né?</p>\n<p>Em nossos <em>Controllers</em> é muito comum ver aquele código super famoso da programação procedural cheio de IFs e verificações em tipos primitivos, sem nenhum significado para o negócio.</p>\n<h3>Padrões arquiteturais</h3>\n<p>Para “resolver” esse problema, diversos padrões arquiteturais existem, e eu falei um pouquinho (bem pouquinho) sobre arquitetura nesse meu outro post: <a href=\"https://dias.dev/2020-04-10-o-que-e-arquitetura/\">O que é Arquitetura</a></p>\n<h2>Conclusão</h2>\n<p>Por mais que a gente estude muito sobre ferramentas, frameworks, hypes e modinhas, os princípios da programação orientada a objetos mudam muito pouco e merecem MUITA atenção.</p>\n<p>Estude conceitos, princípios, padrões… Tudo isso vai poder ser aplicado naquele framework que foi lançado semana passada e você está doido pra usar pra fazer um CRUD. Acredite.</p>\n<p>Infelizmente eu ainda vejo muito código utilizando estas “técnicas” procedurais utilizando classes, e pessoas acreditando que isso é desenvolver utilizando a programação orientada a objetos.</p>\n<p>Você costuma ver código assim no seu dia a dia? Compartilha aqui nos comentários algum caso que você tenha visto recentemente.</p>","frontmatter":{"title":"Programação procedural orientada a classes - Parte 2","date":"16 de abril de 2020","description":"A programação orientada a objetos é muito citada e utilizada, mas será que você está fazendo da forma correta? Será que não está apenas usando classes na programação procedural?"}}},"pageContext":{"slug":"/2020-04-16-programacao-procedural-orientada-a-classes-parte-2/","previous":{"fields":{"slug":"/2020-04-13-programacao-procedural-orientada-a-classes-parte-1/"},"frontmatter":{"title":"Programação procedural orientada a classes - Parte 1"}},"next":{"fields":{"slug":"/2020-04-23-principios-ou-ferramentas-o-que-estudar/"},"frontmatter":{"title":"Princípios ou Ferramentas - O que estudar"}}}},"staticQueryHashes":["2841359383","3257411868"]}