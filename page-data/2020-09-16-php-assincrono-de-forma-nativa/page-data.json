{"componentChunkName":"component---src-templates-blog-post-js","path":"/2020-09-16-php-assincrono-de-forma-nativa/","result":{"data":{"site":{"siteMetadata":{"title":"Dias de Dev","siteUrl":"https://dias.dev"}},"markdownRemark":{"id":"02da5a73-7503-5ca0-ad1c-ab6159ebeff4","excerpt":"Realizar acesso a streams é uma tarefa relativamente comum para devs PHP. Seja lendo e escrevendo em arquivos, fazendo requisições HTTP, etc. Operações de I/O…","html":"<p>Realizar acesso a streams é uma tarefa relativamente comum para devs PHP. Seja lendo e escrevendo em arquivos, fazendo requisições HTTP, etc.</p>\n<p>Operações de I/O são custosas e levam algum tempo para executar. Quando temos diversas operações desse tipo, uma técnica que pode ajudar (e muito) na performance da aplicação é realizá-las de forma assíncrona.</p>\n<h2>Acesso a streams</h2>\n<p>Antes de falar sobre técnicas e funções que permitem a programação assíncrona, é importante saber como normalmente nós trabalhamos com I/O.</p>\n<p>Acesso a arquivos, requisições HTTP, sockets e muito mais pode ser feito através de <a href=\"https://php.net/streams\">streams</a>. Um stream é basicamente um fluxo de dados, sendo que a origem desse fluxo pode variar (vide o início desse parágrafo). Quando utilizamos funções como <code class=\"language-text\">file_get_contents</code>, <code class=\"language-text\">fopen</code>, <code class=\"language-text\">fgets</code>, e as demais, estamos trabalhando com streams do PHP.</p>\n<h2>Programação assíncrona</h2>\n<p>Se você não está familiarizado com o termo “programação assíncrona”, recomendo assistir este vídeo antes de continuar o artigo:</p>\n<p><a href=\"https://youtu.be/zLfXPSeCkB8\">Programação Assíncrona vs Programação Paralela</a></p>\n<p>Entendido o que é programação assíncrona, como podemos fazer acesso a streams de forma assíncrona utilizando PHP sem nenhuma extensão ou biblioteca externa? Será possível?</p>\n<h2>Eventos</h2>\n<p>Programação orientada a eventos não é novidade e nós utilizamos muito na web. Para agir quando um botão for clicado, ou quando um texto for digitado em um <code class=\"language-text\">input</code> nós utilizamos eventos no JavaScript. Eventos podem acontecer a qualquer momento então sua natureza é assíncrona. Mas será possível fazer algo parecido do lado do PHP?</p>\n<p>Antes de falar do PHP em si, acho válido citar que o sistema operacional já trabalha com chamadas assíncronas. Diversos eventos acontecem durante a execução do seu sistema, e há código reagindo a estes eventos o tempo todo. Utilizando PHP nós podemos acessar algumas dessas funcionalidades do sistema operacional</p>\n<h3>Função stream_select</h3>\n<p>Uma função não muito comum para nós que trabalhamos com PHP é a <a href=\"https://php.net/stream_select\">stream_select</a>. Essa função nos permite “observar” modificações que possam acontecer em streams. O probelma é que ela não é nada fácil de se entender, então vou tentar tornar este processo menos doloroso para você.</p>\n<h2>Cenário</h2>\n<p>Imagine que para executar uma tarefa nós precisemos ler 5 arquivos distintos e depois realizar algum processamento. Normalmente utilizando PHP nós poderíamos fazer algo como:</p>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token variable\">$conteudoDoArquivo1</span> <span class=\"token operator\">=</span> <span class=\"token function\">file_get_contents</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'arquivo1.txt'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$conteudoDoArquivo2</span> <span class=\"token operator\">=</span> <span class=\"token function\">file_get_contents</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'arquivo2.txt'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$conteudoDoArquivo3</span> <span class=\"token operator\">=</span> <span class=\"token function\">file_get_contents</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'arquivo3.txt'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$conteudoDoArquivo4</span> <span class=\"token operator\">=</span> <span class=\"token function\">file_get_contents</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'arquivo4.txt'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$conteudoDoArquivo5</span> <span class=\"token operator\">=</span> <span class=\"token function\">file_get_contents</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'arquivo5.txt'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Processar os 5 arquivos</span></span></code></pre></div>\n<p>O problema nessa abordagem é óbvio: Antes de ler o <code class=\"language-text\">arquivo2.txt</code> precisamos terminar de ler todo o conteúdo de <code class=\"language-text\">arquivo1.txt</code>. Enquanto o computador espera, nós já poderíamos estar sendo os demais arquivos e os processando de forma individual.</p>\n<p>Quando temos uma operação de I/O (acesso a arquivos, rede, etc) sendo realizada de forma síncrona, o processador fica ocioso enquanto a operação não é executada. Ou seja, enquanto o arquivo estiver sendo carregado, o processador fica esperando, sem fazer nada. É exatamente isso que queremos evitar. Queremos garantir que ele continue trabalhando enquanto o arquivo não estiver pronto para leitura.</p>\n<h2>Solução com assincronicidade</h2>\n<p>Para resolver essa situação, podemos utilizar a função <code class=\"language-text\">stream_select</code> que observa alterações no status de uma lista de streams, ou seja, quando algum dos arquivos estiver pronto para leitura, essa função nos avisará. E é interessante citar que a leitura não necessariamente vai acontecer em ordem. O sistema operacional pode abrir o <code class=\"language-text\">arquivo3.txt</code> mais rápido do que o <code class=\"language-text\">arquivo1.txt</code>, por exemplo. Neste cenário, vamos processá-lo logo, sem ficar esperando os arquivos anteriores.</p>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token variable\">$listaDeStreamsDeArquivos</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token function\">fopen</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'arquivo1.txt'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'r'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">fopen</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'arquivo2.txt'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'r'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">fopen</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'arquivo3.txt'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'r'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">fopen</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'arquivo4.txt'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'r'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">fopen</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'arquivo5.txt'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'r'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$listaDeStreamsDeArquivos</span> <span class=\"token keyword\">as</span> <span class=\"token variable\">$streamDeArquivo</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">stream_set_blocking</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$streamDeArquivo</span><span class=\"token punctuation\">,</span> <span class=\"token boolean constant\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">do</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token variable\">$streamsParaLer</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$listaDeStreamsDeArquivos</span><span class=\"token punctuation\">;</span>\n    <span class=\"token variable\">$streamsComNovidades</span> <span class=\"token operator\">=</span> <span class=\"token function\">stream_select</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$streamsParaLer</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$write</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$except</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$streamsComNovidades</span> <span class=\"token operator\">===</span> <span class=\"token boolean constant\">false</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">echo</span> <span class=\"token single-quoted-string string\">'Erro inesperado'</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$streamsComNovidades</span> <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$streamsParaLer</span> <span class=\"token keyword\">as</span> <span class=\"token variable\">$indice</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token variable\">$streamDeArquivo</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token variable\">$conteudo</span> <span class=\"token operator\">=</span> <span class=\"token function\">stream_get_contents</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$streamDeArquivo</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// processa o conteúdo do arquivo</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">feof</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$streamDeArquivo</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">fclose</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$streamDeArquivo</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">unset</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$listaDeStreamsDeArquivos</span><span class=\"token punctuation\">[</span><span class=\"token variable\">$indice</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$listaDeStreamsDeArquivos</span> <span class=\"token operator\">!==</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span></code></pre></div>\n<h3>Explicação</h3>\n<h4>Preparação</h4>\n<p>Como eu disse, não é muito fácil, então vamos por partes. Primeiro abrimos todos os arquivos que queremos ler com o <code class=\"language-text\">fopen</code>. Até aí sem segredo. Depois, informamos com a função <code class=\"language-text\">stream_set_blocking</code> que o recurso deve ser aberto em modo não-bloqueante - assim, o processo que acessa o arquivo não bloqueará a CPU por causar um estado de espera ao tentar acessar os arquivos.</p>\n<p>Nesse ponto, temos um array com 5 recursos abertos para podermos trabalhar com estes streams. Então analisando o este pedaço de código:</p>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token variable\">$listaDeStreamsDeArquivos</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token function\">fopen</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'arquivo1.txt'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'r'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">fopen</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'arquivo2.txt'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'r'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">fopen</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'arquivo3.txt'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'r'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">fopen</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'arquivo4.txt'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'r'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">fopen</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'arquivo5.txt'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'r'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">var_dump</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$listaDeStreamsDeArquivos</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Teríamos a seguinte saída:</p>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token keyword\">array</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token operator\">></span>\n  <span class=\"token function\">resource</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span> of type <span class=\"token punctuation\">(</span>stream<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token operator\">></span>\n  <span class=\"token function\">resource</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span> of type <span class=\"token punctuation\">(</span>stream<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token operator\">></span>\n  <span class=\"token function\">resource</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span> of type <span class=\"token punctuation\">(</span>stream<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token operator\">></span>\n  <span class=\"token function\">resource</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span> of type <span class=\"token punctuation\">(</span>stream<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token operator\">></span>\n  <span class=\"token function\">resource</span><span class=\"token punctuation\">(</span><span class=\"token number\">9</span><span class=\"token punctuation\">)</span> of type <span class=\"token punctuation\">(</span>stream<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Depois disso que começa a parte difícil. A chamada para a função <code class=\"language-text\">stream_select</code> deve estar em um loop, porque pode acontecer de nem todos os streams estarem prontos para leitura logo de cara.</p>\n<h4>Parâmetros</h4>\n<p>Segundo detalhe importante: os parâmetros. O 3 primeiros parâmetros dessa função são passados por referência. Por isso o segundo e terceiro são variáveis que nós nem tínhamos definido ainda. O primeiro parâmetro é a lista de streams que queremos observar para ler. O segundo é para escrita. Já o terceiro, menos comum, é para dados excepcionais que possuem maior prioridade. Os 2 últimos parâmetros são sobre timeout.</p>\n<p>O parâmetro passado como 1 indica o número de segundos que essa função deve esperar receber uma notificação de novidade nos streams até “desistir”, ou seja, o timeout. Esse é o motivo pelo qual ela deve estar em um loop. Se esse tempo passar e nós não tivermos novidade, devemos tentar de novo depois. Caso algum (não necessariamente todos) stream esteja pronto antes desse 1 segundo, a função retornará. O último parâmetro, que informamos como 0, indica o tempo em microsegundos para timeout.</p>\n<h4>Retorno e leitura</h4>\n<p>Agora vamos falar do retorno. Essa função retorna o número de streams que contém modificações. No nosso caso, vai informar quantos arquivos estão prontos para leitura. Porém em caso de erro essa função nos retorna o valor <code class=\"language-text\">false</code>.</p>\n<p>Além disso, os parâmetros que nós passamos podem ter sido modificados. Por isso eu realizo uma cópia da lista original de streams em <code class=\"language-text\">$arquivosParaLer = $listaDeArquivos;</code>. Após o retorno da função, o parâmetro passado vai conter apenas os streams que possuem novidades, ou seja, no nosso caso, os arquivos que estão prontos para leitura.</p>\n<p>Para exemplificar, vamos supor que na primeira execução do loop todos os arquivos já estejam disponíveis. Nesse caso, analisando os valores das variáveis, podemos entender o que está acontecendo. Analisando então o valor de <code class=\"language-text\">$streamsComNovidades</code>, teríamos <code class=\"language-text\">int(5)</code> como resultado deste cenário.</p>\n<p>Já analisando ambos arrays de streams (<code class=\"language-text\">$listaDeStreamsDeArquivos</code> e <code class=\"language-text\">$streamsParaLer</code>), teríamos exatamente o mesmo resultado:</p>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token keyword\">array</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token operator\">></span>\n  <span class=\"token function\">resource</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span> of type <span class=\"token punctuation\">(</span>stream<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token operator\">></span>\n  <span class=\"token function\">resource</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span> of type <span class=\"token punctuation\">(</span>stream<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token operator\">></span>\n  <span class=\"token function\">resource</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span> of type <span class=\"token punctuation\">(</span>stream<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token operator\">></span>\n  <span class=\"token function\">resource</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span> of type <span class=\"token punctuation\">(</span>stream<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token operator\">></span>\n  <span class=\"token function\">resource</span><span class=\"token punctuation\">(</span><span class=\"token number\">9</span><span class=\"token punctuation\">)</span> of type <span class=\"token punctuation\">(</span>stream<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">array</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token operator\">></span>\n  <span class=\"token function\">resource</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span> of type <span class=\"token punctuation\">(</span>stream<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token operator\">></span>\n  <span class=\"token function\">resource</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span> of type <span class=\"token punctuation\">(</span>stream<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token operator\">></span>\n  <span class=\"token function\">resource</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span> of type <span class=\"token punctuation\">(</span>stream<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token operator\">></span>\n  <span class=\"token function\">resource</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span> of type <span class=\"token punctuation\">(</span>stream<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token operator\">></span>\n  <span class=\"token function\">resource</span><span class=\"token punctuation\">(</span><span class=\"token number\">9</span><span class=\"token punctuation\">)</span> of type <span class=\"token punctuation\">(</span>stream<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Agora caso na primeira execução tivéssemos apenas 3 dos 5 arquivos prontos, e analisássemos os 3 valores anteriores, teríamos ter algo como:</p>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token function\">var_dump</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$streamsComNovidades</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$listaDeStreamsDeArquivos</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$streamsParaLer</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token function\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">array</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token operator\">></span>\n  <span class=\"token function\">resource</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span> of type <span class=\"token punctuation\">(</span>stream<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token operator\">></span>\n  <span class=\"token function\">resource</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span> of type <span class=\"token punctuation\">(</span>stream<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token operator\">></span>\n  <span class=\"token function\">resource</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span> of type <span class=\"token punctuation\">(</span>stream<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token operator\">></span>\n  <span class=\"token function\">resource</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span> of type <span class=\"token punctuation\">(</span>stream<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token operator\">></span>\n  <span class=\"token function\">resource</span><span class=\"token punctuation\">(</span><span class=\"token number\">9</span><span class=\"token punctuation\">)</span> of type <span class=\"token punctuation\">(</span>stream<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">array</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token operator\">></span>\n  <span class=\"token function\">resource</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span> of type <span class=\"token punctuation\">(</span>stream<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token operator\">></span>\n  <span class=\"token function\">resource</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span> of type <span class=\"token punctuation\">(</span>stream<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token operator\">></span>\n  <span class=\"token function\">resource</span><span class=\"token punctuation\">(</span><span class=\"token number\">9</span><span class=\"token punctuation\">)</span> of type <span class=\"token punctuation\">(</span>stream<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Onde, nesse caso, o segundo array exibido é o de <code class=\"language-text\">$streamsParaLer</code>, e possui apenas os 3 arquivos prontos para leitura.</p>\n<p>Sendo assim, posso percorrer este array tendo a certeza de que há dados para ler e processar. Mas não há garantia de que todo o conteúdo do arquivo estará lá, por isso verifico se cheguei ao fim do arquivo com <code class=\"language-text\">feof</code>. Para arquivos pequenos, via de regra, todo o conteúdo virá de uma vez só, mas não conte com isso e prepare seu código para ler até mesmo um único byte por vez.</p>\n<p>Após ler todo o arquivo, devemos fechá-lo. Mas um outro detalhe importante é que eu também o removo da lista original de streams que queremos ler. Faço isso para que caso seja necessária uma nova iteração no loop, ou seja, caso nem todos os arquivos tenham sido lidos, eu não tente ler novamente os arquivos que já foram lidos e fechados.</p>\n<p>Com isso temos nossa condição de saída do loop. Quando todos os arquivos tiverem sido removidos e minha lista estiver vazia, sei que processei todos os arquivos.</p>\n<p>PS.: A função <code class=\"language-text\">stream_set_blocking</code> só surte efeito com arquivos e sockets. Os outros wrappers, com esta técnica, não podem ser lidos de forma assíncrona e não bloqueante.</p>\n<h2>Conceitos</h2>\n<p>Esse código obviamente pode ser refatorado para torná-lo um pouco mais legível, mas acredito que a lógica por trás dele tenha ficado clara. Caso contrário, você pode usar a sessão de comentários dessa página para fazer perguntas.</p>\n<p>O que nós escrevemos de forma rudimentar aqui pode ser visto como uma implementação do que é conhecido como <em>Event Loop</em>, ou loop de eventos. Você provavelmente já ouviu esse termo se estuda sobre a runtime Node.js.</p>\n<p>Claro que essa implementação não é completa ou otimizada, mas atende nosso propósito: ler arquivos conforme eles fiquem prontos para leitura. Dessa forma nós vamos pedir para que o sistema operacional prepare todos os arquivos para leitura de uma só vez.</p>\n<p>As vantagens nessa abordagem assíncrona são mais perceptíveis quando temos operações mais lentas como chamadas HTTP, por exemplo. Mas isso aumentaria a complexidade do código para este artigo.</p>\n<h2>Conclusão</h2>\n<p>Claro que o PHP já possui ferramentas que realizam este trabalho de forma muito mais simples. ReactPHP com seu pacote de Streams é um ótimo exemplo.</p>\n<p>Mas seguindo o que citei no post sobre aprendizado, eu penso como <a href=\"https://pt.wikipedia.org/wiki/Richard_Feynman\">Richard Feynman</a> (Nobel de física): “O que eu não consigo criar, eu não entendo”. Então antes de utilizar uma ferramenta que realiza o trabalho para mim, eu gosto de saber como realizar este trabalho sem ela. Com isso, se algum problema acontecer com a biblioteca, por exemplo, eu vou estar mais preparado para resolvê-lo já que eu entendo um pouco melhor como as coisas funcionam.</p>\n<p>Além disso, se chamadas HTTP assíncronas com essa técnica é um assunto que te interessa, interaja com essa publicação para que eu produza um conteúdo sobre isso.</p>","frontmatter":{"title":"PHP assíncrono de forma nativa","date":"16 de setembro de 2020","description":"O PHP é uma linguagem de programação completa e programação assíncrona não é algo que falta na linguagem. Nesse post eu mostro como atingir este objetivo sem nenhum componente externo"}}},"pageContext":{"slug":"/2020-09-16-php-assincrono-de-forma-nativa/","previous":{"fields":{"slug":"/2020-04-23-principios-ou-ferramentas-o-que-estudar/"},"frontmatter":{"title":"Princípios ou Ferramentas - O que estudar"}},"next":{"fields":{"slug":"/2020-10-27-php-alem-da-web/"},"frontmatter":{"title":"PHP além da Web"}}}},"staticQueryHashes":["2841359383","3257411868"]}