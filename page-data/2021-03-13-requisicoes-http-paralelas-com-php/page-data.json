{"componentChunkName":"component---src-templates-blog-post-js","path":"/2021-03-13-requisicoes-http-paralelas-com-php/","result":{"data":{"site":{"siteMetadata":{"title":"Dias de Dev","siteUrl":"https://dias.dev"}},"markdownRemark":{"id":"6a28c4ec-0658-5510-907a-6be0d3a2a698","excerpt":"I/O não bloqueante (programação assíncrona) Em um post anterior falei bastante sobre como o PHP trabalha por baixo dos panos de forma nativa com I/O não…","html":"<h2>I/O não bloqueante (programação assíncrona)</h2>\n<p>Em um <a href=\"/2020-09-16-php-assincrono-de-forma-nativa\">post anterior</a> falei bastante sobre como o PHP trabalha por baixo dos panos de forma nativa com I/O não\nbloqueante, e consequentemente com programação assíncrona. Usando os conhecimentos daquele post com conhecimentos de\n<em>sockets</em> e HTTP seria possível realizarmos chamadas HTTP assíncronas e processá-las conforme elas fossem recebidas.\nPorém é bastante comum podermos nos dar ao luxo de processar todas as respostas HTTP depois de prontas, desde que todas\nas requisições tenham sido feitas de forma concorrente.</p>\n<h2>cURL</h2>\n<p>Como realizar requisições HTTP usando <em>sockets</em> pode se tornar uma tarefa muito complicada, principalmente em cenários\nonde precisamos enviar dados (requisições POST, por exemplo), cURL é uma alternativa muito interessante. Essa biblioteca\né pensada especialmente em realizar requisições pela rede e possui diversos facilitadores.</p>\n<h2>O problema</h2>\n<p>Entendido o contexto das tecnologias que temos disponíveis, vamos falar do problema que temos em mãos. Existe uma API\nque fornece informações sobre o universo <em>Star Wars</em>. Essa API é gratuita e vai servir perfeitamente para nosso exemplo.</p>\n<p>O que queremos fazer é buscar a lista de filmes (através da url <a href=\"https://swapi.dev/api/films/\">https://swapi.dev/api/films/</a>) e para cada filme buscar\nos seus detalhes em outra URL (<a href=\"https://swapi.dev/api/films/:id/\">https://swapi.dev/api/films/:id/</a>).</p>\n<h3>Solução bloqueante</h3>\n<p>Usando o <code class=\"language-text\">cURL</code> de forma “padrão”, ou seja, bloqueante, podemos atingir este objetivo com o seguinte código:</p>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token variable\">$handle</span> <span class=\"token operator\">=</span> <span class=\"token function\">curl_init</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'https://swapi.dev/api/films/'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// informa que não queremos exibir a resposta diretamente, mas sim pegar seu retorno</span>\n<span class=\"token function\">curl_setopt</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$handle</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">CURLOPT_RETURNTRANSFER</span><span class=\"token punctuation\">,</span> <span class=\"token boolean constant\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$response</span> <span class=\"token operator\">=</span> <span class=\"token function\">curl_exec</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$handle</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">curl_close</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$handle</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$data</span> <span class=\"token operator\">=</span> <span class=\"token function\">json_decode</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$response</span><span class=\"token punctuation\">,</span> <span class=\"token boolean constant\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$movies</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$data</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'results'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$movies</span> <span class=\"token keyword\">as</span> <span class=\"token variable\">$movie</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Alterando o protocolo para https</span>\n    <span class=\"token variable\">$url</span> <span class=\"token operator\">=</span> <span class=\"token function\">str_replace</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'http:'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'https:'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$movie</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'url'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token variable\">$handle</span> <span class=\"token operator\">=</span> <span class=\"token function\">curl_init</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$url</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">curl_setopt</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$handle</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">CURLOPT_RETURNTRANSFER</span><span class=\"token punctuation\">,</span> <span class=\"token boolean constant\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token variable\">$response</span> <span class=\"token operator\">=</span> <span class=\"token function\">curl_exec</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$handle</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token variable\">$movieData</span> <span class=\"token operator\">=</span> <span class=\"token function\">json_decode</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$response</span><span class=\"token punctuation\">,</span> <span class=\"token boolean constant\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">var_dump</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$movieData</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></span></code></pre></div>\n<p>O problema desta abordagem é que cada requisição para os detalhes do filme vai travar a execução do PHP, fazendo\ncom que a próxima requisição só seja iniciada quando a anterior for finalizada.</p>\n<h3>Solução não bloqueante</h3>\n<p>Para informarmos um determinado número de requisições e realizarmos todas de uma vez, podemos usar o <code class=\"language-text\">curl_multi_init</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token comment\">// Primeira requisição como no código anterior</span>\n<span class=\"token variable\">$movies</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$data</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'results'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Inicializa o handle de múltiplas conexões</span>\n<span class=\"token variable\">$multiHandle</span> <span class=\"token operator\">=</span> <span class=\"token function\">curl_multi_init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Armazena cada handle individual em um array</span>\n<span class=\"token comment\">// além de adicioná-los ao $multiHandle</span>\n<span class=\"token variable\">$handles</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$movies</span> <span class=\"token keyword\">as</span> <span class=\"token variable\">$i</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token variable\">$movie</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token variable\">$url</span> <span class=\"token operator\">=</span> <span class=\"token function\">str_replace</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'http:'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'https:'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$movie</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'url'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token variable\">$handles</span><span class=\"token punctuation\">[</span><span class=\"token variable\">$i</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">curl_init</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$url</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">curl_setopt</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$handles</span><span class=\"token punctuation\">[</span><span class=\"token variable\">$i</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">CURLOPT_RETURNTRANSFER</span><span class=\"token punctuation\">,</span> <span class=\"token boolean constant\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">curl_multi_add_handle</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$multiHandle</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$handles</span><span class=\"token punctuation\">[</span><span class=\"token variable\">$i</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></span></code></pre></div>\n<p>Assim nós temos diversos <em>handles</em> do <code class=\"language-text\">cURL</code> adicionados a um gerenciador de múltiplas requisições. Quando executarmos o\n<code class=\"language-text\">$multiHandle</code>, todas as requisições serão feitas em paralelo. Maravilha, não é mesmo?</p>\n<p>Infelizmente não é tão simples assim. Não basta fazer um <code class=\"language-text\">curl_multi_exec</code> e receber um array de respostas. A função\n<code class=\"language-text\">curl_multi_exec</code> inicia as requisições, porém não bloqueia o código, ou seja, nós precisamos ficar em um <em>loop</em> verificando\nse todas as requisições já foram feitas. Algo como:</p>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token keyword\">do</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token variable\">$result</span> <span class=\"token operator\">=</span> <span class=\"token function\">curl_multi_exec</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$multiHandle</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$numberOfMissingHandles</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$numberOfMissingHandles</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Processar respostas</span></code></pre></div>\n<p>A variável <code class=\"language-text\">$numberOfMissingHandles</code> é passada por referência e é preenchida com o número dos <em>handles</em> que faltam ser\nresolvidos. Em outras palavras, enquanto esse valor não chegar a 0, temos requisições sendo processadas.</p>\n<p>Depois de sair desse <em>loop</em>, podemos recuperar as respostas de todas as requisições, então voltamos para a tarefa fácil:</p>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token comment\">// Por isso armazenamos o array de $handles</span>\n<span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$handles</span> <span class=\"token keyword\">as</span> <span class=\"token variable\">$handle</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Usamos curl_multi_getcontent para recuperar a resposta</span>\n    <span class=\"token comment\">// de cada um dos handles que foi executado pelo curl_multi_exec</span>\n    <span class=\"token variable\">$response</span> <span class=\"token operator\">=</span> <span class=\"token function\">curl_multi_getcontent</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$handle</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">curl_multi_remove_handle</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$multiHandle</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$handle</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">curl_close</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$handle</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token variable\">$movieData</span> <span class=\"token operator\">=</span> <span class=\"token function\">json_decode</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$response</span><span class=\"token punctuation\">,</span> <span class=\"token boolean constant\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">var_dump</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$movieData</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Com isso nós atingimos o objetivo de realizar todas as requisições de uma vez e só depois ler as respostas.</p>\n<h3>Mal uso de recursos</h3>\n<p>O problema da nossa abordagem é que a função <code class=\"language-text\">curl_multi_exec</code> retorna imediatamente, sem esperar por nenhuma atividade\nnos <em>handles</em>, ou seja, se as requisições forem demoradas ou houverem muitas requisições (ou ambos), esse <em>loop</em> vai ser\nexecutado de forma muito rápida, por muito tempo. Isso vai fazer com que o uso de CPU vá ao topo, atrasando inclusive o\nprocesso de realizar requisições, afinal de contas o sistema operacional precisa destinar certos recursos para essa tarefa.</p>\n<p>Para mitigar esse problema, podemos usar uma função chamada <code class=\"language-text\">curl_multi_select</code>. Ela é semelhante à <code class=\"language-text\">stream_select</code> que\nvimos no post sobre <a href=\"/2020-09-16-php-assincrono-de-forma-nativa\">PHP assíncrono</a>. Essa função espera que alguma\natividade aconteça nos handles que estamos utilizando. A diferença é que ela não recebe um array, mas sim o nosso\n<code class=\"language-text\">$multiHandle</code>. Então tudo que temos de informação é quantos <em>handles</em> possuem atividade no momento, mas não quais deles.\nMas tudo bem, já que o nosso propósito é ler todos apenas no final.</p>\n<p>A função <code class=\"language-text\">curl_multi_select</code> deve ser chamada após o <code class=\"language-text\">curl_multi_exec</code>, já que é essa que inicia as requisições efetivamente.\nEntão o nosso primeiro <em>loop</em> ficaria assim:</p>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token keyword\">do</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token variable\">$result</span> <span class=\"token operator\">=</span> <span class=\"token function\">curl_multi_exec</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$multiHandle</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$numberOfMissingHandles</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token variable\">$descriptorsCount</span> <span class=\"token operator\">=</span> <span class=\"token function\">curl_multi_select</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$multiHandle</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$numberOfMissingHandles</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Onde <code class=\"language-text\">$descriptorsCount</code> é o número de handles que possuem alguma atividade nesse exato momento. Caso esse número seja\n<code class=\"language-text\">-1</code>, significa que aconteceu algum erro.</p>\n<p>Dessa forma esse <em>loop</em> será executado menos vezes e em um intervalo maior, ou seja, menos CPU será consumida.</p>\n<h3>Tratamento de erros</h3>\n<p>Falando em erros, nosso código está supondo que tudo vai correr bem. Nesse primeiro loop nós precisamos realizar algumas\nverificações. Então no final, teremos algo como:</p>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token keyword\">do</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token variable\">$result</span> <span class=\"token operator\">=</span> <span class=\"token function\">curl_multi_exec</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$multiHandle</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$numberOfMissingHandles</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$result</span> <span class=\"token operator\">!==</span> <span class=\"token constant\">CURLM_OK</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// CURLM_OK é uma constante que indica sucesso nesse caso</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'Error executing all the requests'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$result</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token variable\">$descriptorsCount</span> <span class=\"token operator\">=</span> <span class=\"token function\">curl_multi_select</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$multiHandle</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$descriptorsCount</span> <span class=\"token operator\">===</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'Error checking for activity'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$numberOfMissingHandles</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3>Código final</h3>\n<p>Com isso finalizamos todo o processamento necessário para realizar requisições paralelas com PHP. O código completo vai\nse parecer com isso:</p>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token variable\">$handle</span> <span class=\"token operator\">=</span> <span class=\"token function\">curl_init</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'https://swapi.dev/api/films/'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">curl_setopt</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$handle</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">CURLOPT_RETURNTRANSFER</span><span class=\"token punctuation\">,</span> <span class=\"token boolean constant\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$response</span> <span class=\"token operator\">=</span> <span class=\"token function\">curl_exec</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$handle</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">curl_close</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$handle</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$data</span> <span class=\"token operator\">=</span> <span class=\"token function\">json_decode</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$response</span><span class=\"token punctuation\">,</span> <span class=\"token boolean constant\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$movies</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$data</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'results'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$multiHandle</span> <span class=\"token operator\">=</span> <span class=\"token function\">curl_multi_init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$handles</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$movies</span> <span class=\"token keyword\">as</span> <span class=\"token variable\">$i</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token variable\">$movie</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token variable\">$url</span> <span class=\"token operator\">=</span> <span class=\"token function\">str_replace</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'http:'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'https:'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$movie</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'url'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token variable\">$handles</span><span class=\"token punctuation\">[</span><span class=\"token variable\">$i</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">curl_init</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$url</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">curl_setopt</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$handles</span><span class=\"token punctuation\">[</span><span class=\"token variable\">$i</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">CURLOPT_RETURNTRANSFER</span><span class=\"token punctuation\">,</span> <span class=\"token boolean constant\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">curl_multi_add_handle</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$multiHandle</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$handles</span><span class=\"token punctuation\">[</span><span class=\"token variable\">$i</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">do</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token variable\">$result</span> <span class=\"token operator\">=</span> <span class=\"token function\">curl_multi_exec</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$multiHandle</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$numberOfMissingHandles</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$result</span> <span class=\"token operator\">!==</span> <span class=\"token constant\">CURLM_OK</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'Error executing all the requests'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$result</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token variable\">$descriptorsCount</span> <span class=\"token operator\">=</span> <span class=\"token function\">curl_multi_select</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$multiHandle</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$descriptorsCount</span> <span class=\"token operator\">===</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'Error checking for activity'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$numberOfMissingHandles</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$handles</span> <span class=\"token keyword\">as</span> <span class=\"token variable\">$handle</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token variable\">$response</span> <span class=\"token operator\">=</span> <span class=\"token function\">curl_multi_getcontent</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$handle</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">curl_multi_remove_handle</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$multiHandle</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$handle</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">curl_close</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$handle</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token variable\">$movieData</span> <span class=\"token operator\">=</span> <span class=\"token function\">json_decode</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$response</span><span class=\"token punctuation\">,</span> <span class=\"token boolean constant\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">var_dump</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$movieData</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></span></code></pre></div>\n<p>Esse código provavelmente pode ser refatorado para torná-lo um pouco mais legível, mas acredito que a lógica por trás dele\ntenha ficado clara. Caso contrário, você pode usar a sessão de comentários dessa página para fazer perguntas.</p>\n<h2>Benchmarks</h2>\n<p>Agora que temos 2 versões de código que resolvem o mesmo problema de formas diferentes, podemos testar a sua performance.\nPara quem usa sistemas <em>Unix</em> (<em>Linux</em> ou <em>Mac</em>) existe um comando chamado <code class=\"language-text\">time</code> que é muito útil para verificações simples\ncomo essas.</p>\n<p>A primeira versão do nosso código (bloqueante) gera essa informação quando executo o seguinte comando (sendo <code class=\"language-text\">star-wars.php</code>o nome do nosso arquivo):</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">time</span> php star-wars.php\n\nphp star-wars.php  <span class=\"token number\">0</span>.14s user <span class=\"token number\">0</span>.04s system <span class=\"token number\">2</span>% cpu <span class=\"token number\">7.186</span> total</code></pre></div>\n<p>Basicamente, um pouco mais de 7 segundos foram necessários para executar todas as requisições.</p>\n<p>Já com a versão final do código, temos a seguinte saída:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">time</span> php star-wars.php\n\nphp star-wars.php  <span class=\"token number\">0</span>.14s user <span class=\"token number\">0</span>.04s system <span class=\"token number\">6</span>% cpu <span class=\"token number\">2.387</span> total</code></pre></div>\n<p>Ou seja, pouco mais de 2 segundos (quase 5 segundos a menos). É uma baita diferença para um exemplo tão simples, não acha?</p>\n<p>Agora um último teste, comentando a parte referente ao <code class=\"language-text\">curl_multi_select</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">time</span> php star-wars.php\n\nphp star-wars.php  <span class=\"token number\">0</span>.50s user <span class=\"token number\">0</span>.70s system <span class=\"token number\">49</span>% cpu <span class=\"token number\">2.421</span> total</code></pre></div>\n<p>Repare que o uso de CPU subiu muito. De algo próximo de 6% para quase 50%. Esse é o propósito da chamada da função\n<code class=\"language-text\">curl_multi_select</code>.</p>\n<h2>Conclusão</h2>\n<p>Assim como já foi citado no post sobre <a href=\"/2020-09-16-php-assincrono-de-forma-nativa\">PHP assíncrono</a>, existem\nvárias ferramentas que facilitam (e muito) o trabalho de realizar requisições HTTP paralelas com PHP. Guzzle é uma ótima\nopção para isso.</p>\n<p>Mas seguindo o que citei no <a href=\"/2020-04-23-principios-ou-ferramentas-o-que-estudar\">post sobre aprendizado</a>, eu penso como\nRichard Feynman (Nobel de física): “O que eu não consigo criar, eu não entendo”. Então antes de utilizar uma ferramenta\nque realiza o trabalho para mim, eu gosto de saber como realizar este trabalho sem ela. Com isso, se algum problema\nacontecer com a biblioteca, por exemplo, eu vou estar mais preparado para resolvê-lo já que entendo um pouco melhor como as coisas funcionam.</p>","frontmatter":{"title":"Requisições HTTP paralelas com PHP","date":"13 de março de 2021","description":"Realizar requisições HTTP com PHP é uma tarefa corriqueira, mas comumente precisamos fazer várias ao mesmo tempo. Nesse artigo nós vamos aprender a fazer requisições HTTP paralelas com PHP."}}},"pageContext":{"slug":"/2021-03-13-requisicoes-http-paralelas-com-php/","previous":{"fields":{"slug":"/2020-11-03-wraper-de-streams-php/"},"frontmatter":{"title":"Wrapper de Streams php://"}},"next":null}},"staticQueryHashes":["2841359383","3257411868"]}