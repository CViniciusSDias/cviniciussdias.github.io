<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title><![CDATA[Dias de Dev]]></title>
    <link href="https://dias.dev/categories/Web.xml" rel="self"/>
    <link href="https://dias.dev"/>
    <updated>2023-07-18T23:27:26+00:00</updated>
    <id>https://dias.dev/</id>
        <generator uri="http://sculpin.io/">Sculpin</generator>
            <entry>
            <title type="html"><![CDATA[Cookies e segurança]]></title>
            <link href="https://dias.dev/2022-09-27-cookies-e-seguranca/"/>
            <updated>2022-09-27T00:00:00+00:00</updated>
            <id>https://dias.dev/2022-09-27-cookies-e-seguranca/</id>
            <content type="html"><![CDATA[<p><em>Cookies</em> são amplamente utilizados para armazenar informações em nossos navegadores e muitas vezes nós negligenciamos a segurança dessas informações. Cookies podem conter dados sensíveis como sua informação de sessão, por exemplo, por isso devemos nos preocupar com seu armazenamento.</p>

<h2 id="o-que-s%C3%A3o-_cookies_%3F">O que são <em>cookies</em>?</h2>

<p>Um <em>cookie</em> é, basicamente, uma informação de texto enviada pelo servidor de uma aplicação web e salva no navegador. Após salvar essa informação, o navegador reenvia os <em>cookies</em> em todas as requisições realizadas. <em>Cookies</em> são enviados através de cabeçalhos HTTP tanto do servidor para o cliente quanto do cliente para o servidor.</p>

<p>Se você não está familiarizado com o protocolo HTTP, pode conferir este vídeo antes de continuar a leitura:</p>

<p><lite-youtube videoid="B2IWlnJ_dt0" style="background-image: url('https://i.ytimg.com/vi/B2IWlnJ_dt0/hqdefault.jpg');">
    <a href="https://youtube.com/watch?v=B2IWlnJ_dt0" class="lty-playbtn" title="Reproduzir vídeo">
        <span class="lyt-visually-hidden">Reproduzir vídeo: Como funciona a Web? - A internet por baixo dos panos | Dias de Dev</span>
    </a>
</lite-youtube></p>

<p>Dessa forma um servidor pode, por exemplo, ao receber as credenciais do usuário, gerar um ID único e enviar através de cookies. A partir disso, todas as requisições futuras que o navegador fizer conterão essa identificação do usuário. Assim funciona o mecanismo de sessões que nos permite permanecer logados em sites.</p>

<h3 id="onde-ficam-os-_cookies_">Onde ficam os <em>cookies</em></h3>

<p>Cada navegador pode salvar seus <em>cookies</em> como preferir. Seja em um banco de dados embutido, em arquivos de texto encriptados no sistema operacional, etc. Mas para visualizar os cookies de uma aplicação que estamos acessando, podemos utilizar as ferramentas de desenvolvedor.</p>

<p>Aperte F12, vá até a aba "Aplicativo" (ou "Application") e lá você verá, no menu lateral, a parte de <em>Cookies</em>. Repare que eles são separados por domínio.</p>

<p>Para entender essa separação por domínio, vamos imaginar o seguinte cenário: sua aplicação, hospedada no domínio X, envia um <em>cookie</em> de identificação de sessão. No código do seu app há chamadas para um servidor que configura relatórios de acesso ao site. Esse servidor está em outro local, no domínio Y. Sendo assim, você verá <em>cookies</em> dos domínios X e Y ao acessar essa ferramenta de desenvolvedores.</p>

<p><ins class="adsbygoogle"
style="display:block; text-align:center;"
data-ad-layout="in-article"
data-ad-format="fluid"
data-ad-client="ca-pub-8918461095244552"
data-ad-slot="2366637560"></ins></p>

<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>

<h3 id="o-que-_cookies_-armazenam">O que <em>Cookies</em> armazenam</h3>

<p>Entendido o funcionamento básico e onde encontrá-los, vamos analisar quais informações um <em>cookie</em> pode conter. Todo cookie possui, necessariamente, um nome e um valor. O nome é, como você deve imaginar, a forma que usamos para identificar a informação que esse cookie carrega em seu valor. Um <em>cookie</em> de sessão, por exemplo, geralmente possui a palavra <em>session</em> em seu nome enquanto seu valor será o ID da sessão.</p>

<p>Além desses atributos "básicos", cookies podem possuir parâmetros extra. Alguns deles são:</p>

<ul>
<li><code>Expires</code>: Define a data e hora de expiração do cookie. Se esse parâmetro não for definido, o <em>cookie</em> será considerado como "<em>cookie</em> de sessão" e irá expirar quando o navegador for fechado.</li>
<li><code>Max-Age</code>: Similar ao <code>Expires</code>, também define quando um <em>cookie</em> vai expirar, mas em segundos. Se os 2 parâmetros forem informados, <code>Max-Age</code> possui prioridade.</li>
<li><code>Domain</code>: Define para qual host o <em>cookie</em> será enviado pelo navegador. Se esse parâmetro não for definido, o <em>cookie</em> será enviado somente para o host da URL atual, não incluindo sub-domínios. Se um valor como <code>example.com</code> for definido, o <em>cookie</em> será enviado nas requisições para <code>example.com</code> e todos os seus sub-domínios.</li>
<li><code>Path</code>: Indica qual caminho deve existir na URL para que o <em>cookie</em> seja enviado pelo navegador. Se o valor for <code>/docs</code>, o <em>cookie</em> será enviado para URLs como <code>/docs</code>, <code>/docs/</code>, <code>/docs/web</code>, etc, mas não será enviado para URLs como <code>/</code>, <code>/documentos</code>, <code>/pt-br/docs</code>, etc.</li>
<li><code>Secure</code>: Se esse parâmetro for definido, o <em>cookie</em> só será enviado em requisições HTTPS.</li>
<li><code>HttpOnly</code>: Proibe o acesso ao <em>cookie</em> em questão através de JavaScript com <code>document.cookie</code>.</li>
<li><code>SameSite</code>: Com os possíveis valores sendo <code>Strict</code>, <code>Lax</code> e <code>None</code>, controla se o <em>cookie</em> pode ser enviado em requisições feitas a partir de outros sites para o do domínio do <em>cookie</em>.

<ul>
<li><code>Strict</code>: Apenas <em>cookies</em> para o endereço da URL que está sendo acessada são enviados. Isso faz com que a requisição inicial para um site não contenha os <em>cookies</em> com esse parâmetro, já que estão vindo de outro domínio.</li>
<li><code>Lax</code> (opção padrão): Semelhante ao <code>Strict</code>, mas permite o envio dos <em>cookies</em> na requisição inicial. Isso permite, por exemplo, manter o usuário logado ao chegar no sistema através de um link externo.</li>
<li><code>None</code>: Quer dizer que os <em>cookies</em> serão enviados mesmo se a requisição estiver vindo de outro endereço. Para usar essa opção, as versões mais recentes dos navegadores exigem que o parâmetro <code>Secure</code> seja definido.</li>
</ul></li>
</ul>

<h4 id="exemplos-de-defini%C3%A7%C3%B5es-de-_cookies_">Exemplos de definições de <em>cookies</em></h4>

<p>Para enviar um <em>cookie</em> de sessão, o seguinte cabeçalho pode ser enviado:</p>

<pre><code>Set-Cookie: sessionId=123456
</code></pre>

<p>Já para um <em>cookie</em> permanente com duração de 1 semana:</p>

<pre><code>Set-Cookie: nome=valor; Max-Age=604800
</code></pre>

<h2 id="_cookies_-e-seguran%C3%A7a"><em>Cookies</em> e Segurança</h2>

<p>Já entendemos o que são, como funcionam e os parâmetros de <em>cookies</em>. Agora vamos finalmente ao tópico em questão: <em>cookies</em> e segurança.</p>

<h3 id="_cookies_-e-xss"><em>Cookies</em> e XSS</h3>

<p>Como já foi citado, sessões são um uso muito comum para <em>cookies</em>. As linguagens de back-end, inclusive, já lidam com esse detalhe de forma transparente na maioria das vezes. Agora imagine o seguinte cenário: através de um ataque de <a href="https://www.youtube.com/watch?v=lntsVxPZibw">XSS</a> um usuário malicioso consegue acesso ao seu <em>cookie</em> de sessão. Com isso ele conseguirá se passar por você e o estrago pode ser enorme.</p>

<p>Para prevenir que ataques XSS consigam acessar seus <em>cookies</em> sensíveis (como o de sessão), podemos marcá-lo como <code>HttpOnly</code>. Dessa forma, código JavaScript nenhum terá acesso ao mesmo.</p>

<p>Claro que um sistema com vulnerabilidade a <em>XSS</em> está em GRANDES riscos, mas para evitar <a href="https://owasp.org/www-community/attacks/Session_hijacking_attack"><em>session hijacking</em></a>, tornar o <em>cookie</em> <code>HttpOnly</code> já é um grande passo.</p>

<p>Como já foi explicado anteriormente, o parâmetro <code>HttpOnly</code> impede que o <em>cookie</em> em questão seja acessado via <code>document.cookie</code>. Mas caso você precise realizar requisições via JavaScript, saiba que a função <code>fetch</code> vai conseguir enviar os mesmos sem problema. :-D</p>

<p>Cada linguagem back-end pode fornecer suas facilidades para definir o <em>cookie</em> de sessão como <code>HttpOnly</code>. No PHP, por exemplo, além da função <code>session_set_cookie_params</code>, há configurações como a <code>session.cookie_httponly</code>. O cabeçalho de um <em>cookie</em> <code>HttpOnly</code> seria parecido com:</p>

<pre><code>Set-Cookie: sessionId=123456; HttpOnly
</code></pre>

<h3 id="_cookies_-e-csrf"><em>Cookies</em> e CSRF</h3>

<p>Um ataque <em>CSRF</em> (<em>Cross-Site Request Forgery</em>) permite que um atacante se passe por outro usuário tabmém, enviando requisições de um site para outro.</p>

<p>Para exemplificar: imagine que meu site dias.dev seja malicioso. Nele eu vou colocar a seguinte tag <code>img</code>:</p>

<pre><code class="html">&lt;img src="https://example.com/index.php?action=delete&amp;id=123" /&gt;
</code></pre>

<p>Se você, acessando meu site, estiver logado em <code>example.com</code> (com o <em>cookie</em> armazenado e o parâmetro <code>SameSite=None</code>), essa requisição vai ser feita com sucesso para uma ação de remoção de um dado e você nem vai perceber. Só haverá uma "imagem quebrada" no site.</p>

<p>Para impedir que a partir de um site, <em>cookies</em> sejam enviados para outro, podemos (dentre outras coisas), definir a política de <code>SameSite</code> como <code>Lax</code> (o que via de regra é o padrão) ou <code>Strict</code>:</p>

<pre><code>Set-Cookie: sessionId=123456; HttpOnly; SameSite=Lax
</code></pre>

<p>Agora nosso <em>cookie</em> além de não ser mais acessível via JavaScript, só é enviado em requisições realizadas a partir do nosso próprio site. Talvez você esteja se perguntando: se <code>Lax</code> já é o padrão, por que me preocupar? Acontece que algumas linguagens ou frameworks back-end podem alterar esse padrão por diversos motivos. Por isso é importante saber como usar esse parâmetro.</p>

<h3 id="_cookies_-e-ataques-_man-in-the-middle_"><em>Cookies</em> e ataques <em>Man in the middle</em></h3>

<p>Outra forma de realizar <a href="https://owasp.org/www-community/attacks/Session_hijacking_attack"><em>session hijacking</em></a> seria um ataque do tipo <em>Man in the middle</em>, onde um atacante observa as requisições realizadas a partir do seu computador para o servidor. Se a requisição não for criptografada, ou seja, não usar HTTPS, o atacante terá acesso a todos os <em>cookies</em>.</p>

<p>Para impedir que um <em>cookie</em> seja enviado em requisições não criptografadas, basta definir o parâmetro <code>Secure</code>. Quando uma requisição sem HTTPS acontecer, esse <em>cookie</em> não será enviado. Com isso, nosso <code>header</code> ficaria:</p>

<pre><code>Set-Cookie: sessionId=123456; HttpOnly; SameSite=Lax; Secure
</code></pre>

<h2 id="conclus%C3%A3o">Conclusão</h2>

<p>Repare que o uso correto dos parâmetros dos <em>cookies</em> já nos protege de diversos ataques. Obviamente apenas cuidar dos nossos <em>cookies</em> não é o suficiente para ter um sistema verdadeiramente seguro. Precisamos nos atentar a diversos outros fatores e possíveis vulnerabilidades. Além disso, <em>cookies</em> de sessão não são os únicos a serem cuidados. <em>Tokens</em> geralmente são armazenados como <em>cookies</em> também e todos esses cuidados devem ser tomados.</p>

<p>Se segurança é um assunto que te interessa, recomendo essa <em>playlist</em> com alguns vídeos básicos sobre o assunto: <a href="https://www.youtube.com/playlist?list=PL3j2sfzg3FPuOOt13tOcNTx6hCFYcQls9">https://www.youtube.com/playlist?list=PL3j2sfzg3FPuOOt13tOcNTx6hCFYcQls9</a></p>

<p>Se quiser se aprofundar, na Alura há diversos cursos e formações sobre o tema de segurança. Aqui está um cupom de desconto para assinar a plataforma:
<a href="https://www.alura.com.br/promocao/diasdedev">https://www.alura.com.br/promocao/diasdedev</a></p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[O que são PWAs?]]></title>
            <link href="https://dias.dev/2021-09-14-o-que-sao-pwas/"/>
            <updated>2021-09-14T00:00:00+00:00</updated>
            <id>https://dias.dev/2021-09-14-o-que-sao-pwas/</id>
            <content type="html"><![CDATA[<p><em>Progressive Web Apps</em>, como o nome mesmo já diz, são aplicativos <em>web</em> progressivos. Vamos falar um pouco mais sobre a parte de "progressivos", mas o básico é isso: Um aplicativo que roda no "mundo <em>web</em>"</p>

<h2 id="aplicativo-na-web%3F">Aplicativo na Web?</h2>

<p>Quando falamos de aplicativos, principalmente móveis, pensamos logo em acessar uma loja de aplicativos, escolher um disponível e instalar. Pensamos em todo o poder que estes aplicativos têm de controlar o <em>hardware</em> de nossos dispositivos. Mas será que precisa ser assim?</p>

<p>Primeiro, precisamos mesmo de uma loja? Por que não pesquisar diretamente no Google um serviço ao invés de pesquisar em uma loja de aplicativos? Segundo, será que só aplicativos móveis "nativos" são capazes de controlar o <em>hardware</em> dos dispositivos onde eles rodam?</p>

<p><img src="https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/1DKtUFjXLJbiiruKA9P1.svg" alt="Gráfico mostrando a relação entre capacidade e alcance de PWAs e aplicações nativas e serviços web, onde PWAs possuem tanta capacidade quanto um aplicativo nativo e tanto alcance quanto um serviço Web" class="big-image" /></p>

<h2 id="o-poder-da-web">O poder da Web</h2>

<p>A <em>Web</em> evoluiu absurdamente nas últimas décadas e trouxe muito poder para nós <em>devs</em>. Coisas que antigamente seriam impensáveis sem instalar de forma "nativa" uma aplicação, hoje é trivial de ser feito diretamente no navegador. Alguns exemplos:</p>

<ul>
<li>Acessar à câmera;</li>
<li>Disponibilidade offline;</li>
<li>Acesso ao GPS;</li>
<li>Execução de tarefas no plano de fundo;</li>
<li>etc.</li>
</ul>

<p>Hoje em dia é perfeitamente possível que após acessar um aplicativo <em>web</em>, os próximos acessos possam ser feitos sem uma conexão ativa com a <em>internet</em>. Além disso é muito comum aplicativos <em>web</em> acessarem recursos nativos como localização, sistema de sons, baterias, etc.</p>

<p>Aqui você pode conferir algumas <em>APIs Web</em> para ter acesso a recursos que antigamente só eram possíveis através de aplicações nativas: https://developer.mozilla.org/en-US/docs/Web/API</p>

<p><ins class="adsbygoogle"
style="display:block; text-align:center;"
data-ad-layout="in-article"
data-ad-format="fluid"
data-ad-client="ca-pub-8918461095244552"
data-ad-slot="2366637560"></ins></p>

<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>

<h2 id="aplica%C3%A7%C3%B5es-progressivas">Aplicações progressivas</h2>

<p>Já vimos que através da <em>Web</em> podemos ter acesso a recursos muito poderosos, mas o que significa o <strong>P</strong> de PWA?</p>

<p>PWAs são aplicações progressivas, ou seja, se adaptam a diferentes cenários e dispositivos.</p>

<p>Um exemplo já citado de cenário adverso: dispositivo sem conexão com a <em>internet</em>. Quando você acessa o aplicativo móvel do Twitter sem estar conectado a <em>internet</em>, ele te mostra os <em>tweets</em> que já foram carregados anteriormente. Ou seja, a sua experiência é degradada, mas o aplicativo continua funcionando. A ideia de PWAs é exatamente essa.</p>

<p>Se você tentar acessar uma PWA que precisa da localização do usuário a partir de um dispositivo sem GPS, a aplicação deve estar preparada para buscar a localização menos precisa (através da rede) ou solicitar o endereço ao usuário. Com isso, quanto mais recursos o dispositivo tiver, melhor será a experiência. Em outras palavras, teremos uma experiência <strong>progressiva</strong>.</p>

<h2 id="posso-instalar-%22sites%22%3F">Posso instalar "sites"?</h2>

<p>Uma dúvida comum ao aprender sobre PWAs é sobre a instalação da aplicação. Não seria prático que um usuário precisasse abrir o navegador e digitar a URL da nossa aplicação sempre que quisesse acessá-la. Com aplicativos nativos nós temos os ícones na tela inicial do dispositivo.</p>

<p>Outro ponto é que um aplicativo possui uma experiência mais imersiva, sem interferências de outras abas do navegador, além de barras de ferramentas, etc.</p>

<p><img src="/build/pwa/pwa-ifood.jpg" alt="Tela da PWA do ifood, que é exatamente igual ao aplicativo nativo" class="big-image" /></p>

<p>Como podemos ver, uma PWA pode se comportar visualmente exatamente como uma aplicação nativa. As barras do navegador podem sumir, a cor da barra de notificação pode ser personalizada, etc.</p>

<p>Além do mais, podemos optar por criar um atalho para essa aplicação web direto em nossa tela inicial:</p>

<p><img src="/build/pwa/menu-instalar-ifood.jpg" alt='Tela do navegador com o menu aberto, mostrando a opção de "Adicionar à tela inicial"' class="big-image" /></p>

<p>Mas claro, nem todo usuário vai abrir o menu do navegador para adicionar um atalho à tela inicial. O ideal seria poder ter um botão de instalar essa aplicação para que o usuário não tenha esse "esforço".</p>

<p><img src="/build/pwa/tela-instalacao-uber.jpg" alt="Mensagem sugerindo a instalação da PWA do uber sem precisar abrir o menu do navegador" class="big-image" /></p>

<p>Conforme podemos ver na imagem anterior, isso também é perfeitamente possível. Além de termos um botão na aplicação para instalá-la, o próprio navegador ao identificar uma PWA pode sugerir sua instalação. A ideia é que isso fiquei cada vez mais natural, inclusive, com os navegadores tomando decisões mais assertivas ao fazer tais sugestões.</p>

<h2 id="como-desenvolver-pwas%3F">Como desenvolver PWAs?</h2>

<p>Como sou um desenvolvedor Web, o assunto de PWAs me anima bastante. A ideia deste post não é te ensinar a desenvolver PWAs, mas sim te apresentar ao conceito. Caso você tenha interesse na parte prática, vou deixar aqui algumas referências.</p>

<p>Se você aprende melhor lendo, esse livro é um ótimo início:</p>

<div class="iframe">
    <iframe style="width:120px;height:240px;" marginwidth="0" marginheight="0" scrolling="no" frameborder="0" src="//ws-na.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&OneJS=1&Operation=GetAdHtml&MarketPlace=BR&source=ss&ref=as_ss_li_til&ad_type=product_link&tracking_id=cviniciussd06-20&language=pt_BR&marketplace=amazon&region=BR&placement=B07BZK71NV&asins=B07BZK71NV&linkId=39b9fcf31f08c2d76b0d6f4284cb6a60&show_border=true&link_opens_in_new_window=true"></iframe>
</div>

<p>Porém uma desvantagem (na minha opinião) deste livro é o uso de React para a criação da aplicação. Eu gosto mais de conteúdos conceituais, que explicam a base sem o uso de muitas ferramentas.</p>

<p>Se você também prefere esse tipo de conteúdo, pode dar uma olhada nesse livro (um pouco mais caro):</p>

<div class="iframe" style="margin-bottom: 1rem;">
    <iframe style="width:120px;height:240px;" marginwidth="0" marginheight="0" scrolling="no" frameborder="0" src="//ws-na.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&OneJS=1&Operation=GetAdHtml&MarketPlace=BR&source=ss&ref=as_ss_li_til&ad_type=product_link&tracking_id=cviniciussd06-20&language=pt_BR&marketplace=amazon&region=BR&placement=B075HP52WY&asins=B075HP52WY&linkId=955ce63a435057d47ccd0bd81620193c&show_border=true&link_opens_in_new_window=true"></iframe>
</div>

<p>Agora se você prefere estudar através de cursos e vídeos, super recomendo os treinamentos de front-end e de PWA da Alura. Lá você consegue toda a base para desenvolver uma PWA de forma profissional, aprendendo desde a base, passando por <em>JavaScript</em> avançado e <em>APIs Web</em>, até <em>PWAs</em> de fato. Se for o seu caso, aqui tenho um cupom de 10% de desconto para estudar na Alura:
<a href="https://www.alura.com.br/promocao/diasdedev">https://www.alura.com.br/promocao/diasdedev</a></p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Como o PHP funciona na Web?]]></title>
            <link href="https://dias.dev/2021-06-15-como-o-php-funciona-na-web/"/>
            <updated>2021-06-15T00:00:00+00:00</updated>
            <id>https://dias.dev/2021-06-15-como-o-php-funciona-na-web/</id>
            <content type="html"><![CDATA[<p>O PHP é o que conhecemos como linguagem <em>server-side</em>, ou seja, ele roda nos servidores web, e não nos navegadores.</p>

<p>Isso já é de conhecimento geral, mas nem todos entendem como uma requisição sai do navegador e chega em seu código PHP. É exatamente sobre isso que vamos tratar neste artigo.</p>

<h2 id="como-funciona-a-web%3F">Como funciona a Web?</h2>

<p>Antes de falarmos sobre o papel do PHP na Web, é muito importante entendermos como a Web funciona. O protocolo HTTP é o que torna toda a comunicação entre nosso navegador e servidores, possível, então é de suma importância que a gente estude ele.</p>

<p>Neste vídeo eu expliquei um pouco de como funciona o processo desde quando damos <em>Enter</em> em nosso navegador até termos uma resposta em nossa tela. Vale a pena conferir antes de continuar lendo este artigo:</p>

<p><lite-youtube videoid="B2IWlnJ_dt0" style="background-image: url('https://i.ytimg.com/vi/B2IWlnJ_dt0/hqdefault.jpg');">
    <a href="https://youtube.com/watch?v=B2IWlnJ_dt0" class="lty-playbtn" title="Reproduzir vídeo">
        <span class="lyt-visually-hidden">Reproduzir vídeo: Como funciona a Web? - A internet por baixo dos panos | Dias de Dev</span>
    </a>
</lite-youtube></p>

<p>Existem várias outras referências (inclusive mais completas) para você conhecer as tecnologias por trás da Web. Vou deixar aqui algumas referências:
- <a href="https://amzn.to/3lzFVkD">Desconstruindo a Web: As tecnologias por trás de uma requisição</a>
- <a href="https://amzn.to/35k9rT1">HTTP: The Definitive Guide</a>
- <a href="https://amzn.to/3gEgz22">Learning Http/2: A Practical Guide for Beginners</a>
- <a href="https://www.alura.com.br/promocao/diasdedev">Cursos de HTTP na Alura</a></p>

<p>Com esse conhecimento, já podemos partir para o foco deste artigo: como o <strong>PHP</strong> funciona na Web?</p>

<h2 id="cgi-_common-gateway-interface_">CGI (<em>Common Gateway Interface</em>)</h2>

<p>A primeira forma de se executar código em servidores ao receber uma requisição HTTP foi através de uma técnica chamada CGI (<em>Common Gateway Interface</em>).</p>

<p>Esta técnica consistia em basicamente um servidor Web (como Apache, por exemplo) receber uma requisição HTTP e executar um processo enviando os dados da requisição através da entrada padrão. A saída do processo era lida pelo servidor Web e devolvida em uma resposta HTTP.</p>

<p>Assim o PHP nasceu, sendo uma espécie de <em>framework</em> C. O Apache executava um programa escrito em C, onde PHP era um conjunto de ferramentas para facilitar a escrita, principalmente de <em>templates</em> (para não misturar C e HTML).</p>

<p>Esta é a forma mais rudimentar de se executar um código <em>server-side</em> e não é mais recomendada, pois há alternativas mais interessantes que veremos neste artigo.</p>

<p><ins class="adsbygoogle"
style="display:block; text-align:center;"
data-ad-layout="in-article"
data-ad-format="fluid"
data-ad-client="ca-pub-8918461095244552"
data-ad-slot="2366637560"></ins></p>

<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>

<h2 id="apache-mod_php">Apache mod_php</h2>

<p>Conforme o PHP (e a Web em si) foi evoluindo, a abordagem utilizando CGI foi se mostrando ineficaz, desperdiçando recursos de processamento.</p>

<p>Neste momento surgiu um módulo do PHP para Apache, o famoso <code>mod_php</code>. Esse módulo "anexava" um executável do PHP em cada processo do Apache, ou seja, a cada processo que o Apache criava para servir uma requisição, o executável do PHP era também inicializado, mesmo que a requisição fosse apenas para servir arquivos estáticos e o PHP não fosse necessário.</p>

<p>Isso era muito mais rápido do que utilizar CGI, mas ainda havia muito desperdício de recursos. O apache evoluiu a ponto de não precisar criar um processo a cada nova requisição e passou a trabalhar com <em>threads</em>, mas além dessa evolução ter demorado para acontecer, esse modelo não funciona bem com o <code>mod_php</code>.</p>

<h2 id="fastcgi-e-php-fpm">FastCGI e PHP-FPM</h2>

<p>Com a nova solução do <code>mod_php</code> também se mostrando ineficaz perante a tantas evoluções do PHP e da Web (ambos sempre cresceram juntos), o protocolo FastCGI passou a ser utilizado. Com isso, um servidor Web recebia as requisições e apenas se fosse necessário algum processamento, executaria o PHP.</p>

<p>Porém, essa execução não era como no CGI. Um conceito de "processos persistentes" foi utilizado, diminuindo muito a quantidade de recursos necessários para processar cada requisição. Um único processo agora passa a ser capaz de tratar diversas requisições e não apenas uma. Com isso todo o <em>overhead</em> de criar e matar processos a cada requisição foi drasticamente reduzido.</p>

<p>Para extrair o máximo do protocolo FastCGI, foi desenvolvida uma ferramenta chamada PHP-FPM (<em>FastCGI Process Manager</em>). Este servidor de aplicação permite que realizemos diversas configurações como o número de processos <em>workers</em>, a quantidade de recursos liberada para cada processo e muito mais. Este é o software utilizado atualmente para termos um servidor FastCGI em produção com PHP.</p>

<p>Atualmente, qualquer servidor web que saiba se comunicar através do protocolo FastCGI pode ser utilizado em conjunto com PHP, mas o <em>Nginx</em> ganhou muita força por prometer (e segundo benchmarks, cumprir) entregar diversas melhorias de performance em relação ao Apache. Os recursos são mais bem gerenciados e o uso de programação assíncrona através de <em>multiplexing</em> de I/O trazem ganhos expressivos quando comparamos com o ainda amplamente utilizado Apache.</p>

<h2 id="arquitetura-_share-nothing_">Arquitetura <em>share-nothing</em></h2>

<p>Em qualquer uma das abordagens citadas até agora, uma das principais filosofias do PHP se mantém: a <em>share-nothing architecture</em>.</p>

<p>A ideia por trás disso é não compartilhar nenhum recurso entre uma requisição e outra. Por mais que o mesmo processo possa ser utilizado para servir múltiplas requisições, em nosso código, cada execução é como um novo processo. Ao finalizar a execução de um código PHP, todas as variáveis são excluídas, todos os recursos são liberados. Praticamente nada é armazenado entre uma requisição e outra.</p>

<p>Isso permitiu e ainda permite que o PHP tenha uma arquitetura muito simples de escalar e isso é um dos fatores que contribuíram para a ampla adoção do PHP como linguagem back-end Web.</p>

<p>A abordagem utilizando Nginx + PHP-FPM é a ideal para grande parte das aplicações que usam PHP, porém existem cenários onde ainda mais performance é necessária.</p>

<h2 id="servidores-auto-contidos">Servidores auto-contidos</h2>

<p>Quando temos milhões de requisições chegando ou comunicação em tempo real acontecendo, o fato de ser necessária a inicialização de todas as variáveis novamente e o início do código de toda nossa aplicação ter que ser realizada a cada requisição pode ser um peso. Imagine que a cada requisição seu <em>framework</em> favorito (que provavelmente é bem pesado) precisa ser inicializado novamente.</p>

<p>Para resolver os problemas deste tipo de aplicação que demanda um nível a mais de performance, servidores auto-contidos podem ser utilizados. Um servidor auto-contido é um serivdor web exposto pela própria aplicação, ou seja, seu próprio código PHP recebe diretamente as requisições.</p>

<p>Com isso a inicialização da sua aplicação pode ser feita uma única vez e a cada nova requisição, podemos somente executar o código necessário, sem necessidade de levantar de novo o <em>framework</em>, buscar as configurações, ler variáveis de ambiente, processar as dependências, definir as rotas, etc.</p>

<p>Essa abordagem já é possível há muito tempo. Um dos precursores desta técnica é o <a href="https://github.com/php-pm/php-pm">PHP-PM</a> que usa o <a href="https://reactphp.org/">ReactPHP</a> por baixo dos panos. O ReactPHP facilita a execução de código assíncrono e não bloqueante no PHP através de um <em>Event Loop</em>. Nós falamos um pouco sobre programação assíncrona <a href="/2020-09-16-php-assincrono-de-forma-nativa/">neste post</a>. O ReactPHP torna esta tarefa MUITO mais fácil, por isso ferramentas como PHP-PM puderam surgir.</p>

<p>Outros <em>frameworks</em> como <a href="https://amphp.org/">Amp PHP</a> têm a mesma proposta, porém uma ferramenta um pouco diferente tem chamado muita atenção nos últimos anos e levado essa proposta para outro nível</p>

<h2 id="swoole">Swoole</h2>

<p>É impossível falar de servidores auto-contidos PHP e não citar o <a href="https://www.swoole.co.uk/">Swoole</a>.</p>

<p>A principal diferença entre o Swoole e as demais ferramentas citadas de servidores auto-contidos é que o Swoole não é um componente em PHP e sim uma extensão, ou seja, o Swoole foi escrito em C e compilado para ser "integrado" ao PHP. Isso além de conceder ainda mais performance para o código, ainda dá poderes a mais para o Swoole como lidar de forma assíncrona com código que originalmente seria síncrono (como com PDO e curl, por exemplo).</p>

<p>Já existe material por aí sobre Swoole, inclusive <a href="https://youtu.be/GCECSLtT49U">esse vídeo</a> no meu canal e o <a href="https://amzn.to/3gxamov">livro</a> escrito por um dos criadores da ferramenta, por isso não vou transformar esse artigo em um tutorial, mas vale a pena pesquisar mais a fundo.</p>

<h2 id="conclus%C3%A3o">Conclusão</h2>

<p>Vimos neste artigo que há várias formas para fazer com que uma requisição chegue no PHP. Algumas bem antigas, outras bem modernas.</p>

<p>Atualmente as 2 opções aceitáveis são utilizando PHP-FPM ou algum servidor auto-contido. Nenhuma das 2 abordagens tira o papel de servidores Web como o amado Apache ou o moderno Nginx.</p>

<p>No caso do PHP-FPM precisamos de um servidor para receber as requisições HTTP e enviar as chamadas para o PHP com FastCGI. No caso de um servidor auto-contido, podemos ter um proxy reverso servindo os arquivos estáticos e realizando cache, por exemplo, enquanto o servidor auto-contido responde apenas as requisições realmente necessárias.</p>

<p>Se você quiser aprender mais sobre algum desses assuntos, pode considerar assinar a Alura. Lá existem treinamentos (gravados por mim) sobre Nginx, ReactPHP, Swoole e muito mais. Caso pretenda estudar na Alura, <a href="https://www.alura.com.br/promocao/diasdedev">neste link</a> você tem um desconto de 10%.</p>
]]></content>
        </entry>
    </feed>