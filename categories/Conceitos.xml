<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title><![CDATA[Dias de Dev]]></title>
    <link href="https://dias.dev//categories/Conceitos.xml" rel="self"/>
    <link href="https://dias.dev//"/>
    <updated>2022-03-24T23:23:45+00:00</updated>
    <id>https://dias.dev//</id>
        <generator uri="http://sculpin.io/">Sculpin</generator>
            <entry>
            <title type="html"><![CDATA[Charsets e Encodings: Como strings funcionam]]></title>
            <link href="https://dias.dev//2021-08-24-charsets-e-encodings-como-strings-funcionam/"/>
            <updated>2021-08-24T00:00:00+00:00</updated>
            <id>https://dias.dev//2021-08-24-charsets-e-encodings-como-strings-funcionam/</id>
            <content type="html"><![CDATA[<p>√â de conhecimento geral que computadores trabalham com n√∫meros, especificamente n√∫meros na base bin√°ria. Sabendo disso, como podemos representar o texto que eu estou escrevendo apenas com conjuntos de 0s e 1s? Como o computador, trabalhando apenas com n√∫meros, consegue lidar com textos?</p>

<h2 id="tabelas-de-caracteres-charsets">Tabelas de caracteres (Charsets)</h2>

<p>Para realizar essa tarefa, tabelas de caracteres (<em>charsets</em>) s√£o utilizadas. Com essas tabelas, algum caractere pode ser mapeado para algum n√∫mero. Esse n√∫mero que ser√° armazenado e manipulado pelos programas que lidam com textos. Mas como esse mapeamento √© feito?</p>

<h2 id="ascii">ASCII</h2>

<p>Uma das tabelas de caracteres mais antigas que se tem conhecimento √© a ASCII (<em>American Standard Code for Information Interchange</em>). Esta tabela cont√©m todos os n√∫meros e os caracteres usados pelo idioma ingl√™s, onde cada um desses caracteres √© mapeado para um n√∫mero e esse n√∫mero √© convertido diretamente para a base bin√°ria, sendo uma representa√ß√£o bastante simples. Os n√∫meros v√£o de 0 a 127, ou seja, qualquer caractere da tabela ASCII pode ser representado em at√© 7 <em>bits</em>, o que √© menos que 1 <em>byte</em> (1 <em>byte</em> = 8 <em>bits</em>).</p>

<p><img src="https://raw.githubusercontent.com/wiki/tomgibara/ascii-table/tables/ascii-table-1.1.png" alt="Tabela ASCII" /></p>

<p>Isso funcionava muito bem para textos que usavam ingl√™s como idioma (ou algum idioma com o mesmo conjunto de caracteres). Por√©m, diversos outros idiomas possuem caracteres que n√£o est√£o representados nesta tabela. Caracteres acentuados, por exemplo, n√£o est√£o na tabela ASCII. Como representar textos em portugu√™s, por exemplo?</p>

<h2 id="extended-ascii">Extended ASCII</h2>

<p>Como pudemos ver na imagem da tabela ASCII, os valores v√£o de 0 a 127. Isso pode ser representado com 7 <em>bits</em>.</p>

<p>Como foi citado no cap√≠tulo anterior, todos os caracteres da tabela ASCII podem ser representados com at√© 7 <em>bits</em>. Sendo assim, temos 1 bit "sobrando" para cada caractere completar 1 <em>byte</em>.</p>

<p>Pensando nisso, surgiram diversas outras tabelas de caracteres fazendo uso deste bit adicional para representar outros caracteres. Desta forma √© criada a tabela ASCII estendida: <em>Extended ASCII</em> ou <em>EASCII</em></p>

<p><img src="https://files.passeidireto.com/0b57a2e8-7fae-4e06-ac73-a7004f09a741/0b57a2e8-7fae-4e06-ac73-a7004f09a741.gif" alt="Tabela ASCII Estendida" /></p>

<p>Ao mesmo tempo, outros idiomas que possuem seu alfabeto sem nenhuma semelhan√ßa com o ingl√™s (como japon√™s ou russo) utilizavam tabelas completamente diferentes para representar seus caracteres.</p>

<h2 id="ascens%C3%A3o-da-web">Ascens√£o da Web</h2>

<p>O uso de tabelas diferentes funcionou muito bem enquanto os arquivos ficavam apenas em um computador ou eram compartilhados em redes locais (como de universidades). Por√©m, conforme a Web nasceu e cresceu, o compartilhamento de arquivos se tornou uma tarefa trivial. Como eu, no Brasil, poderia enviar um documento para o Egito, usando o alfabeto grego? Essa tarefa era simplesmente imposs√≠vel.</p>

<h2 id="unicode">Unicode</h2>

<p>Pensando em ter uma forma unificada de representar todos os caracteres conhecidos no mundo, em 1991 foi criada o <em>Unicode Consortium</em>. Essa iniciativa trabalha e tem encontros frequentes para garantir que h√° suporte a todos os idiomas e caracteres conhecidos pela humanidade, incluindo <em>emojis</em>. Parece um trabalho enorme e realmente √©.</p>

<p><em>Emojis</em>, por exemplo, foram sugeridos √† iniciativa em meados de 2000, por√©m apenas ap√≥s 2007 eles foram incorporados ao <em>Unicode</em>.</p>

<p>Ent√£o, se formos supersimplificar (muito), podemos dizer que o <em>Unicode Consortium</em> criou um grande <em>charset</em>, ou seja, uma grande tabela de caracteres. Por√©m, essa "tabela" √© gigante! Como representar estes n√∫meros enormes de forma eficiente?</p>

<h2 id="encodings">Encodings</h2>

<p>Aqui entram os encodings. O n√∫mero <strong>128 512</strong> (em hexadecimal, 1F600) representa o emoji de sorriso (üòÄ). Esse n√∫mero <strong>128 512</strong> pode ser representado de v√°rias formas dependendo do encoding selecionado para tal arquivo. Alguns encodings compat√≠veis com <em>Unicode</em> s√£o:
- UTF-8
- UTF-16
- UTF-32</p>

<p>Inicialmente eu acreditava que a diferen√ßa entre eles era apenas o n√∫mero de <em>bits</em> utilizado, sendo assim UTF-8 poderia representar menos caracteres j√° que usa menos bits. N√£o √© o caso. Todos eles podem consumir um n√∫mero vari√°vel de <em>bits</em> os organizando de forma diferente. Cada encoding pode ser mais vantajoso dependendo do cen√°rio. Para representar textos (como esse que escrevo) e mensagens transferidas pela rede, UTF-8 √© o mais recomendado e utilizado, visto que sua organiza√ß√£o permite que os caracteres mais comuns ocupem o menor espa√ßo poss√≠vel. J√° UTF-16 ocupa menos espa√ßo representando caracteres com n√∫meros maiores na "tabela" unicode.</p>

<h2 id="conclus%C3%A3o">Conclus√£o</h2>

<p>√â comum utilizarmos fun√ß√µes de convers√£o de encoding sem entender bem o que estamos fazendo e muito provavelmente todo mundo que desenvolve <em>software</em> para a <em>web</em> j√° se deparou com o seguinte problema:</p>

<p><img src="https://i.stack.imgur.com/590Tg.png" alt="Texto com caracteres mal codificados" /></p>

<p>Entender como funcionam charsets e encodings de texto al√©m de ser interessante e divertido, pode nos ajudar a compreender melhor problemas deste tipo e principalmente encontrar a solu√ß√£o de forma mais simples.</p>

<p>Creio que seja seguro afirmar que a grande maioria dos textos que tratamos como desenvolvedores utiliza UTF-8 como encoding e neste artigo n√≥s entendemos o motivo disso e como o tratamento de textos evoluiu at√© chegar a esse ponto.</p>

<p>Se voc√™ quiser aprender mais sobre esse assunto, pode considerar assinar a Alura. L√° existem treinamentos que tratam sobre charsets, encoding, manipula√ß√£o de <em>strings</em>    e muito mais. Caso pretenda estudar na Alura, <a href="https://www.alura.com.br/promocao/diasdedev">neste link</a> voc√™ tem um desconto de 10%.</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Requisi√ß√µes HTTP paralelas com PHP]]></title>
            <link href="https://dias.dev//2021-03-13-requisicoes-http-paralelas-com-php/"/>
            <updated>2021-03-13T00:00:00+00:00</updated>
            <id>https://dias.dev//2021-03-13-requisicoes-http-paralelas-com-php/</id>
            <content type="html"><![CDATA[<h2 id="i%2Fo-n%C3%A3o-bloqueante-programa%C3%A7%C3%A3o-ass%C3%ADncrona">I/O n√£o bloqueante (programa√ß√£o ass√≠ncrona)</h2>

<p>Em um <a href="/2020-09-16-php-assincrono-de-forma-nativa/">post anterior</a> falei bastante sobre como o PHP trabalha por baixo dos panos de forma nativa com I/O n√£o
bloqueante, e consequentemente com programa√ß√£o ass√≠ncrona. Usando os conhecimentos daquele post com conhecimentos de
<em>sockets</em> e HTTP seria poss√≠vel realizarmos chamadas HTTP ass√≠ncronas e process√°-las conforme elas fossem recebidas.
Por√©m √© bastante comum podermos nos dar ao luxo de processar todas as respostas HTTP depois de prontas, desde que todas
as requisi√ß√µes tenham sido feitas de forma concorrente.</p>

<h2 id="curl">cURL</h2>

<p>Como realizar requisi√ß√µes HTTP usando <em>sockets</em> pode se tornar uma tarefa muito complicada, principalmente em cen√°rios
onde precisamos enviar dados (requisi√ß√µes POST, por exemplo), cURL √© uma alternativa muito interessante. Essa biblioteca
√© pensada especialmente em realizar requisi√ß√µes pela rede e possui diversos facilitadores.</p>

<h2 id="o-problema">O problema</h2>

<p>Entendido o contexto das tecnologias que temos dispon√≠veis, vamos falar do problema que temos em m√£os. Existe uma API
que fornece informa√ß√µes sobre o universo <em>Star Wars</em>. Essa API √© gratuita e vai servir perfeitamente para nosso exemplo.</p>

<p>O que queremos fazer √© buscar a lista de filmes (atrav√©s da url https://swapi.dev/api/films/) e para cada filme buscar
os seus detalhes em outra URL (https://swapi.dev/api/films/:id/).</p>

<h3 id="solu%C3%A7%C3%A3o-bloqueante">Solu√ß√£o bloqueante</h3>

<p>Usando o <code>cURL</code> de forma ‚Äúpadr√£o‚Äù, ou seja, bloqueante, podemos atingir este objetivo com o seguinte c√≥digo:</p>

<pre><code class="php">&lt;?php

$handle = curl_init('https://swapi.dev/api/films/');
// informa que n√£o queremos exibir a resposta diretamente, mas sim pegar seu retorno
curl_setopt($handle, CURLOPT_RETURNTRANSFER, true);
$response = curl_exec($handle);
curl_close($handle);

$data = json_decode($response, true);
$movies = $data['results'];

foreach ($movies as $movie) {
    // Alterando o protocolo para https
    $url = str_replace('http:', 'https:', $movie['url']);
    $handle = curl_init($url);
    curl_setopt($handle, CURLOPT_RETURNTRANSFER, true);
    $response = curl_exec($handle);

    $movieData = json_decode($response, true);
    var_dump($movieData);
}
</code></pre>

<p>O problema desta abordagem √© que cada requisi√ß√£o para os detalhes do filme vai travar a execu√ß√£o do PHP, fazendo
com que a pr√≥xima requisi√ß√£o s√≥ seja iniciada quando a anterior for finalizada.</p>

<h3 id="solu%C3%A7%C3%A3o-n%C3%A3o-bloqueante">Solu√ß√£o n√£o bloqueante</h3>

<p>Para informarmos um determinado n√∫mero de requisi√ß√µes e realizarmos todas de uma vez, podemos usar o <code>curl_multi_init</code>.</p>

<pre><code class="php">&lt;?php

// Primeira requisi√ß√£o como no c√≥digo anterior
$movies = $data['results'];

// Inicializa o handle de m√∫ltiplas conex√µes
$multiHandle = curl_multi_init();

// Armazena cada handle individual em um array
// al√©m de adicion√°-los ao $multiHandle
$handles = [];
foreach ($movies as $i =&gt; $movie) {
    $url = str_replace('http:', 'https:', $movie['url']);
    $handles[$i] = curl_init($url);
    curl_setopt($handles[$i], CURLOPT_RETURNTRANSFER, true);
    curl_multi_add_handle($multiHandle, $handles[$i]);
}
</code></pre>

<p>Assim n√≥s temos diversos <em>handles</em> do <code>cURL</code> adicionados a um gerenciador de m√∫ltiplas requisi√ß√µes. Quando executarmos o
<code>$multiHandle</code>, todas as requisi√ß√µes ser√£o feitas em paralelo. Maravilha, n√£o √© mesmo?</p>

<p>Infelizmente n√£o √© t√£o simples assim. N√£o basta fazer um <code>curl_multi_exec</code> e receber um array de respostas. A fun√ß√£o
<code>curl_multi_exec</code> inicia as requisi√ß√µes, por√©m n√£o bloqueia o c√≥digo, ou seja, n√≥s precisamos ficar em um <em>loop</em> verificando
se todas as requisi√ß√µes j√° foram feitas. Algo como:</p>

<pre><code class="php">do {
    $result = curl_multi_exec($multiHandle, $numberOfMissingHandles);
} while ($numberOfMissingHandles &gt; 0);

// Processar respostas
</code></pre>

<p>A vari√°vel <code>$numberOfMissingHandles</code> √© passada por refer√™ncia e √© preenchida com o n√∫mero dos <em>handles</em> que faltam ser
resolvidos. Em outras palavras, enquanto esse valor n√£o chegar a 0, temos requisi√ß√µes sendo processadas.</p>

<p>Depois de sair desse <em>loop</em>, podemos recuperar as respostas de todas as requisi√ß√µes, ent√£o voltamos para a tarefa f√°cil:</p>

<pre><code class="php">// Por isso armazenamos o array de $handles
foreach ($handles as $handle) {
    // Usamos curl_multi_getcontent para recuperar a resposta
    // de cada um dos handles que foi executado pelo curl_multi_exec
    $response = curl_multi_getcontent($handle);
    curl_multi_remove_handle($multiHandle, $handle);
    curl_close($handle);

    $movieData = json_decode($response, true);
    var_dump($movieData);
}
</code></pre>

<p>Com isso n√≥s atingimos o objetivo de realizar todas as requisi√ß√µes de uma vez e s√≥ depois ler as respostas.</p>

<h3 id="mal-uso-de-recursos">Mal uso de recursos</h3>

<p>O problema da nossa abordagem √© que a fun√ß√£o <code>curl_multi_exec</code> retorna imediatamente, sem esperar por nenhuma atividade
nos <em>handles</em>, ou seja, se as requisi√ß√µes forem demoradas ou houverem muitas requisi√ß√µes (ou ambos), esse <em>loop</em> vai ser
executado de forma muito r√°pida, por muito tempo. Isso vai fazer com que o uso de CPU v√° ao topo, atrasando inclusive o
processo de realizar requisi√ß√µes, afinal de contas o sistema operacional precisa destinar certos recursos para essa tarefa.</p>

<p>Para mitigar esse problema, podemos usar uma fun√ß√£o chamada <code>curl_multi_select</code>. Ela √© semelhante √† <code>stream_select</code> que
vimos no post sobre <a href="/2020-09-16-php-assincrono-de-forma-nativa/">PHP ass√≠ncrono</a>. Essa fun√ß√£o espera que alguma
atividade aconte√ßa nos handles que estamos utilizando. A diferen√ßa √© que ela n√£o recebe um array, mas sim o nosso
<code>$multiHandle</code>. Ent√£o tudo que temos de informa√ß√£o √© quantos <em>handles</em> possuem atividade no momento, mas n√£o quais deles.
Mas tudo bem, j√° que o nosso prop√≥sito √© ler todos apenas no final.</p>

<p>A fun√ß√£o <code>curl_multi_select</code> deve ser chamada ap√≥s o <code>curl_multi_exec</code>, j√° que √© essa que inicia as requisi√ß√µes efetivamente.
Ent√£o o nosso primeiro <em>loop</em> ficaria assim:</p>

<pre><code class="php">do {
    $result = curl_multi_exec($multiHandle, $numberOfMissingHandles);
    $descriptorsCount = curl_multi_select($multiHandle);
} while ($numberOfMissingHandles &gt; 0);
</code></pre>

<p>Onde <code>$descriptorsCount</code> √© o n√∫mero de handles que possuem alguma atividade nesse exato momento. Caso esse n√∫mero seja
<code>-1</code>, significa que aconteceu algum erro.</p>

<p>Dessa forma esse <em>loop</em> ser√° executado menos vezes e em um intervalo maior, ou seja, menos CPU ser√° consumida.</p>

<h3 id="tratamento-de-erros">Tratamento de erros</h3>

<p>Falando em erros, nosso c√≥digo est√° supondo que tudo vai correr bem. Nesse primeiro <em>loop</em> n√≥s precisamos realizar algumas
verifica√ß√µes. Ent√£o no final, teremos algo como:</p>

<pre><code class="php">do {
    $result = curl_multi_exec($multiHandle, $numberOfMissingHandles);
    if ($result !== CURLM_OK) { // CURLM_OK √© uma constante que indica sucesso nesse caso
        throw new RuntimeException('Error executing all the requests', $result);
    }

    $descriptorsCount = curl_multi_select($multiHandle);
    if ($descriptorsCount === -1) {
        throw new RuntimeException('Error checking for activity');
    }
} while ($numberOfMissingHandles);
</code></pre>

<h3 id="c%C3%B3digo-final">C√≥digo final</h3>

<p>Com isso finalizamos todo o processamento necess√°rio para realizar requisi√ß√µes paralelas com PHP. O c√≥digo completo vai
se parecer com isso:</p>

<pre><code class="php">&lt;?php

$handle = curl_init('https://swapi.dev/api/films/');
curl_setopt($handle, CURLOPT_RETURNTRANSFER, true);
$response = curl_exec($handle);
curl_close($handle);

$data = json_decode($response, true);
$movies = $data['results'];

$multiHandle = curl_multi_init();

$handles = [];
foreach ($movies as $i =&gt; $movie) {
    $url = str_replace('http:', 'https:', $movie['url']);
    $handles[$i] = curl_init($url);
    curl_setopt($handles[$i], CURLOPT_RETURNTRANSFER, true);
    curl_multi_add_handle($multiHandle, $handles[$i]);
}

do {
    $result = curl_multi_exec($multiHandle, $numberOfMissingHandles);
    if ($result !== CURLM_OK) {
        throw new RuntimeException('Error executing all the requests', $result);
    }

    $descriptorsCount = curl_multi_select($multiHandle);
    if ($descriptorsCount === -1) {
        throw new RuntimeException('Error checking for activity');
    }
} while ($numberOfMissingHandles &gt; 0);

foreach ($handles as $handle) {
    $response = curl_multi_getcontent($handle);
    curl_multi_remove_handle($multiHandle, $handle);
    curl_close($handle);

    $movieData = json_decode($response, true);
    var_dump($movieData);
}
</code></pre>

<p>Esse c√≥digo provavelmente pode ser refatorado para torn√°-lo um pouco mais leg√≠vel, mas acredito que a l√≥gica por tr√°s dele
tenha ficado clara. Caso contr√°rio, voc√™ pode usar a sess√£o de coment√°rios dessa p√°gina para fazer perguntas.</p>

<h2 id="benchmarks">Benchmarks</h2>

<p>Agora que temos 2 vers√µes de c√≥digo que resolvem o mesmo problema de formas diferentes, podemos testar a sua performance.
Para quem usa sistemas <em>Unix</em> (<em>Linux</em> ou <em>Mac</em>) existe um comando chamado <code>time</code> que √© muito √∫til para verifica√ß√µes simples
como essas.</p>

<p>A primeira vers√£o do nosso c√≥digo (bloqueante) gera essa informa√ß√£o quando executo o seguinte comando (sendo <code>star-wars.php</code>o nome do nosso arquivo):</p>

<pre><code class="bash">$ time php star-wars.php

php star-wars.php  0.14s user 0.04s system 2% cpu 7.186 total
</code></pre>

<p>Basicamente, um pouco mais de 7 segundos foram necess√°rios para executar todas as requisi√ß√µes.</p>

<p>J√° com a vers√£o final do c√≥digo, temos a seguinte sa√≠da:</p>

<pre><code class="bash">$ time php star-wars.php

php star-wars.php  0.14s user 0.04s system 6% cpu 2.387 total
</code></pre>

<p>Ou seja, pouco mais de 2 segundos (quase 5 segundos a menos). √â uma baita diferen√ßa para um exemplo t√£o simples, n√£o acha?</p>

<p>Agora um √∫ltimo teste, comentando a parte referente ao <code>curl_multi_select</code>:</p>

<pre><code class="bash">$ time php star-wars.php

php star-wars.php  0.50s user 0.70s system 49% cpu 2.421 total
</code></pre>

<p>Repare que o uso de CPU subiu muito. De algo pr√≥ximo de 6% para quase 50%. Esse √© o prop√≥sito da chamada da fun√ß√£o
<code>curl_multi_select</code>.</p>

<h2 id="conclus%C3%A3o">Conclus√£o</h2>

<p>Assim como j√° foi citado no post sobre <a href="/2020-09-16-php-assincrono-de-forma-nativa/">PHP ass√≠ncrono</a>, existem
v√°rias ferramentas que facilitam (e muito) o trabalho de realizar requisi√ß√µes HTTP paralelas com PHP. Guzzle √© uma √≥tima
op√ß√£o para isso.</p>

<p>Mas seguindo o que citei no <a href="/2020-04-23-principios-ou-ferramentas-o-que-estudar/">post sobre aprendizado</a>, eu penso como
Richard Feynman (Nobel de f√≠sica): ‚ÄúO que eu n√£o consigo criar, eu n√£o entendo‚Äù. Ent√£o antes de utilizar uma ferramenta
que realiza o trabalho para mim, eu gosto de saber como realizar este trabalho sem ela. Com isso, se algum problema
acontecer com a biblioteca, por exemplo, eu vou estar mais preparado para resolv√™-lo j√° que entendo um pouco melhor como as coisas funcionam.</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[PHP ass√≠ncrono de forma nativa]]></title>
            <link href="https://dias.dev//2020-09-16-php-assincrono-de-forma-nativa/"/>
            <updated>2020-09-16T00:00:00+00:00</updated>
            <id>https://dias.dev//2020-09-16-php-assincrono-de-forma-nativa/</id>
            <content type="html"><![CDATA[<p>Realizar acesso a streams √© uma tarefa relativamente comum para devs PHP. Seja lendo e escrevendo em arquivos, fazendo requisi√ß√µes HTTP, etc.</p>

<p>Opera√ß√µes de I/O s√£o custosas e levam algum tempo para executar. Quando temos diversas opera√ß√µes desse tipo, uma t√©cnica que pode ajudar (e muito) na performance da aplica√ß√£o √© realiz√°-las de forma ass√≠ncrona.</p>

<h2 id="acesso-a-streams">Acesso a streams</h2>

<p>Antes de falar sobre t√©cnicas e fun√ß√µes que permitem a programa√ß√£o ass√≠ncrona, √© importante saber como normalmente n√≥s trabalhamos com I/O.</p>

<p>Acesso a arquivos, requisi√ß√µes HTTP, sockets e muito mais pode ser feito atrav√©s de <a href="https://php.net/streams">streams</a>. Um stream √© basicamente um fluxo de dados, sendo que a origem desse fluxo pode variar (vide o in√≠cio desse par√°grafo). Quando utilizamos fun√ß√µes como <code>file_get_contents</code>, <code>fopen</code>, <code>fgets</code>, e as demais, estamos trabalhando com streams do PHP.</p>

<h2 id="programa%C3%A7%C3%A3o-ass%C3%ADncrona">Programa√ß√£o ass√≠ncrona</h2>

<p>Se voc√™ n√£o est√° familiarizado com o termo "programa√ß√£o ass√≠ncrona", recomendo assistir este v√≠deo antes de continuar o artigo:</p>

<p><a href="https://youtu.be/zLfXPSeCkB8">Programa√ß√£o Ass√≠ncrona vs Programa√ß√£o Paralela</a></p>

<p>Entendido o que √© programa√ß√£o ass√≠ncrona, como podemos fazer acesso a streams de forma ass√≠ncrona utilizando PHP sem nenhuma extens√£o ou biblioteca externa? Ser√° poss√≠vel?</p>

<h2 id="eventos">Eventos</h2>

<p>Programa√ß√£o orientada a eventos n√£o √© novidade e n√≥s utilizamos muito na web. Para agir quando um bot√£o for clicado, ou quando um texto for digitado em um <code>input</code> n√≥s utilizamos eventos no JavaScript. Eventos podem acontecer a qualquer momento ent√£o sua natureza √© ass√≠ncrona. Mas ser√° poss√≠vel fazer algo parecido do lado do PHP?</p>

<p>Antes de falar do PHP em si, acho v√°lido citar que o sistema operacional j√° trabalha com chamadas ass√≠ncronas. Diversos eventos acontecem durante a execu√ß√£o do seu sistema, e h√° c√≥digo reagindo a estes eventos o tempo todo. Utilizando PHP n√≥s podemos acessar algumas dessas funcionalidades do sistema operacional</p>

<h3 id="fun%C3%A7%C3%A3o-stream_select">Fun√ß√£o stream_select</h3>

<p>Uma fun√ß√£o n√£o muito comum para n√≥s que trabalhamos com PHP √© a <a href="https://php.net/stream_select">stream_select</a>. Essa fun√ß√£o nos permite "observar" modifica√ß√µes que possam acontecer em streams. O probelma √© que ela n√£o √© nada f√°cil de se entender, ent√£o vou tentar tornar este processo menos doloroso para voc√™.</p>

<h2 id="cen%C3%A1rio">Cen√°rio</h2>

<p>Imagine que para executar uma tarefa n√≥s precisemos ler 5 arquivos distintos e depois realizar algum processamento. Normalmente utilizando PHP n√≥s poder√≠amos fazer algo como:</p>

<pre><code class="php">&lt;?php

$conteudoDoArquivo1 = file_get_contents('arquivo1.txt');
$conteudoDoArquivo2 = file_get_contents('arquivo2.txt');
$conteudoDoArquivo3 = file_get_contents('arquivo3.txt');
$conteudoDoArquivo4 = file_get_contents('arquivo4.txt');
$conteudoDoArquivo5 = file_get_contents('arquivo5.txt');

// Processar os 5 arquivos
</code></pre>

<p>O problema nessa abordagem √© √≥bvio: Antes de ler o <code>arquivo2.txt</code> precisamos terminar de ler todo o conte√∫do de <code>arquivo1.txt</code>. Enquanto o computador espera, n√≥s j√° poder√≠amos estar sendo os demais arquivos e os processando de forma individual.</p>

<p>Quando temos uma opera√ß√£o de I/O (acesso a arquivos, rede, etc) sendo realizada de forma s√≠ncrona, o processador fica ocioso enquanto a opera√ß√£o n√£o √© executada. Ou seja, enquanto o arquivo estiver sendo carregado, o processador fica esperando, sem fazer nada. √â exatamente isso que queremos evitar. Queremos garantir que ele continue trabalhando enquanto o arquivo n√£o estiver pronto para leitura.</p>

<h2 id="solu%C3%A7%C3%A3o-com-assincronicidade">Solu√ß√£o com assincronicidade</h2>

<p>Para resolver essa situa√ß√£o, podemos utilizar a fun√ß√£o <code>stream_select</code> que observa altera√ß√µes no status de uma lista de streams, ou seja, quando algum dos arquivos estiver pronto para leitura, essa fun√ß√£o nos avisar√°. E √© interessante citar que a leitura n√£o necessariamente vai acontecer em ordem. O sistema operacional pode abrir o <code>arquivo3.txt</code> mais r√°pido do que o <code>arquivo1.txt</code>, por exemplo. Neste cen√°rio, vamos process√°-lo logo, sem ficar esperando os arquivos anteriores.</p>

<pre><code class="php">&lt;?php

$listaDeStreamsDeArquivos = [
    fopen('arquivo1.txt', 'r'),
    fopen('arquivo2.txt', 'r'),
    fopen('arquivo3.txt', 'r'),
    fopen('arquivo4.txt', 'r'),
    fopen('arquivo5.txt', 'r'),
];

foreach ($listaDeStreamsDeArquivos as $streamDeArquivo) {
    stream_set_blocking($streamDeArquivo, false);
}

do {
    $streamsParaLer = $listaDeStreamsDeArquivos;
    $streamsComNovidades = stream_select($streamsParaLer, $write, $except, 1, 0);

    if ($streamsComNovidades === false) {
        echo 'Erro inesperado';
        exit(1);
    }

    if ($streamsComNovidades === 0) {
        continue;
    }

    foreach ($streamsParaLer as $indice =&gt; $streamDeArquivo) {
        $conteudo = stream_get_contents($streamDeArquivo);
        // processa o conte√∫do do arquivo
        if (feof($streamDeArquivo)) {
            fclose($streamDeArquivo);
            unset($listaDeStreamsDeArquivos[$indice]);
        }
    }
} while ($listaDeStreamsDeArquivos !== []);
</code></pre>

<h3 id="explica%C3%A7%C3%A3o">Explica√ß√£o</h3>

<h4 id="prepara%C3%A7%C3%A3o">Prepara√ß√£o</h4>

<p>Como eu disse, n√£o √© muito f√°cil, ent√£o vamos por partes. Primeiro abrimos todos os arquivos que queremos ler com o <code>fopen</code>. At√© a√≠ sem segredo. Depois, informamos com a fun√ß√£o <code>stream_set_blocking</code> que o recurso deve ser aberto em modo n√£o-bloqueante - assim, o processo que acessa o arquivo n√£o bloquear√° a CPU por causar um estado de espera ao tentar acessar os arquivos.</p>

<p>Nesse ponto, temos um array com 5 recursos abertos para podermos trabalhar com estes streams. Ent√£o analisando o este peda√ßo de c√≥digo:</p>

<pre><code class="php">$listaDeStreamsDeArquivos = [
    fopen('arquivo1.txt', 'r'),
    fopen('arquivo2.txt', 'r'),
    fopen('arquivo3.txt', 'r'),
    fopen('arquivo4.txt', 'r'),
    fopen('arquivo5.txt', 'r'),
];

var_dump($listaDeStreamsDeArquivos);
</code></pre>

<p>Ter√≠amos a seguinte sa√≠da:</p>

<pre><code class="php">array(5) {
  [0]=&gt;
  resource(5) of type (stream)
  [1]=&gt;
  resource(6) of type (stream)
  [2]=&gt;
  resource(7) of type (stream)
  [3]=&gt;
  resource(8) of type (stream)
  [4]=&gt;
  resource(9) of type (stream)
}
</code></pre>

<p>Depois disso que come√ßa a parte dif√≠cil. A chamada para a fun√ß√£o <code>stream_select</code> deve estar em um loop, porque pode acontecer de nem todos os streams estarem prontos para leitura logo de cara.</p>

<h4 id="par%C3%A2metros">Par√¢metros</h4>

<p>Segundo detalhe importante: os par√¢metros. O 3 primeiros par√¢metros dessa fun√ß√£o s√£o passados por refer√™ncia. Por isso o segundo e terceiro s√£o vari√°veis que n√≥s nem t√≠nhamos definido ainda. O primeiro par√¢metro √© a lista de streams que queremos observar para ler. O segundo √© para escrita. J√° o terceiro, menos comum, √© para dados excepcionais que possuem maior prioridade. Os 2 √∫ltimos par√¢metros s√£o sobre timeout.</p>

<p>O par√¢metro passado como 1 indica o n√∫mero de segundos que essa fun√ß√£o deve esperar receber uma notifica√ß√£o de novidade nos streams at√© "desistir", ou seja, o timeout. Esse √© o motivo pelo qual ela deve estar em um loop. Se esse tempo passar e n√≥s n√£o tivermos novidade, devemos tentar de novo depois. Caso algum (n√£o necessariamente todos) stream esteja pronto antes desse 1 segundo, a fun√ß√£o retornar√°. O √∫ltimo par√¢metro, que informamos como 0, indica o tempo em microsegundos para timeout.</p>

<h4 id="retorno-e-leitura">Retorno e leitura</h4>

<p>Agora vamos falar do retorno. Essa fun√ß√£o retorna o n√∫mero de streams que cont√©m modifica√ß√µes. No nosso caso, vai informar quantos arquivos est√£o prontos para leitura. Por√©m em caso de erro essa fun√ß√£o nos retorna o valor <code>false</code>.</p>

<p>Al√©m disso, os par√¢metros que n√≥s passamos podem ter sido modificados. Por isso eu realizo uma c√≥pia da lista original de streams em <code>$arquivosParaLer = $listaDeArquivos;</code>. Ap√≥s o retorno da fun√ß√£o, o par√¢metro passado vai conter apenas os streams que possuem novidades, ou seja, no nosso caso, os arquivos que est√£o prontos para leitura.</p>

<p>Para exemplificar, vamos supor que na primeira execu√ß√£o do loop todos os arquivos j√° estejam dispon√≠veis. Nesse caso, analisando os valores das vari√°veis, podemos entender o que est√° acontecendo. Analisando ent√£o o valor de <code>$streamsComNovidades</code>, ter√≠amos <code>int(5)</code> como resultado deste cen√°rio.</p>

<p>J√° analisando ambos arrays de streams (<code>$listaDeStreamsDeArquivos</code> e <code>$streamsParaLer</code>), ter√≠amos exatamente o mesmo resultado:</p>

<pre><code class="php">array(5) {
  [0]=&gt;
  resource(5) of type (stream)
  [1]=&gt;
  resource(6) of type (stream)
  [2]=&gt;
  resource(7) of type (stream)
  [3]=&gt;
  resource(8) of type (stream)
  [4]=&gt;
  resource(9) of type (stream)
}
array(5) {
  [0]=&gt;
  resource(5) of type (stream)
  [1]=&gt;
  resource(6) of type (stream)
  [2]=&gt;
  resource(7) of type (stream)
  [3]=&gt;
  resource(8) of type (stream)
  [4]=&gt;
  resource(9) of type (stream)
}
</code></pre>

<p>Agora caso na primeira execu√ß√£o tiv√©ssemos apenas 3 dos 5 arquivos prontos, e analis√°ssemos os 3 valores anteriores, ter√≠amos ter algo como:</p>

<pre><code class="php">var_dump($streamsComNovidades, $listaDeStreamsDeArquivos, $streamsParaLer);
</code></pre>

<pre><code class="php">int(3)
array(5) {
  [0]=&gt;
  resource(5) of type (stream)
  [1]=&gt;
  resource(6) of type (stream)
  [2]=&gt;
  resource(7) of type (stream)
  [3]=&gt;
  resource(8) of type (stream)
  [4]=&gt;
  resource(9) of type (stream)
}
array(3) {
  [0]=&gt;
  resource(5) of type (stream)
  [2]=&gt;
  resource(7) of type (stream)
  [4]=&gt;
  resource(9) of type (stream)
}
</code></pre>

<p>Onde, nesse caso, o segundo array exibido √© o de <code>$streamsParaLer</code>, e possui apenas os 3 arquivos prontos para leitura.</p>

<p>Sendo assim, posso percorrer este array tendo a certeza de que h√° dados para ler e processar. Mas n√£o h√° garantia de que todo o conte√∫do do arquivo estar√° l√°, por isso verifico se cheguei ao fim do arquivo com <code>feof</code>. Para arquivos pequenos, via de regra, todo o conte√∫do vir√° de uma vez s√≥, mas n√£o conte com isso e prepare seu c√≥digo para ler at√© mesmo um √∫nico byte por vez.</p>

<p>Ap√≥s ler todo o arquivo, devemos fech√°-lo. Mas um outro detalhe importante √© que eu tamb√©m o removo da lista original de streams que queremos ler. Fa√ßo isso para que caso seja necess√°ria uma nova itera√ß√£o no loop, ou seja, caso nem todos os arquivos tenham sido lidos, eu n√£o tente ler novamente os arquivos que j√° foram lidos e fechados.</p>

<p>Com isso temos nossa condi√ß√£o de sa√≠da do loop. Quando todos os arquivos tiverem sido removidos e minha lista estiver vazia, sei que processei todos os arquivos.</p>

<p>PS.: A fun√ß√£o <code>stream_set_blocking</code> s√≥ surte efeito com arquivos e sockets. Os outros wrappers, com esta t√©cnica, n√£o podem ser lidos de forma ass√≠ncrona e n√£o bloqueante.</p>

<h2 id="conceitos">Conceitos</h2>

<p>Esse c√≥digo obviamente pode ser refatorado para torn√°-lo um pouco mais leg√≠vel, mas acredito que a l√≥gica por tr√°s dele tenha ficado clara. Caso contr√°rio, voc√™ pode usar a sess√£o de coment√°rios dessa p√°gina para fazer perguntas.</p>

<p>O que n√≥s escrevemos de forma rudimentar aqui pode ser visto como uma implementa√ß√£o do que √© conhecido como <em>Event Loop</em>, ou loop de eventos. Voc√™ provavelmente j√° ouviu esse termo se estuda sobre a runtime Node.js.</p>

<p>Claro que essa implementa√ß√£o n√£o √© completa ou otimizada, mas atende nosso prop√≥sito: ler arquivos conforme eles fiquem prontos para leitura. Dessa forma n√≥s vamos pedir para que o sistema operacional prepare todos os arquivos para leitura de uma s√≥ vez.</p>

<p>As vantagens nessa abordagem ass√≠ncrona s√£o mais percept√≠veis quando temos opera√ß√µes mais lentas como chamadas HTTP, por exemplo. Mas isso aumentaria a complexidade do c√≥digo para este artigo.</p>

<h2 id="conclus%C3%A3o">Conclus√£o</h2>

<p>Claro que o PHP j√° possui ferramentas que realizam este trabalho de forma muito mais simples. ReactPHP com seu pacote de Streams √© um √≥timo exemplo.</p>

<p>Mas seguindo o que citei no post sobre aprendizado, eu penso como <a href="https://pt.wikipedia.org/wiki/Richard_Feynman">Richard Feynman</a> (Nobel de f√≠sica): "O que eu n√£o consigo criar, eu n√£o entendo". Ent√£o antes de utilizar uma ferramenta que realiza o trabalho para mim, eu gosto de saber como realizar este trabalho sem ela. Com isso, se algum problema acontecer com a biblioteca, por exemplo, eu vou estar mais preparado para resolv√™-lo j√° que eu entendo um pouco melhor como as coisas funcionam.</p>

<p>Se voc√™ quiser aprender mais sobre algum desses assuntos, pode considerar assinar a Alura. L√° existem treinamentos (gravados por mim) sobre PHP Streams, ReactPHP e muito mais. Caso pretenda estudar na Alura, <a href="https://www.alura.com.br/promocao/diasdedev">neste link</a> voc√™ tem um desconto de 10%.</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Princ√≠pios ou Ferramentas - O que estudar]]></title>
            <link href="https://dias.dev//2020-04-23-principios-ou-ferramentas-o-que-estudar/"/>
            <updated>2020-04-23T00:00:00+00:00</updated>
            <id>https://dias.dev//2020-04-23-principios-ou-ferramentas-o-que-estudar/</id>
            <content type="html"><![CDATA[<h2 id="o-mundo-de-desenvolvimento">O mundo de desenvolvimento</h2>

<p>Quando decidimos entrar para o mundo de desenvolvimento, sofremos um bombardeio de informa√ß√µes e novos termos.</p>

<p>Linguagens, frameworks, bibliotecas, paradigmas, princ√≠pios, etc. N√£o √© f√°cil saber que caminho seguir e o que estudar primeiro.</p>

<p>Obviamente n√£o existe alternativa certa ou errada, ent√£o nesse post eu vou somente expor minha opini√£o. N√£o tome o que for dito aqui como verdade, mas sim reflita e analise se faz sentido para voc√™.</p>

<h2 id="mercado-de-trabalho">Mercado de trabalho</h2>

<p>√â ineg√°vel que para atuar no mercado de trabalho n√≥s precisamos de muito mais conhecimento do que nos √© passado inicialmente em qualquer livro, curso ou post de blog. Somente a experi√™ncia e viv√™ncia v√£o nos dar a bagagem necess√°ria para resolver os problemas e gerar valor para os clientes.</p>

<p>Mas isso n√£o quer dizer que n√≥s s√≥ devamos estudar o que o emprego atual nos pede. Pelo contr√°rio. Se n√≥s estudamos al√©m do que nos √© pedido, ou no caso do primeiro emprego, estudamos antes de algo nos ser cobrado, quando uma oportunidade ou problema surgir, as chances ser√£o muito maiores de estarmos prontos.</p>

<p>Al√©m de solucionar os problemas ou aproveitar as oportunidades, estudar nos faz conhecer melhores formas de atingir estes objetos, nos dando vantagens competitivas sobre quem simplesmente "resolve o problema".</p>

<p>Ok, at√© aqui s√≥ usei o termo "estudo", mas devemos estudar o que? Ferramentas espec√≠ficas ou princ√≠pios gen√©ricos que podem ser aplicados a v√°rias ferramentas?</p>

<h2 id="linguagens%2C-bibliotecas-e-frameworks">Linguagens, bibliotecas e frameworks</h2>

<p>Se voc√™ quer entrar para a √°rea de desenvolvimento e acredita que seu trabalho vai ser escrever c√≥digo, voc√™ est√° enganado(a). O nosso trabalho √© solucionar problemas. C√≥digo √© uma ferramenta, um meio para o fim. Linguagens de programa√ß√£o s√£o apenas ferramentas para n√≥s resolvermos determinados problemas. Frameworks e bibliotecas nada mais s√£o do que ferramentas de "alto n√≠vel", que nos trazem algumas facilidades e alguns problemas gen√©ricos j√° resolvidos.</p>

<p>Ah, Vinicius, quer dizer que a escolha da linguagem de programa√ß√£o n√£o √© importante? Longe disso! A linguagem de programa√ß√£o √© uma ferramenta muito importante para a solu√ß√£o do problema e existem linguagens diferentes para solucionar problemas diferentes. O ponto √©: elas s√£o ferramentas.</p>

<p>Se n√≥s tivermos isso em mente, acabamos deixando de lado aquele tipo de briga de "minha linguagem √© melhor que a sua" ou "meu framework √© melhor do que o seu". Discuss√µes desse tipo s√£o interessantes e at√© emocionantes (eu mesmo adoro falar mal de Laravel ;-p), mas n√≥s n√£o podemos nos cegar achando que realmente h√° uma ferramenta melhor do que outra e ponto.</p>

<p><strong>N√£o existe bala de prata</strong> (solu√ß√£o pra qualquer problema)!</p>

<p>Assim como cada linguagem resolve um problema, cada framework tem um prop√≥sito, uma identidade. Voc√™ vai acabar se identificando mais com um ou outro, mas n√£o fa√ßa com que isso seja o foco de todo o seu estudo e trabalho. Conhecer muito bem a linguagem e o framework que voc√™ utiliza para trabalhar √© importante, mas √© o primeiro passo?</p>

<h2 id="paradigmas">Paradigmas</h2>

<p>Como eu citei no √∫ltimo par√°grafo, "cada linguagem resolve um problema", e cada linguagem faz isso de um jeito. Existem diversos paradigmas de programa√ß√£o, dentre eles:</p>

<ul>
<li>Declarativos

<ul>
<li>Programa√ß√£o funcional</li>
</ul></li>
<li>Imperativos

<ul>
<li>Programa√ß√£o procedural</li>
<li>Programa√ß√£o orientada a objetos</li>
</ul></li>
</ul>

<p>Entender bem as vantagens e desvantagens de cada paradigma e as diferen√ßas entre eles √© crucial para aprender qualquer linguagem de programa√ß√£o. Diversas linguagens modernas s√£o o que chamamos de "multi-paradigma", ou seja, nos permitem utilizar mais de um paradigma em nosso c√≥digo, como procedural e Orientado a Objetos, funcional e Orientado a objetos, funcional e procedural, etc.</p>

<p>Este post (em ingl√™s) fala com bem mais de detalhes sobre os principais paradigmas de programa√ß√£o e alguns exemplos de linguagens:</p>

<p>https://dev.to/vplentinax/classification-of-computer-languages-ii-2201</p>

<p>Se voc√™ (assim como eu) prefere v√≠deos, pode conferir este aqui:</p>

<iframe width="560" height="315" src="https://www.youtube-nocookie.com/embed/asFnD-JLFWs" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

<h2 id="princ%C3%ADpios">Princ√≠pios</h2>

<p>Cada paradigma de programa√ß√£o (e suas respectivas linguagens suportadas) sugerem diversos princ√≠pios para que seu c√≥digo seja de f√°cil manuten√ß√£o, test√°vel, leg√≠vel, etc.</p>

<p>Princ√≠pios muito comuns da programa√ß√£o orientada a objetos (paradigma que estudo mais a fundo) s√£o:</p>

<ul>
<li><a href="https://youtu.be/7IXeLhpjk6g">Tell, don't ask</a>;</li>
<li>Least astonishment;</li>
<li>*<a href="https://youtu.be/6mfX6863SAk">Fail fast</a>;</li>
<li>*Early return;</li>
<li><a href="https://amzn.to/3Eplrm2">SOLID</a> (conjunto de princ√≠pios);</li>
<li>etc.</li>
</ul>

<p><em>* Princ√≠pios tamb√©m aplic√°veis a outros paradigmas</em></p>

<p>Estudar os princ√≠pios referentes ao paradigma que voc√™ escolher √© fundamental para manter seu c√≥digo saud√°vel. N√£o aplic√°-los pode dar a falsa impress√£o de que voc√™ est√° sendo mais produtivo(a), mas a longo prazo a verdade sempre surge e n√≥s acabamos nos arrependendo.</p>

<h2 id="padr%C3%B5es">Padr√µes</h2>

<p>Tendo entendido o que s√£o paradigmas e que cada um deles possui princ√≠pios, baseando-se nestes princ√≠pios surgem padr√µes. Os famosos <em>Padr√µes de Projeto</em> s√£o basicamente solu√ß√µes padr√µes para problemas gen√©ricos. S√£o sugest√µes de como proceder em determinadas situa√ß√µes.</p>

<p>Certos problemas s√£o t√£o comuns de acontecer, que pessoas atrav√©s dos anos j√° estudaram e discutiram muito sobre as melhores formas de resolv√™-los.</p>

<p>Alguns dos padr√µes mais famosos seguindo os princ√≠pios da programa√ß√£o orientada a objetos s√£o:</p>

<ul>
<li><a href="https://amzn.to/3pIqBDR">Padr√µes da "turma dos 4" (<em>Gang of Four "GoF"</em>)</a>

<ul>
<li>24 padr√µes (super famosos) separados em 3 categorias</li>
</ul></li>
<li><a href="https://youtu.be/z4fxFU5MoAA">Object calisthenics</a>

<ul>
<li>9 regras para exercitar em seus c√≥digos</li>
</ul></li>
<li><a href="https://amzn.to/3ojA9Wf">Sugeridos pelo "desenvolvimento guiado a dom√≠nio" (<em>DDD</em>)</a>

<ul>
<li>Conhecidos como blocos de constru√ß√£o do <em>DDD</em> como <em>Entity</em>, <em>Value Object</em>, etc.</li>
</ul></li>
</ul>

<p>Como citado no in√≠cio do cap√≠tulo, cada padr√£o visa resolver problemas bem comuns e gen√©ricos, e devem ser aplicados quando fazem sentido. Os padr√µes exemplificados est√£o em n√≠veis bem diferentes de sua aplica√ß√£o e explic√°-los individualmente √© imposs√≠vel atrav√©s de um √∫nico post.</p>

<h2 id="o-que-estudar-primeiro%3F">O que estudar primeiro?</h2>

<p>Como foi dito l√° no in√≠cio, esse post √© para que eu expressar <strong>minha opini√£o</strong>.</p>

<p>Na minha vis√£o, devemos estudar o b√°sico dos paradigmas de programa√ß√£o, entendendo qual problema cada um resolve e em que casos s√£o usados. Ap√≥s entend√™-los, normalmente nos aprofundamos em 1 deles, mas existe um por√©m:
Antes de aprender Orienta√ß√£o a Objetos, √© importante conhecermos o paradigma procedural, visto que o primeiro surgiu para resolver determinados problemas do √∫ltimo.</p>

<p>Para estudar um dos paradigmas, obviamente precisamos de uma linguagem de programa√ß√£o, ent√£o este estudo acontece em paralelo: Conhecemos uma linguagem enquanto conhecemos um paradigma.</p>

<p>Ap√≥s dominar razoavelmente bem os conceitos da linguagem e do paradigma em quest√£o, podemos come√ßar a estudar os princ√≠pios sugeridos, entendendo suas propostas, quais problemas resolvem, porque surgiram, etc.</p>

<p>Estes princ√≠pios, normalmente nos levam naturalmente para o estudo de alguns padr√µes. O estudo de padr√µes j√° √© um estudo mais avan√ßado, por√©m muito recompensante.</p>

<p>Se voc√™ tem um bom conhecimento de um paradigma (e consequentemente, uma linguagem), alguns de seus princ√≠pios e padr√µes, pode ser o momento de aprender a utilizar ferramentas que auxiliem no processo.</p>

<p>Frameworks e bibliotecas s√£o ferramentas que facilitam a resolu√ß√£o de problemas <strong>que voc√™ deveria saber resolver sem elas</strong>. Richard Feynman, ganhador do Nobel de f√≠sica, escreveu uma vez: ‚ÄúWhat I cannot create I do not understand‚Äù. Traduzindo: "O que eu n√£o consigo criar eu n√£o entendo".</p>

<p>Ent√£o antes de utilizar um framework, saiba resolver o problema sem ele. Antes de utilizar uma biblioteca mais espec√≠fica, saiba resolver o problema sem ela. Isso faz com que voc√™ consiga resolver um problema nas ferramentas, caso aconte√ßa.</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Programa√ß√£o procedural orientada a classes - Parte 2]]></title>
            <link href="https://dias.dev//2020-04-16-programacao-procedural-orientada-a-classes-parte-2/"/>
            <updated>2020-04-16T00:00:00+00:00</updated>
            <id>https://dias.dev//2020-04-16-programacao-procedural-orientada-a-classes-parte-2/</id>
            <content type="html"><![CDATA[<h2 id="design-de-c%C3%B3digo">Design de c√≥digo</h2>

<p>Uma vez eu ouvi uma frase mas n√£o me lembro o autor: "N√£o existe c√≥digo sem design. Existe c√≥digo com design ruim". Inclusive adaptei esta frase para "arquitetura" na primeira parte desta publica√ß√£o.</p>

<p>Antes de falarmos sobre as p√©ssimas decis√µes de design que tomamos, vamos falar sobre o que √© design de c√≥digo.</p>

<p>Uma analogia interessante foi feita pelo <a href="https://twitter.com/junior_grossi">Junior Grossi</a> em um workshop maravilhoso de qualidade de c√≥digo que fiz com ele. Foi mais ou menos assim (n√£o com essas exatas palavras):</p>

<p>"Podemos fazer uma analogia da arquitetura de software com a arquitetura de uma casa. Onde fica cada c√¥modo, como se encaixam juntos, etc. √â uma vis√£o de bem <strong>alto n√≠vel</strong>. J√° o design de c√≥digo pode ser considerado an√°logo aos m√≥veis de uma casa. √â uma vis√£o de mais <strong>baixo n√≠vel</strong> sobre nossas decis√µes sobre o c√≥digo".</p>

<p>Ent√£o, basicamente (beem basicamente), arquitetura diz respeito a como voc√™ vai separar sua aplica√ß√£o em camadas, por exemplo, onde cada camada pode ter sua responsabilidade bem definida. J√° o design de c√≥digo diz respeito a como voc√™ vai organizar suas classes e m√©todos em cada uma das camadas. Quais padr√µes voc√™ vai seguir, como cada classe vai se comportar sozinha ou em conjunto com suas respetivas depend√™ncias, etc.</p>

<h2 id="escolhas-corriqueiras">Escolhas corriqueiras</h2>

<p>Agora que j√° entendemos basicamente o que √© Design de C√≥digo, vamos falar sobre escolhas que fazemos frequentemente e que talvez n√£o sejam as mais interessantes sob a √≥tica da programa√ß√£o orientada a objetos, ou melhor, sob a √≥tica do design orientado a objetos.</p>

<p>Como j√° foi discutido no post anterior, √© muito comum termos um modelo an√™mico: Classes que apenas possuem <code>getters</code> e <code>setters</code>, ou seja, meros sacos de dados. Para quem j√° estudou C sabe que no fundo isso n√£o √© uma classe, mas sim uma <code>struct</code>.</p>

<p>O fato de termos modelos an√™micos onde classes que deveriam ser do nosso dom√≠nio na verdade acabam sem nenhuma regra de neg√≥cio, geralmente faz com que n√≥s transfiramos essas regras para lugares "errados" (entre aspas porque quem sou eu pra dizer o que √© certo ou errado?).</p>

<p>Que lugares errados seriam esses?</p>

<h2 id="helpers-ou-utils">Helpers ou Utils</h2>

<p>Quem nunca viu uma classe chamada <code>StringHelper</code> ou <code>DateUtils</code>? S√£o classes que claramente est√£o perdidas em nosso sistema. O que seria, no mundo real, um(a) <code>StringHelper</code>? Se n√£o existe no mundo real, tem certeza que deveria existir no c√≥digo?</p>

<p><img src="https://i.imgur.com/rc9OMWr.jpg" alt="Reflit√£o" /></p>

<p>Esse tipo de classe √© uma heran√ßa clara da programa√ß√£o procedural em nosso c√≥digo onde estamos separando o comportamento dos seus dados, quando a orienta√ß√£o a objetos tem todas as ferramentas necess√°rias para n√≥s os juntarmos.</p>

<h3 id="poss%C3%ADvel-solu%C3%A7%C3%A3o">Poss√≠vel solu√ß√£o</h3>

<p>Se voc√™ possui uma classe <code>StringHelper</code>, talvez ela esteja fazendo valida√ß√µes bem gen√©ricas. Nesse caso, nada mais justo do que transform√°-la em uma classe bem gen√©rica, como <code>String</code>. Nessa classe voc√™ pode ter comportamentos e verifica√ß√µes pertinentes a uma string em seu c√≥digo.</p>

<p>Mas na maioria das vezes as verifica√ß√µes nesse tipo de classe s√£o espec√≠ficas de regras de neg√≥cio. Ex.: Garantir que nome possua pelo menos 10 letras.</p>

<p>Se √© uma regra de neg√≥cio, deveria estar na classe de neg√≥cio. Talvez na classe <code>Pessoa</code>. Talvez numa classe mais espec√≠fica, como <code>Nome</code>. Depende do seu sistema.</p>

<h2 id="services-in%C3%BAteis">Services in√∫teis</h2>

<p><a href="https://amzn.to/39MBuNH">O livro do Eric Evans sobre DDD</a> √© certamente uma obra que revolucionou o mundo do desenvolvimento. Eu particularmente ainda n√£o o li, mas li <a href="https://amzn.to/2Q1bW8d">obras inspiradas por este livro</a>, ent√£o sei que: Neste livro foram definidos alguns conceitos sobre classes chamadas de <code>Services</code>.</p>

<p>Uma das poss√≠veis "categorias" desse tipo de classe √© <code>Application Service</code>. Este tipo de classe tem como prop√≥sito receber informa√ß√µes de fora do dom√≠nio do sistema (da web, linha de comando, etc) e orquestrar as chamadas a regras de dom√≠nio.</p>

<p>Um exemplo cl√°ssico:</p>

<pre><code class="php">&lt;?php

class AddUser
{
    private UserRepository $repository;
    private PasswordHasher $hasher;

    public function __construct(UserRepository $repository, PasswordHasher $hasher)
    {
        $this-&gt;repository = $repository;
        $this-&gt;hasher = $hasher;
    }

    public function execute(AddUserDto $data): void
    {
        $hashedPassword = $this-&gt;hasher
            -&gt;hash($data-&gt;password());
        $user = new User($data-&gt;email(), $hashedPassword);

        $this-&gt;repository-&gt;add($user);
    }
}
</code></pre>

<p>H√° pontos de melhoria nesse c√≥digo (sempre h√°), mas basicamente: Ele recebe os dados de algum mecanismo de entrega atrav√©s de um DTO (objeto de transfer√™ncia de dados, que serve basicamente para transferir dados entre camadas no sistema), e passa para o dom√≠nio que sabe cifrar a senha, armazenar o usu√°rio no reposit√≥rio, etc.</p>

<h3 id="problema-comum">Problema comum</h3>

<p>Essa defini√ß√£o de <code>Application Service</code> em algum momento foi tomada por algu√©m como "Classe obrigat√≥ria para adicionar <em>indire√ß√£o</em> desnecess√°ria no sistema".</p>

<p>Na pr√°tica √© muito comum vermos c√≥digo onde um Controller chama um m√©todo de uma classe com <code>Service</code> no nome, e esse m√©todo n√£o faz nada al√©m de chamar um m√©todo de outra classe. Essa chamada extra de um m√©todo √© conhecida como indire√ß√£o, de forma resumida.</p>

<p>Algo parecido com isso:</p>

<pre><code class="php">&lt;?php

class UserService
{
    private UserRepository $repository;

    public function __construct(UserRepository $repository)
    {
        $this-&gt;repository = $repository;
    }

    public function add(User $user): void
    {
        $this-&gt;repository-&gt;add($user);
    }

    // todos os outros m√©todos p√∫blicos que tamb√©m existem em UserRepository
}
</code></pre>

<p>Agora me responda: O que ganhamos ao ter a classe <code>UserService</code>? Ganhamos apenas mais indire√ß√µes em nosso sistema. Mais um lugar que nossa IDE vai nos fazer passar at√© chegar no c√≥digo que de fato executa algo.</p>

<p>Al√©m de parecerem ser classes conhecidas como <em>God classes</em>, j√° que aparentam fazer tudo no sistema, s√£o in√∫teis na pr√°tica.</p>

<p>Esse √© mais um exemplo de programa√ß√£o procedural sendo aplicada, onde temos apenas fun√ß√µes sem nenhum significado pro neg√≥cio agrupadas em uma classe que simplesmente chama outras fun√ß√µes.</p>

<p>Outra caracter√≠stica de programa√ß√£o procedural nesse caso √© que muito comumente temos m√©todos n√£o t√£o relacionados na mesma classe <code>Service</code>.</p>

<p>√â comum um <code>UserService</code> ter um m√©todo com uma chamada para salvar um usu√°rio e outro m√©todo para enviar um e-mail para ele. Responsabilidades que deveriam estar em classes separadas.</p>

<p>No canal <em>Dev Eficiente</em>, do Aberto Souza, tem um v√≠deo falando um pouco mais sobre o problema deste tipo de classe, mas sob uma outra √≥tica. Vale a pena conferir:</p>

<iframe width="560" height="315" src="https://www.youtube-nocookie.com/embed/szGb93_hXgI" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

<h2 id="camada-model-do-mvc">Camada Model do MVC</h2>

<p>Um ponto que tem levantado bastante discuss√£o em comunidades que participo √©: O que √© a camada <em>Model</em> no MVC?</p>

<p>Discutir sobre MVC √© assunto pra outro post, mas o que tenho visto como consenso √©: Camada que faz a persist√™ncia dos dados.</p>

<p>E a regra de neg√≥cio? Uma galera tem colocado nos <em>Controllers</em>. E a√≠? Se essa l√≥gica precisar ser reaproveitada, como fazemos? Como chamamos um <em>Controller</em> dentro de outro? Complicado, n√©?</p>

<p>Em nossos <em>Controllers</em> √© muito comum ver aquele c√≥digo super famoso da programa√ß√£o procedural cheio de IFs e verifica√ß√µes em tipos primitivos, sem nenhum significado para o neg√≥cio.</p>

<h3 id="padr%C3%B5es-arquiteturais">Padr√µes arquiteturais</h3>

<p>Para "resolver" esse problema, diversos padr√µes arquiteturais existem, e eu falei um pouquinho (bem pouquinho) sobre arquitetura nesse meu outro post: <a href="https://dias.dev/2020-04-10-o-que-e-arquitetura/">O que √© Arquitetura</a></p>

<h2 id="conclus%C3%A3o">Conclus√£o</h2>

<p>Por mais que a gente estude muito sobre ferramentas, frameworks, hypes e modinhas, os princ√≠pios da programa√ß√£o orientada a objetos mudam muito pouco e merecem MUITA aten√ß√£o.</p>

<p>Estude conceitos, princ√≠pios, padr√µes... Tudo isso vai poder ser aplicado naquele framework que foi lan√ßado semana passada e voc√™ est√° doido pra usar pra fazer um CRUD. Acredite.</p>

<p>Infelizmente eu ainda vejo muito c√≥digo utilizando estas "t√©cnicas" procedurais utilizando classes, e pessoas acreditando que isso √© desenvolver utilizando a programa√ß√£o orientada a objetos.</p>

<p>Voc√™ costuma ver c√≥digo assim no seu dia a dia? Compartilha aqui nos coment√°rios algum caso que voc√™ tenha visto recentemente.</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Programa√ß√£o procedural orientada a classes - Parte 1]]></title>
            <link href="https://dias.dev//2020-04-13-programacao-procedural-orientada-a-classes-parte-1/"/>
            <updated>2020-04-13T00:00:00+00:00</updated>
            <id>https://dias.dev//2020-04-13-programacao-procedural-orientada-a-classes-parte-1/</id>
            <content type="html"><![CDATA[<h2 id="farsa-da-programa%C3%A7%C3%A3o-orientada-a-objetos">Farsa da programa√ß√£o Orientada a Objetos</h2>

<p>Acredito que todos concordamos que a programa√ß√£o Orientada a Objetos torna nosso c√≥digo mais leg√≠vel e permite arquiteturas mais interessantes do que a programa√ß√£o procedural, al√©m de permitir recursos interessantes de reutiliza√ß√£o de c√≥digo.</p>

<p>Partindo desse pressuposto, tamb√©m acredito que seja inten√ß√£o de qualquer pessoa que trabalhe com desenvolvimento aprender mais e mais as t√©cnicas e boas pr√°ticas deste paradigma de programa√ß√£o.</p>

<p>O problema acontece quando a gente vem de um aprendizado de programa√ß√£o procedural e tenta aplicar as mesmas t√©cnicas fazendo uso de classes e objetos.</p>

<h2 id="exemplo-cl%C3%A1ssico">Exemplo cl√°ssico</h2>

<p>H√° um exemplo muito cl√°ssico de um c√≥digo que claramente, embora utilize classes e objetos, √© procedural:</p>

<h3 id="defini%C3%A7%C3%A3o-de-uma-classe">Defini√ß√£o de uma classe</h3>

<pre><code class="php">&lt;?php

class Pessoa
{
    private string $primeiroNome;
    private string $ultimoNome;
    private \DateTimeInterface $dataNascimento;

    public function setPrimeiroNome(string $primeiroNome): void
    {
        $this-&gt;primeiroNome = $primeiroNome;
    }

    public function getPrimeiroNome(): string
    {
        return $this-&gt;primeiroNome;
    }

    public function setUltimoNome(string $ultimoNome): void
    {
        $this-&gt;ultimoNome = $ultimoNome;
    }

    public function getUltimoNome(): string
    {
        return $this-&gt;ultimoNome;
    }

    public function setDataNascimento(\DateTimeInterface $dataNascimento): void
    {
        $this-&gt;dataNascimento = $dataNascimento;
    }

    public function getDataNascimento(): \DateTimeInterface
    {
        return $this-&gt;dataNascimento;
    }
}

</code></pre>

<h3 id="utiliza%C3%A7%C3%A3o-dela">Utiliza√ß√£o dela</h3>

<pre><code class="php">$pessoa = new Pessoa();
$pessoa-&gt;setPrimeiroNome('Vinicius');
$pessoa-&gt;setUltimoNome('Dias');
$pessoa-&gt;setDataNascimento(new \DateTimeImmutable('1997-10-15')); // aceito presentes

$idade = $pessoa-&gt;getDataNascimento()-&gt;diff(new \DateImmutable())-&gt;y;

echo "{$pessoa-&gt;getPrimeiroNome()} {$pessoa-&gt;getUltimoNome()} tem $idade anos";
</code></pre>

<h3 id="problema">Problema</h3>

<p>Olhando esse simples exemplo:</p>

<ol>
<li>Voc√™ nota algum problema?</li>
<li>Identifica semelhan√ßa com algum peda√ßo de c√≥digo que voc√™ tenha escrito recentemente?</li>
</ol>

<p>Depois de voc√™ refletir um pouco, vamos continuar.</p>

<p>O c√≥digo exemplificado utiliza uma classe <code>Pessoa</code> e a partir desta classe, cria um objeto. Logo, est√° utilizando do paradigma de programa√ß√£o orientada a objetos, certo? Errado!</p>

<p>Esse exemplo √© claramente um c√≥digo procedural que usa uma classe. Nada al√©m disso.</p>

<h2 id="proposta">Proposta</h2>

<p>Se voc√™ possui uma classe, os objetos gerados atrav√©s dela devem ter seus comportamentos descritos (atrav√©s de m√©todos) e n√£o apenas fornecer os dados para realizar essas a√ß√µes.</p>

<p>O c√≥digo anterior poderia ser escrito da seguinte forma para usar o paradigma Orientado a Objetos:</p>

<pre><code class="php">&lt;?php

class Pessoa
{
    private string $primeiroNome;
    private string $ultimoNome;
    private \DateTimeInterface $dataNascimento;

    public function __construct(
        string $primeiroNome,
        string $ultimoNome,
        \DateTimeInterface $dataNascimento
    ) {
        $this-&gt;primeiroNome = $primeiroNome;
        $this-&gt;ultimoNome = $ultimoNome;
        $this-&gt;dataNascimento = $dataNascimento;
    }

    public function nomeCompleto(): string
    {
        return "{$this-&gt;primeiroNome} {$this-&gt;ultimoNome}";
    }

    public function idade(): int
    {
        $hoje = new DateTimeImmutable();

        return $this-&gt;dataNascimento-&gt;diff($hoje)-&gt;y;
    }
</code></pre>

<p>E assim poder√≠amos utilizar esta classe:</p>

<pre><code class="php">&lt;?php

$pessoa = new Pessoa('Vinicius', 'Dias', new \DateTimeImmutable('1997-10-15'));

echo "{$pessoa-&gt;nomeCompleto()} tem {$pessoa-&gt;idade()} anos.";
</code></pre>

<h3 id="motiva%C3%A7%C3%A3o-da-mudan%C3%A7a">Motiva√ß√£o da mudan√ßa</h3>

<p>Com essa simples modifica√ß√£o n√≥s n√£o temos mais inst√¢ncias inv√°lidas, j√° que agora toda <code>Pessoa</code> tem seu primeiro e √∫ltimo nome e sua data de nascimento. Antes, primeiro n√≥s est√°vamos criando uma <code>Pessoa</code> em um estado inconsistente, sem seus dados, para depois defini-los.</p>

<p>Al√©m disso, agora qualquer m√©todo que receba uma <code>Pessoa</code> por par√¢metro n√£o precisa saber se nesse objeto o nome completo est√° separado em primeiro e segundo nome ou n√£o. N√£o precisa saber como o c√°lculo da idade √© feito.</p>

<p>Caso a forma de apresentar o nome precise ser modificado (de "Vinicius Dias" para "Dias, Vinicius", por exemplo), podemos ir direto no ponto correto: O m√©todo <code>nomeCompleto</code>.</p>

<p>Embora seja um exemplo muito simples, ele mostra com clareza como normalmente escrevemos c√≥digo acreditando estar utilizando a programa√ß√£o orientada a objetos.</p>

<p>Caso voc√™ tenha algum outro exemplo desse tipo em mente, j√° tenha visto algum c√≥digo procedural com classes assim, ou tenha alguma outra sugest√£o de melhoria pra esse exemplo, que tal compartilhar com a gente aqui nos coment√°rios?</p>

<h2 id="princ%C3%ADpios-e-padr%C3%B5es">Princ√≠pios e padr√µes</h2>

<p>Para nos ajudar a utilizar de forma mais "correta" a orienta√ß√£o a objetos, existem diversos padr√µes e princ√≠pios. Uns mais simples como o <a href="https://youtu.be/7IXeLhpjk6g">Tell, Don't ask</a>, outros mais completos e complexos como os <a href="https://amzn.to/3Eplrm2">princ√≠pios SOLID</a>.</p>

<p>Todos os princ√≠pios merecem uma aten√ß√£o especial, por√©m isso foge do escopo deste artigo, mas uma r√°pida busca te mostra uma imensid√£o de conte√∫do a respeito.</p>

<h2 id="conclus%C3%A3o">Conclus√£o</h2>

<p>Muito frequentemente n√≥s utilizamos o paradigma procedural em nosso c√≥digo e s√≥ pelo fato de termos classes definidas no c√≥digo, achamos que estamos utilizando a Orienta√ß√£o a Objetos.</p>

<p>Este paradigma √© muito mais do que apenas definir classes, atributos e m√©todos, logo, precisa de muito mais estudo do que apenas a leitura da documenta√ß√£o da sua linguagem favorita para aprender a sintaxe.</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[O que √© arquitetura]]></title>
            <link href="https://dias.dev//2020-04-10-o-que-e-arquitetura/"/>
            <updated>2020-04-10T00:00:00+00:00</updated>
            <id>https://dias.dev//2020-04-10-o-que-e-arquitetura/</id>
            <content type="html"><![CDATA[<h2 id="problema">Problema</h2>

<p>Imagine que no momento da escrita desse artigo (ano de 2020) voc√™ esteja criando um sistema para a empresa que te contratou como desenvolvedor(a). Nesse sistema voc√™ pode utilizar todas as novas tecnologias, pode decidir como vai organizar o c√≥digo, enfim, o sonho de qualquer pessoa que trabalha na √°rea.</p>

<p>Como voc√™ trabalha com PHP, escolhe o framework que est√° "na boca do povo": Laravel. Come√ßa o desenvolvimento e rapidamente entrega uma primeira vers√£o do projeto. A equipe de neg√≥cios est√° feliz com toda a velocidade de entrega e a equipe t√©cnica est√° feliz de utilizar um framework da moda.</p>

<p>Os anos se passam. No futuro, voc√™ precisa dar manuten√ß√£o em um sistema que usa uma vers√£o mega desatualizada do framework j√° que eles decidiram trocar a ferramenta que fazia o acesso ao banco de dados, e toda a regra de neg√≥cios da aplica√ß√£o est√° em "models" do Eloquent.</p>

<h2 id="mundo-real">Mundo real</h2>

<p>Parece irreal, n√©!?</p>

<p>"Ah, mas o Laravel n√£o vai deixar de usar o Eloquent. N√£o faz sentido esse exemplo"</p>

<p>Bom, hoje eu trabalho em uma empresa que tem um software funcionando desde o PHP 3.</p>

<p>Em algum momento da vida desse software, acharam uma boa ideia atrelar as regras de neg√≥cio a um projeto conhecido como Pear DB. Esse projeto hoje n√£o recebe atualiza√ß√µes (apenas corre√ß√µes de seguran√ßa), al√©m de nos deixar "amarrados" a sua filosofia de c√≥digo, que difere do que temos nos mundos atuais de PSRs, Composer, etc.</p>

<p>Resultado: O sistema evolui. Novas funcionalidades s√£o adicionadas todo dia. A equipe de neg√≥cios continua recebendo suas demandas, mas como a forma de desenvolver n√£o evoluiu junto com o conhecimento e ferramentas atuais, o prazo j√° n√£o √© o mesmo.</p>

<p>Al√©m disso, novos integrantes da equipe sofrem para entender todo o espaguete que o c√≥digo virou. Caos!</p>

<h2 id="como-poderia-ter-sido%3F">Como poderia ter sido?</h2>

<p>Se os arquitetos desse sistema pudessem voltar no tempo, o que fariam, voc√™ pode se perguntar. Minha ideia aqui √© levantar algumas op√ß√µes.</p>

<p>Em termos de c√≥digo, entidades poderiam ter sido criadas sem nenhum conhecimento da infraestrutura que cuida da persist√™ncia. Se √© utilizado Pear DB, PDO, Doctrine, Eloquent, uma API, um arquivo com os dados, tanto faz. A l√≥gica de neg√≥cios estaria intacta.</p>

<p>E para salvar no banco? Classes especializadas nessa tarefa, tamb√©m conhecidas como reposit√≥rios, poderiam ter sido utilizadas. Essas classes saberiam lidar com as entidades e fazer a tradu√ß√£o necess√°ria para o sistema de persist√™ncia (usando SQL, por exemplo).</p>

<p>E se a ferramenta usada fosse descontinuada? Bom, simples: Poder√≠amos criar uma <code>interface</code> que define o que um reposit√≥rio deve saber fazer. Quando o Pear DB deixasse de receber suporte, nossa classe <code>PearDbQuestionRepository</code> (reposit√≥rio de perguntas) poderia ser f√°cilmente substitu√≠da por uma classe <code>PdoQuestionRepository</code>, ou at√© mesmo <code>DoctrineQuestionRepository</code>. Isso n√£o faria diferen√ßa para as regras de neg√≥cio, que precisavam de qualquer implementa√ß√£o da interface <code>QuestionRepository</code>.</p>

<h2 id="o-que-isso-tem-a-ver-com-arquitetura%3F">O que isso tem a ver com arquitetura?</h2>

<p>‚Äî Essa solu√ß√£o proposta √© perfeita?<br>
‚Äî Longe disso! Tem suas vantagens e desvantagens</p>

<p>Decis√µes de como organizar nosso c√≥digo de forma que ele continue "utiliz√°vel" ap√≥s determinado per√≠odo √© o prop√≥sito mais simples de uma arquitetura.</p>

<p>Arquitetura, segundo nosso querido Google, √©: "arte e t√©cnica de organizar espa√ßos e criar ambientes para abrigar os diversos tipos de atividades humanas, visando tb. a determinada inten√ß√£o pl√°stica."</p>

<p>Se trazemos isso para o mundo do desenvolvimento temos uma defini√ß√£o semelhante √† seguinte: "A arquitetura de software de um sistema consiste na defini√ß√£o dos componentes de software, suas propriedades externas, e seus relacionamentos com outros softwares."</p>

<p>Voc√™ pode encontrar in√∫meras defini√ß√µes para esse termo, mas em sua ess√™ncia, arquitetura de software nos ajuda a definir como organizar nosso c√≥digo, torn√°-lo mais compreens√≠vel, manuten√≠vel a longo prazo, e separar a responsabilidades de dom√≠nio (regras de neg√≥cio) da infraestrutura (banco de dados, log, envio de e-mails, etc).</p>

<h2 id="padr%C3%B5es-arquiteturais">Padr√µes arquiteturais</h2>

<p>O exemplo que eu dei √© bem raso e cita apenas um pequeno problema que uma arquitetura bem feita visa resolver. Para resolver diversos outros problemas, padr√µes arquiteturais surgiram ao longo do tempo.</p>

<p>Voc√™ muito provavelmente conhece pelo menos um (nem que seja de nome), e aqui cito nomes de padr√µes arquiteturais bem famosos:</p>

<ul>
<li>MVC (o famoso Model-View-Controller)</li>
<li>ADR (Action-Domain-Response, uma esp√©cie de evolu√ß√£o do MVC para web)</li>
<li><a href="https://amzn.to/3Do3e7h">SOA (Arquitetura orientada a servi√ßos)</a></li>
<li><a href="https://amzn.to/3dljwDj">Clean Architecture</a> (em portugu√™s, <a href="https://amzn.to/3fqp69x">Arquitetura Limpa</a>)</li>
<li>Hexagonal Architecture (em portugu√™s, Arquitetura Hexagonal)</li>
<li>Onion Architecture (em portugu√™s, Arquitetura em Camadas (cebola))</li>
</ul>

<p>Citar especificidades de cada padr√£o e suas semelhan√ßas / diferen√ßas fogem do escopo desse post, mas √© interessante conhecer e se adaptar com alguns nomes.</p>

<h2 id="conclus%C3%A3o">Conclus√£o</h2>

<p>N√£o existe sistema sem arquitetura, s√≥ sistema com arquitetura ruim.</p>

<p>Mesmo que no desenvolvimento de um sistema voc√™ n√£o siga nenhum padr√£o arquitetural, h√° decis√µes de arquitetura no c√≥digo, e se mal feitas, essas decis√µes podem te assombrar por muito MUITO tempo.</p>
]]></content>
        </entry>
    </feed>